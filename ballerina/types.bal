// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;

# Contains information about the BCC email address
public type BccEmailAddress record {
    # Only users with canManageAccount setting can use this option. An array of up to 5 email addresses the envelope is sent to as a BCC email. 
    #  
    # Example: If your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address
    string bccEmailAddressId?;
    # Specifies the BCC email address. DocuSign verifies that the email format is correct, but does not verify that the email is active.Using this overrides the BCC for Email Archive information setting for this envelope.
    # 
    # Maximum of length: 100 characters. 
    string email?;
};

# Use this object to configure a [DocuSign Connect webhook](/platform/webhooks/connect/)
public type EventNotification record {
    # When **true,** the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be downloaded via the [ConnectEvents resource](/docs/esign-rest-api/reference/connect/connectevents/)
    string loggingEnabled?;
    # When **true,** the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. 
    string includeDocumentFields?;
    # When **true,** the DocuSign Connect service checks that the message was received and retries on failures. 
    string requireAcknowledgment?;
    # When **true,**
    # the Connect webhook messages
    # will include the envelope's PDF documents.
    # Including the PDF documents
    # greatly increases the size of the notification messages.
    # Ensure that your listener can handle
    # incoming messages that are 25MB or larger
    string includeDocuments?;
    # When **true,** the envelope's time zone information is included in the webhook messages. 
    string includeTimeZone?;
    # When **true,** this tells the Connect service that the user's endpoint has implemented a SOAP interface. 
    string useSoapInterface?;
    # When **true,**
    # the Connect service will digitally sign
    # the data.
    # The signature will be included in the message
    string includeCertificateWithSoap?;
    # When **true,** Connect will include the sender account as Custom Field in the data
    string includeSenderAccountAsCustomField?;
    # The namespace of the SOAP interface.
    # 
    # The namespace value must be set if useSoapInterface is set to true
    string soapNameSpace?;
    # The endpoint to which Connect should send webhook notification messages via an HTTPS POST request. The URL must start with `https`. The customer's web server must use an SSL/TLS certificate whose CA is in the Microsoft list of trusted CAs. Self-signed certificates are not acceptable, but you can use free certificates from Let's Encrypt.
    # 
    # The maximum length of this property is 4096 bytes
    string url?;
    # When **true,** HMAC headers will be included with the webhook notifications.
    # 
    # **Note:** [HMAC must enabled](/platform/webhooks/connect/hmac/) at the account level with [one or more HMAC secrets](/platform/webhooks/connect/setting-up-hmac/)
    string includeHMAC?;
    # When **true,** Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol. 
    string signMessageWithX509Cert?;
    ConnectEventData eventData?;
    # 
    string integratorManaged?;
    # 
    string deliveryMode?;
    # When **true,** the Connect Service includes the Certificate of Completion with completed envelopes. 
    string includeCertificateOfCompletion?;
    # When **true,** this tells the Connect Service to include the void reason, as entered by the person that voided the envelope, in the message. 
    string includeEnvelopeVoidReason?;
    # A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property. 
    # 
    # To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both
    EnvelopeEvent[] envelopeEvents?;
    # A comma-separated list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `urlToPublishTo` property.
    # 
    # Set this property when you are using the [JSON SIM event model](/platform/webhooks/connect/improved-json-sim-event-model/). If you are instead using any of [the legacy event message formats](/platform/webhooks/connect/legacy-message-formats/), set either the `envelopeEvents` property or the `recipientEvents` property.
    # 
    # The [possible event statuses](/platform/webhooks/connect/improved-json-sim-event-model/#eventreference) are:
    # 
    # * `envelope-created`
    # * `envelope-sent`
    # * `envelope-resent`
    # * `envelope-delivered`
    # * `envelope-completed`
    # * `envelope-declined`
    # * `envelope-voided`
    # * `recipient-authenticationfailed`
    # * `recipient-autoresponded`
    # * `recipient-declined`
    # * `recipient-delivered`
    # * `recipient-completed`
    # * `recipient-sent`
    # * `recipient-resent`
    # * `template-created`
    # * `template-modified`
    # * `template-deleted`
    # * `envelope-corrected`
    # * `envelope-purge`
    # * `envelope-deleted`
    # * `envelope-discard`
    # * `recipient-reassign`
    # * `recipient-delegate`
    # * `recipient-finish-later`
    # * `click-agreed`
    # * `click-declined`
    string[] events?;
    # 
    string includeOAuth?;
    # A list of recipient event statuses that will trigger Connect to send updates to   the endpoint specified in the URL property.
    # 
    # To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both
    RecipientEvent[] recipientEvents?;
};

# 
public type UserSignatureDefinition record {
    # The realtor's last name
    string nrdsLastName?;
    # The National Association of Realtors (NAR) membership ID for a user who is a realtor
    string nrdsId?;
    # The phonetic spelling of the `signatureName`
    string phoneticName?;
    # Specifies the type of signature
    string signatureType?;
    # Optionally specify an external identifier for the user's signature
    string externalID?;
    # Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID
    string signatureId?;
    # The format of a stamp. Valid values are:
    # 
    # - `NameHanko`: The stamp represents only the signer's name.
    # - `NameDateHanko`: The stamp represents the signer's name and the date. 
    string stampFormat?;
    # The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents
    string stampSizeMM?;
    # Boolean that specifies whether the signature is the default signature for the user
    string isDefault?;
    # When **true,** users may not resize the stamp
    string disallowUserResizeStamp?;
    # The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.
    # 
    # - `"1_DocuSign"`
    # - `"2_DocuSign"`
    # - `"3_DocuSign"`
    # - `"4_DocuSign"`
    # - `"5_DocuSign"`
    # - `"6_DocuSign"`
    # - `"7_DocuSign"`
    # - `"8_DocuSign"`
    # - `"Mistral"`
    # - `"Rage Italic"`
    string signatureFont?;
    # Specifies the user's signature name
    string signatureName?;
    DateStampProperties dateStampProperties?;
    # Specificies the type of image. Valid values:
    # 
    # - `stamp_image`
    # - `signature_image`
    # - `initials_image`
    string imageType?;
    # Specifies the user's signature in initials format
    string signatureInitials?;
};

# 
public type SmartSection record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.
    # 
    # **Note:** A start anchor, an end anchor, or both are required
    string startAnchor?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    SmartSectionAnchorPosition startPosition?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # When **true,** the `startAnchor` and `endAnchor` for the Smart Section must match both the case and the content of the strings in the HTML
    boolean caseSensitive?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.
    # 
    # **Note:** A start anchor, an end anchor, or both are required
    string endAnchor?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    PropertyMetadata lockedMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    SmartSectionDisplaySettings displaySettings?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** removes the start anchor string for the Smart Section from the HTML, preventing it from displaying
    boolean removeStartAnchor?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    SmartSectionAnchorPosition endPosition?;
    PropertyMetadata overlayTypeMetadata?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    # The type of overlay to draw on the document. The following overlay types are supported:
    # 
    # - `line`
    # - `outline`
    string overlayType?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # When **true,** removes the end anchor string for the Smart Section from the HTML, preventing it from displaying
    boolean removeEndAnchor?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
};

# Contains information about the method used for authentication
public type AuthenticationMethod record {
    #  The data and time the user last used the authentication method. 
    string lastTimestamp?;
    # Indicates the type of authentication. Valid values are: PhoneAuth, STAN, ISCheck, OFAC, AccessCode, AgeVerify, or SSOAuth. 
    string authenticationType?;
    # The number of times the authentication method was used. 
    string totalCount?;
    # The last provider that authenticated the user. 
    string lastProvider?;
};

# A complex element that has up to four Question/Answer pairs for forgotten password information
public type ForgottenPasswordInformation record {
    # The answer to the fourth forgotten password challenge question
    string forgottenPasswordAnswer4?;
    # The answer to the third forgotten password challenge question
    string forgottenPasswordAnswer3?;
    # The second challenge question presented to a user who has forgotten their password
    string forgottenPasswordQuestion2?;
    # The first challenge question presented to a user who has forgotten their password
    string forgottenPasswordQuestion1?;
    # The fourth challenge question presented to a user who has forgotten their password
    string forgottenPasswordQuestion4?;
    # The third challenge question presented to a user who has forgotten their password
    string forgottenPasswordQuestion3?;
    # The answer to the second forgotten password challenge question
    string forgottenPasswordAnswer2?;
    # The answer to the first forgotten password challenge question
    string forgottenPasswordAnswer1?;
};

# Represents the Queries record for the operation: BulkSendV2Envelopes_GetBulkSendBatchEnvelopes
public type BulkSendV2EnvelopesGetBulkSendBatchEnvelopesQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # When `recipients`, only envelopes with recipient nodes will be included in the response
    string include?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Valid values: `1` to `1000`
    string count?;
    # The envelope attribute used to sort the results. Valid values are:
    # 
    # - `created` (default)
    # - `completed`
    # - `last_modified`
    # - `sent`
    # - `status`
    # - `subject`
    # - `status_changed`
    @http:Query {name: "order_by"}
    string orderBy?;
    # The order in which to sort the results. Valid values are:
    # 
    # - Descending order: `desc` (default)
    # - Ascending order: `asc`
    string 'order?;
    # Use this parameter to search for specific text
    @http:Query {name: "search_text"}
    string searchText?;
    # Comma-separated list of envelope statuses.
    # 
    # Note that `any` should not be included with other statuses. In other words, `any` is a valid parameter value, but `any,sent` is not.
    # 
    # Use the value `deliveryfailure` to get all envelopes with `AuthFailed` and `AutoResponded` status. This value is specific to bulk sending
    string status?;
};

# The request body for the [EnvelopeViews: createRecipient](/docs/esign-rest-api/reference/envelopes/envelopeviews/createrecipient/)
# and
# [EnvelopeViews: createSharedRecipient](/docs/esign-rest-api/reference/envelopes/envelopeviews/createsharedrecipient/) methods
public type RecipientViewRequest record {
    # A sender-generated value that indicates the date and time that the signer was authenticated
    string authenticationInstant?;
    # A sender-created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.
    # 
    # Use your application's client ID (user ID) for the recipient. Doing so enables the details of your application's authentication of the recipient to be connected to the recipient's signature if the signature is disputed or repudiated.
    # 
    # Maximum length: 100 characters
    string clientUserId?;
    # The domain in which the user authenticated
    string securityDomain?;
    # When the value of `xFrameOptions` is `allow_from`, this property specifies the origin on which the page is allowed to display in a frame. If the value of `xFrameOptions` is `allow_from`, you must include a value for this property
    string xFrameOptionsAllowFromUrl?;
    # Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into unauthorized pages or frames.
    # 
    # Valid values are:
    # 
    # - `deny`: The page cannot be displayed in a frame.
    # - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.
    # - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property
    string xFrameOptions?;
    # 
    string[] messageOrigins?;
    # Only used if `pingUrl` is specified. This is the interval, in seconds, between pings on the `pingUrl`.  The default is `300` seconds. Valid values are 60-1200 seconds
    string pingFrequency?;
    # The username of the recipient. You can use either `email` and `userName` or `userId` to identify the recipient
    string userName?;
    # The user ID of the recipient. You can use either the user ID or email and user name to identify the recipient. 
    # 
    # If `userId` is used and a `clientUserId` is provided, the value in the `userId` property must match a `recipientId` (which you can retrieve with a GET recipients call) for the envelope. 
    # 
    # If a `userId` is used and a `clientUserId` is not provided, the `userId` must match the user ID of the authenticating user
    string userId?;
    # A unique identifier of the authentication event executed by the client application
    string assertionId?;
    # Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer. 
    # 
    # Choose a value from this list: 
    # * Biometric 
    # * Email
    # * HTTPBasicAuth
    # * Kerberos
    # * KnowledgeBasedAuth
    # * None
    # * PaperDocuments
    # * Password
    # * RSASecureID
    # * SingleSignOn_CASiteminder
    # * SingleSignOn_InfoCard
    # * SingleSignOn_MicrosoftActiveDirectory
    # * SingleSignOn_Other
    # * SingleSignOn_Passport
    # * SingleSignOn_SAML
    # * Smartcard
    # * SSLMutualAuth
    # * X509Certificate
    # 
    # This information is included in the Certificate of Completion
    string authenticationMethod?;
    # The client URL that the DocuSign Signing experience should ping to indicate to the client that Signing is active. An HTTP GET call is executed against the client. The response from the client is ignored. The intent is for the client to reset its session timer when the request is received
    string pingUrl?;
    # Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document
    string recipientId?;
    RecipientTokenClientURLs clientURLs?;
    # 
    string[] frameAncestors?;
    # (Required) The URL to which the user should be redirected
    # after the signing session has ended.
    # 
    # Maximum Length: 470 characters. If the `returnUrl` exceeds this
    # limit, the user is redirected to a truncated URL
    # Be sure to include `https://` in the URL
    # or redirecting might fail on some browsers.
    # 
    # 
    # When DocuSign redirects to
    # this URL, it will include an `event` query parameter that your app can use:
    # 
    # * `access_code_failed`: Recipient used incorrect access code.
    # * `cancel`: Recipient canceled the signing operation,
    #   possibly by using the **Finish Later** option.
    # * `decline`: Recipient declined to sign.
    # * `exception`: A system error occurred during the signing process.
    # * `fax_pending`: Recipient has a fax pending.
    # * `id_check_failed`: Recipient failed an ID check.
    # * `session_timeout`: The session timed out. An account can control this timeout by using the **Signer Session Timeout** option.
    # * `signing_complete`: The recipient completed the signing ceremony.
    # * `ttl_expired`: The Time To Live token for the envelope has expired.
    #   After being successfully invoked, these tokens expire
    #   after five minutes.
    # * `viewing_complete`: The recipient completed viewing an envelope
    #   that is in a read-only/terminal state,
    #   such as completed, declined, or voided.
    string returnUrl?;
    # (Required) Specifies the email of the recipient. You can use either `email` and `userName` or `userId` to identify the recipient
    string email?;
};

# This object configures a recipient's read/write access to a document
public type DocumentVisibility record {
    # When **true,** the document is visible to the recipient
    string visible?;
    # Indicates whether the document is editable:
    # 
    # - `editable`
    # - `read_only`
    string rights?;
    # The ID of the recipient to whom the document visibility setting is applied. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    ErrorDetails errorDetails?;
};

# 
public type FeatureAvailableMetadata record {
    # 
    string availabilty?;
    # 
    string featureName?;
};

# Represents the Queries record for the operation: AccountSignatures_PutAccountSignatureById
public type AccountSignaturesPutAccountSignatureByIdQueries record {
    # When **true,** closes the current signature
    @http:Query {name: "close_existing_signature"}
    string closeExistingSignature?;
};

# Represents the Queries record for the operation: ConnectLog_GetConnectLog
public type ConnectLogGetConnectLogQueries record {
    # When **true,** the response includes the `connectDebugLog` information
    @http:Query {name: "additional_info"}
    string additionalInfo?;
};

# Represents the Queries record for the operation: AccountCustomFields_PostAccountCustomFields
public type AccountCustomFieldsPostAccountCustomFieldsQueries record {
    # (Optional) When **true,** the new custom field is applied to all of the templates on the account
    @http:Query {name: "apply_to_templates"}
    string applyToTemplates?;
};

# Details about consumer disclosures
public type ConsumerDisclosure record {
    # When **true,** the  recipient must agree to the consumer disclosure. The value of this property is read-only. It is calculated based on the account setting `consumerDisclosureFrequency` and the user's actions
    string mustAgreeToEsign?;
    # Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.
    # 
    # Maximum length: 20 characters. 
    string withdrawPostalCode?;
    # Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.
    # 
    # Maximum length: 100 characters. 
    string withdrawAddressLine2?;
    # Other information about the requirements for the user to change their email address.
    # 
    # Maximum length: 255 characters.
    # 
    # Example: 
    # 
    # `We do not require any other information from you to change your email address.`
    string changeEmailOther?;
    # Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.
    # 
    # Maximum length: 100 characters. 
    string withdrawAddressLine1?;
    # When **true,** specifies that the company name in the signing brand is used for the disclosure. Whenever an envelope is sent from the account that uses a signing brand with a specified company name, that value is used in email notifications and in the signing experience.  
    # 
    # When **false** (default), or if the signing brand does not specify a company name, the account name is used instead.
    # 
    # **Note:** This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. 
    string useBrand?;
    # Specifies the company name used in the disclosure. The default value is the account name.
    # 
    # However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true.** Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.
    # 
    # **Note:** This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. You must also set the value of the `useBrand` property to **true.**
    string companyName?;
    # Specifies the fee collection method for cases in which the customer requires paper copies of the document.
    # 
    # Maximum length: 255 characters.
    # 
    # Example: 
    # 
    # `We will bill you for any fees at that time, if any.`
    string copyFeeCollectionMethod?;
    # When **true,** indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false.**
    # **Note:** Only Admin users can change this setting
    string allowCDWithdraw?;
    SettingsMetadata useConsumerDisclosureWithinAccountMetadata?;
    # The phone number of the company associated with the consumer disclosure, as a free-formatted string
    string companyPhone?;
    # Text indicating the consequences of withdrawing consent.
    # 
    # Maximum length: 255 characters
    string withdrawConsequences?;
    # When **true,** specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement
    string useConsumerDisclosureWithinAccount?;
    # The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.
    # 
    # **Note:** If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting
    string esignText?;
    # When **true** (default), indicates that the customer can withdraw consent by email
    string withdrawByEmail?;
    # The GUID of the account associated with the consumer disclosure
    string accountEsignId?;
    # Contains the phone number that a customer can call to register consent withdrawal notification as a free-formatted string.
    # 
    # Maximum length: 20 characters. 
    string withdrawPhone?;
    # When **true,** indicates that the consumer disclosure is a custom disclosure. The default is **false.**
    string custom?;
    # The email address to which the customer should send a request for copies of a document.
    # 
    # Maximum length: 100 characters
    string copyRequestEmail?;
    # The code for the language version of the disclosure. The following languages are supported:
    # 
    # - Arabic (`ar`)
    # - Bulgarian (`bg`)
    # - Czech (`cs`)
    # - Chinese Simplified (`zh_CN`)
    # - Chinese Traditional (`zh_TW`)
    # - Croatian (`hr`)
    # - Danish (`da`)
    # - Dutch (`nl`)
    # - English US (`en`)
    # - English UK (`en_GB`)
    # - Estonian (`et`)
    # - Farsi (`fa`)
    # - Finnish (`fi`)
    # - French (`fr`)
    # - French Canadian (`fr_CA`)
    # - German (`de`)
    # - Greek (`el`)
    # - Hebrew (`he`)
    # - Hindi (`hi`)
    # - Hungarian (`hu`)
    # - Bahasa Indonesian (`id`)
    # - Italian (`it`)
    # - Japanese (`ja`)
    # - Korean (`ko`)
    # - Latvian (`lv`)
    # - Lithuanian (`lt`)
    # - Bahasa Melayu (`ms`)
    # - Norwegian (`no`)
    # - Polish (`pl`)
    # - Portuguese (`pt`)
    # - Portuguese Brazil (`pt_BR`)
    # - Romanian (`ro`)
    # - Russian (`ru`)
    # - Serbian (`sr`)
    # - Slovak (`sk`)
    # - Slovenian (`sl`)
    # - Spanish (`es`)
    # - Spanish Latin America (`es_MX`)
    # - Swedish (`sv`)
    # - Thai (`th`)
    # - Turkish (`tr`)
    # - Ukrainian (`uk`) 
    # - Vietnamese (`vi`)
    # 
    # Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`
    string languageCode?;
    # The final, assembled text of the Electronic Record and Signature Disclosure that includes the appropriate `companyName` and other specifics. It also includes the HTML tags used for formatting
    string esignAgreement?;
    # Contains the city of the postal address to which a customer can send a consent withdrawal notification.
    # 
    # Maximum length: 50 characters. 
    string withdrawCity?;
    # **Deprecated.** 
    # 
    # The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored. 
    string pdfId?;
    # When **true,** indicates that the customer can withdraw consent by postal mail. The default is **false.**
    string withdrawByMail?;
    # The cost per page if the customer requests paper copies.
    # 
    # Example: 
    # 
    # `0.0000`
    string copyCostPerPage?;
    # Contains the state of the postal address to which a customer can send a consent withdrawal notification.
    # 
    # Example: `PA`
    string withdrawState?;
    # When **true** (default), indicates that eSign is enabled
    string enableEsign?;
    # Contains the email address to which a customer can send a consent withdrawal notification.
    # 
    # Maximum length: 100 characters. 
    string withdrawEmail?;
    # If the customer needs to change their email address, this is the email address to which they should the change request.
    # 
    # Maximum length: 100 characters
    string changeEmail?;
    SettingsMetadata allowCDWithdrawMetadata?;
    # When **true,** indicates that the customer can withdraw consent by phone. The default is **false.**
    string withdrawByPhone?;
    # Contains any other information needed to withdraw consent.
    # 
    # Maximum length: 255 characters.
    # 
    # Example:
    # 
    # `We do not need any other information from you to withdraw consent.`
    string withdrawOther?;
};

# Specifies ID Verification applied on an envelope by workflow ID.
# See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/)
# method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource
# for more information on how to retrieve workflow IDs available for an account.
# This can be used in addition to other [recipient authentication](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=kzp1578456318101.html) methods
public type RecipientIdentityVerification record {
    # 
    RecipientIdentityInputOption[] inputOptions?;
    PropertyMetadata workflowIdMetadata?;
    # 
    string workflowLabel?;
    # ID of the Identity Verification worklow used to verify recipients' identity.
    # 
    # This ID must match one of the [workflowId](/docs/esign-rest-api/reference/accounts/identityverifications/list/) available to your account
    string workflowId?;
};

# Deprecated
public type BrandEmailContent record {
    # Deprecated
    string emailToLink?;
    # Deprecated
    string linkText?;
    # Deprecated
    string content?;
    # Deprecated
    string emailContentType?;
};

# A complex element that contains information about a user's authentication status
public type AuthenticationStatus record {
    EventResult openIDResult?;
    EventResult idLookupResult?;
    EventResult facebookResult?;
    EventResult twitterResult?;
    EventResult anySocialIDResult?;
    EventResult liveIDResult?;
    EventResult signatureProviderResult?;
    EventResult ageVerifyResult?;
    EventResult accessCodeResult?;
    EventResult linkedinResult?;
    EventResult sTANPinResult?;
    EventResult idQuestionsResult?;
    EventResult phoneAuthResult?;
    EventResult smsAuthResult?;
    EventResult salesforceResult?;
    EventResult identityVerificationResult?;
    EventResult googleResult?;
    EventResult ofacResult?;
    EventResult yahooResult?;
};

# Describes the jurisdiction of a notary.
# This is read-only object
public type Jurisdiction record {
    # When **true,** the seal can be uploaded by the user
    string allowUserUploadedSeal?;
    # When **true,** the seal can be generated by the platform
    string allowSystemCreatedSeal?;
    # When **true,** the name of the state appears in the seal
    string stateNameInSeal?;
    # When **true,** the name of the notary appears in the seal
    string notaryPublicInSeal?;
    # The ID of the jurisdiction.
    # The following jurisdictions
    # are supported:
    # 
    # -  `5 - California`
    # -  `6 - Colorado`
    # -  `9 - Florida`
    # -  `10 - Georgia`
    # -  `12 - Idaho`
    # -  `13 - Illinois`
    # -  `14 - Indiana`
    # -  `15 - Iowa`
    # -  `17 - Kentucky`
    # -  `23 - Minnesota`
    # -  `25 - Missouri`
    # -  `30 - New Jersey`
    # -  `32 - New York`
    # -  `33 - North Carolina`
    # -  `35 - Ohio`
    # -  `37 - Oregon`
    # -  `38 - Pennsylvania`
    # -  `40 - South Carolina`
    # -  `43 - Texas`
    # -  `44 - Utah`
    # -  `47 - Washington`
    # -  `48 - West Virginia`
    # -  `49 - Wisconsin`
    # -  `62 - Florida Commissioner of Deeds`
    string jurisdictionId?;
    # The county of the jurisdiction
    string county?;
    # The name of the jurisdiction. Typically the state name
    string name?;
    # When **true,** the county name appears in the seal
    string countyInSeal?;
    # When **true,** the notary's `comissionId` appears in the seal
    string commissionIdInSeal?;
    # When **true,** this jurisdiction is enabled
    string enabled?;
};

# Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication
public type RecipientSMSAuthentication record {
    # An array containing a list of phone numbers that the recipient can use for SMS text authentication. 
    string[] senderProvidedNumbers?;
    PropertyMetadata senderProvidedNumbersMetadata?;
};

# A tab that displays additional information, in the form of a
# note, for the recipient
public type Note record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # **Note:** Note tabs never display this tooltip in the signing interface.
    # 
    # Although you can technically set a value via the API for this tab,
    # it will not be displayed to the recipient
    string tooltip?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# Numerical tabs provide robust display and validation features,
# including formatting for different regions and currencies,
# and minimum and maximum value validation.
# See [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/)
# to learn more about this tab type
public type Numerical record {
    # The unique identifier for the tab
    string tabId?;
    # The raw numerical value of the tab.
    # 
    # For example,
    # if the locale policy is `en-US`
    # and the `numericalValue` is `-1234.56`,
    # the `value` property will contain the string
    # `"($ 1,234.56)"`
    string numericalValue?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # Specifies how numerical data is validated. Valid values:
    # 
    # - `number`
    # - `currency`
    string validationType?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    # When **true,** this tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # The minimum value that the numerical tab can take on.
    # The smallest value allowed, and the default if not specified, is
    # `-999999999.99`
    string minNumericalValue?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # 
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    # The original value of the tab
    string originalNumericalValue?;
    PropertyMetadata maxLengthMetadata?;
    # The maximum value that the numerical tab can take on.
    # The largest value allowed, and the default if not specified, is
    # `999999999.99`
    string maxNumericalValue?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The `numericalValue` of the tab
    # displayed according to its locale policy.
    # 
    # For example,
    # if the locale policy is `en-US`
    # and the `numericalValue` is `-1234.56`,
    # this property will contain the string
    # `"($ 1,234.56)"`.
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign-generated custom tab ID for the custom tab to be applied.
    # This can only be used when adding new tabs for a recipient.
    # When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This ID must refer to an existing document
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# Details about the phone numbers associated with a specific contact
public type ContactPhoneNumber record {
    # The type of phone number. Valid values are:
    # 
    # - `home`
    # - `mobile`
    # - `work`
    # - `other`
    # - `fax`
    string phoneType?;
    # The contact's phone number.
    # 
    # Example: `+12223334444`
    string phoneNumber?;
};

# User information
public type UserInformation record {
    # The date and time when the user last logged in to the system
    string lastLogin?;
    # The user's last name. 
    # Maximum Length: 50 characters
    string lastName?;
    # Status of the user's account. One of:
    # 
    # - `ActivationRequired`
    # - `ActivationSent`
    # - `Active`
    # - `Closed`
    # - `Disabled`
    string userStatus?;
    # The user's job title
    string jobTitle?;
    # The UTC DateTime when the item was created
    string createdDateTime?;
    # The title of the user
    string title?;
    # The user's encrypted password hash
    string password?;
    # Object representing the user's custom Connect configuration
    ConnectUserObject[] connectConfigurations?;
    # This field is no longer supported for most accounts. To create an eSignature user without sending an activation email, use the Admin API by following [these steps](/docs/admin-api/how-to/create-active-user/)
    string sendActivationEmail?;
    # The two-letter code for the user's country
    string countryCode?;
    ForgottenPasswordInformation forgottenPasswordInfo?;
    # The suffix for the user's name, such as Jr, IV, PhD, etc.
    # 
    # Limit: 50 characters. 
    string suffixName?;
    # The name/value pair information for the user custom setting
    NameValue[] customSettings?;
    # The name of the user's company
    string company?;
    # The name of the account permission profile. 
    # 
    # Example: `Account Administrator`
    string permissionProfileName?;
    # The URL for retrieving the user's profile image
    string profileImageUri?;
    # An endpoint URI that you can use to retrieve the user's signature image
    string signatureImageUri?;
    # The user's email address
    string email?;
    AddressInformation homeAddress?;
    # If password expiration is enabled, the date-time when the user's password expires
    string passwordExpiration?;
    # 
    string subscribe?;
    # When **true,** specifies that an additional activation email be sent if user's log on fails before the account is activated
    string sendActivationOnInvalidLogin?;
    # The default account ID associated with the user
    string defaultAccountId?;
    # A list of the group information for groups to add the user to.
    # Use [UserGroups: listGroups](/docs/esign-rest-api/reference/usergroups/groups/list/) to get information about groups.
    # 
    # When setting a user's group, only the `groupId` is required
    Group[] groupList?;
    # Determines if the feature set is actively set as part of the plan
    string isAdmin?;
    # Boolean value that indicates whether the user is currently logged in or not
    string loginStatus?;
    # The name of the user
    string userName?;
    # 
    string isAlternateAdmin?;
    # A URI containing the user ID
    string uri?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # The date and time that the user's profile was last modified
    string userProfileLastModifiedDate?;
    AddressInformation workAddress?;
    # The URI for retrieving the image of the user's initials
    string initialsImageUri?;
    # When **true,** National Association of Realtors (NAR) signature logos are enabled for the user
    string isNAREnabled?;
    # 
    boolean hasRemoteNotary?;
    # The user's first name. 
    # Maximum Length: 50 characters
    string firstName?;
    UserSettingsInformation userSettings?;
    # The date and time that the user was added to the account
    string userAddedToAccountDateTime?;
    # The user's middle name. 
    # Limit: 50 characters
    string middleName?;
    # The ID of the permission profile.
    # 
    # Use [AccountPermissionProfiles: list](/docs/esign-rest-api/reference/accounts/accountpermissionprofiles/list/)
    # to get a list of permission profiles and their IDs.
    # 
    # You can also download a CSV file of all permission profiles
    # and their IDs from the **Settings > Permission Profiles** page
    # of your eSignature account page
    string permissionProfileId?;
    # Access code provided to the user to activate the account
    string activationAccessCode?;
    # The type of user, for example `CompanyUser`
    string userType?;
    # Boolean value that specifies whether the user is enabled for updates from DocuSign Connect
    string enableConnectForUser?;
    ErrorDetails errorDetails?;
};

# Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password
public type AccountPasswordQuestionsRequired record {
    # The maximum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or greater than `minimumQuestions`
    string maximumQuestions?;
    # The minimum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or less than `maximumQuestions`
    string minimumQuestions?;
};

# This object contains information used to
# configure [eNote][eNote] functionality.
# To use eNote, the Allow eNote for eOriginal account plan item must be on,
# and the Connect configuration for eOriginal must be set correctly.
# 
# [eNote]: https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=tsn1583277394951.html
public type ENoteConfiguration record {
    # When **false,** the user must configure Connect and eOriginal for the integration to work
    string connectConfigured?;
    # The user's encrypted password hash
    string password?;
    # 
    string apiKey?;
    # The name of the organization
    string organization?;
    # When **false,** the user must configure eNote for the feature to work.
    # 
    # **Note:** In the account settings, `allowENoteEOriginal` must be **true**
    # to make changes to the configuration
    string eNoteConfigured?;
    # The user's username
    string userName?;
};

# A complex element that specifies notifications (expirations and reminders) for the envelope
public type AccountNotification record {
    Expirations expirations?;
    Reminders reminders?;
    # When **true,** the user can override envelope expirations
    string userOverrideEnabled?;
};

# A complex element that specifies the notification settings for the envelope
public type Notification record {
    Expirations expirations?;
    Reminders reminders?;
    # When **true,** the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When **false,** the reminders and expirations settings specified in this request are used. The default value is **false.**
    string useAccountDefaults?;
};

# 
public type NotaryRecipient record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # Reserved for DocuSign
    string isBulkRecipient?;
    PropertyMetadata requireIdLookupMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # When **true,** this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient
    string defaultRecipient?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    PropertyMetadata isBulkRecipientMetadata?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    # When **true,** specifies that the recipient creates the tabs
    string recipientSuppliesTabs?;
    # 
    string notaryThirdPartyPartner?;
    # Optional element. When **true,** the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account
    string agentCanEditName?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # When **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once)
    string signInEachLocation?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    RecipientSignatureInformation signatureInfo?;
    # 
    string notarySourceType?;
    # The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
    RecipientSignatureProvider[] recipientSignatureProviders?;
    # 
    string notarySignerEmailSent?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # When **true,** the signer must print, sign, and upload or fax the signed documents to DocuSign
    string requireSignOnPaper?;
    # By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.
    # 
    # This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. 
    # 
    # Set this parameter to `safe` to use a SAFE-BioPharma certificate.
    # 
    # The signer must be enrolled in the SAFE program to sign with a SAFE certificate
    string requireSignerCertificate?;
    PropertyMetadata routingOrderMetadata?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # Reserved for DocuSign
    string statusCode?;
    # The user's last name. 
    # Maximum Length: 50 characters
    string lastName?;
    PropertyMetadata signInEachLocationMetadata?;
    # URL that directs the recipient to LiveOak to complete the remote online notarization process. This property is read-only
    string liveOakStartURL?;
    # When **true,** autonavigation is set for the recipient
    string autoNavigation?;
    EnvelopeRecipientTabs tabs?;
    # When **true,** specifies that the signer can perform the signing ceremony offline
    string canSignOffline?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    # The notary type. This property is read-only. Valid values:
    # 
    # - `inperson`
    # - `remote`
    string notaryType?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The recipient's email address. Notification of the document to sign is sent to this email address.
    # 
    # Maximum length: 100 characters
    string email?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    # The reason why the item was created
    string creationReason?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    # An array of strings that correspond to the `recipientId` of each signer in the notary group. This property is read-only
    string[] notarySigners?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    DelegationInfo delegatedBy?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    OfflineAttributes offlineAttributes?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account
    string requireUploadSignature?;
    # Optional element. When **true,** the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account
    string agentCanEditEmail?;
    # Reserved for DocuSign
    string bulkRecipientsUri?;
    # Not applicable to Notary tab
    string notaryId?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The user's first name. 
    # Maximum Length: 50 characters
    string firstName?;
    RecipientPhoneNumber phoneNumber?;
    # The full legal name of the recipient. Maximum length: 100 characters.
    # 
    # Note: You must always set a value for this property in requests, even if `firstName` and `lastName` are set
    string name?;
    # Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    # 
    # When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent
    string[] excludedDocuments?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    RecipientProofFile proofFile?;
    RecipientSMSAuthentication smsAuthentication?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    # 
    DelegationInfo[] delegatedTo?;
    PropertyMetadata firstNameMetadata?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    # 
    string emailRecipientPostSigningURL?;
};

# 
public type SocialAuthentication record {
    # Reserved for DocuSign
    string authentication?;
};

# 
public type EnvelopeTemplate record {
    # Not used. Use the
    # [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations)
    # property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead
    string expireDateTime?;
    # The reason the envelope or template was voided.
    # 
    # **Note:** The string is truncated to the first 200 characters
    string voidedReason?;
    # When **true,** [Envelope ID Stamping](https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=tfm1578456367923.html) is enabled.
    # After a document or attachment is stamped with an Envelope ID,
    # the ID is seen by all recipients
    # and becomes a permanent part of the document
    # and cannot be removed
    string envelopeIdStamping?;
    # The URI for retrieving notifications
    string notificationUri?;
    # The UTC DateTime when the item was created
    string createdDateTime?;
    # The date and time the envelope was initially sent
    string initialSentDateTime?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # The user's encrypted password hash
    string password?;
    # May contain an external identifier for the envelope
    string externalEnvelopeId?;
    EnvelopeMetadata envelopeMetadata?;
    # 
    string[] folderIds?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # When **true,** responsive documents are disabled for the envelope
    string disableResponsiveDocument?;
    # When **true,** recipients can sign on a mobile device.
    # 
    # **Note:** Only Admin users can change this setting
    string signerCanSignOnMobile?;
    # When **true,** prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 
    # 
    # Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 
    # 
    # However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope
    string messageLock?;
    # The user's new password
    string newPassword?;
    # Deprecated. This feature has been replaced by signing groups
    string anySigner?;
    #  Used to identify an envelope.
    # 
    #  The ID is a sender-generated value and is valid in the DocuSign system for 7 days.
    #  It is recommended that a transaction ID is used for offline
    #  signing to ensure that an envelope is not sent multiple times.
    #  The `transactionId` property can be used determine an envelope's
    #  status (i.e. was it created or not) in cases where the internet c
    #  onnection was lost before the envelope status was returned
    string transactionId?;
    PowerForm powerForm?;
    # When **true,** indicates that the data collected through form fields on a document has changed
    string hasFormDataChanged?;
    UserInfo sender?;
    EnvelopeRecipients recipients?;
    # The ID of the brand
    string brandId?;
    # When **true,** indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES)
    string is21CFRPart11?;
    # 
    string passwordProtected?;
    # When **true,** indicates that the envelope is a dynamic envelope
    string isDynamicEnvelope?;
    # When **true,** the template has been explicitly included in or excluded from auto-matching. The default is false.
    # This is a read-only property
    string autoMatchSpecifiedByUser?;
    # Indicates the envelope status. Valid values are:
    # 
    # * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
    # * `created`: The envelope is created as a draft. It can be modified and sent later.
    # * `declined`: The envelope has been declined by the recipients.
    # * `delivered`: The envelope has been delivered to the recipients.
    # * `sent`: The envelope will be sent to the recipients after the envelope is created.
    # * `signed`: The envelope has been signed by the recipients.
    # * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope
    string status?;
    # When **true,** indicates the template is shared with the **Everyone** group,
    # which includes all users on the account.
    # 
    # When **false,** the template is shared only with the groups you specify
    string shared?;
    # The URI for retrieving certificate information
    string certificateUri?;
    # When **true,** autonavigation is set for the recipient
    string autoNavigation?;
    # The date and time the envelope or template was voided
    string voidedDateTime?;
    # Reserved for DocuSign
    string deletedDateTime?;
    # 
    string copyRecipientData?;
    # When **true,** indicates that the envelope is a signature-provided envelope
    string isSignatureProviderEnvelope?;
    # The DateTime that the envelope changed status (i.e. was created or sent.)
    string statusDateTime?;
    # Contains a URL for retrieving the attachments that are associated with the envelope
    string attachmentsUri?;
    # When **true,** marks all of the documents in the envelope as authoritative copies.
    # 
    # **Note:** You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false.**
    string authoritativeCopy?;
    # When **true,** the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope
    string brandLock?;
    # 
    string favoritedByMe?;
    # This is the same as the email body. If the sender enters an email blurb, it is included in the email body for all envelope recipients
    string emailBlurb?;
    # When **true,** signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.
    # 
    # **Note:** To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true.**
    # 
    # [docviz]: /docs/esign-rest-api/reference/envelopes/envelopedocumentvisibility/
    string enforceSignerVisibility?;
    EnvelopeLocks lockInformation?;
    # The URI for retrieving custom fields
    string customFieldsUri?;
    # Not used. Use the
    # [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations)
    # property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead
    string expireAfter?;
    # Reserved for DocuSign
    string holder?;
    # 
    string isAceGenTemplate?;
    # A URI containing the user ID
    string uri?;
    # 
    string lastUsed?;
    # The URI for retrieving the envelope or envelopes
    string envelopeUri?;
    # Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`
    string signingLocation?;
    # The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding
    string documentBase64?;
    # The URI for retrieving all of the documents associated with the envelope as a single PDF file
    string documentsCombinedUri?;
    # An array of attachment objects that provide information about the attachments that are associated with the envelope
    Attachment[] envelopeAttachments?;
    # Reserved for DocuSign
    string envelopeLocation?;
    # A list of folder objects
    Folder[] folders?;
    # The date and time that the item was last modified
    string lastModifiedDateTime?;
    # A complex element that contains details about the documents associated with the envelope
    Document[] documents?;
    EmailSettings emailSettings?;
    # When **true,** the recipient can redirect an envelope to a more appropriate recipient
    string allowReassign?;
    # The unique identifier of the template. If this is not provided, DocuSign will generate a value. 
    string templateId?;
    Notification notification?;
    # An array containing information about the documents that are included in the envelope
    EnvelopeDocument[] envelopeDocuments?;
    # When **true,** prevents senders from changing, correcting, or deleting the recipient information for the envelope
    string recipientsLock?;
    # The URI for retrieving the templates
    string templatesUri?;
    # The envelope ID of an envelope that you want to use as
    # the basis for the template. The state of the envelope
    # can be `draft`, `sent`, or `completed`.
    string envelopeId?;
    # Not used. Use the
    # [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations)
    # property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead
    string expireEnabled?;
    # When **true,** the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When **false,** the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 
    # 
    # If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information
    string useDisclosure?;
    Workflow workflow?;
    # The UTC DateTime when the workspace user authorization was created
    string created?;
    # The date that a purge was completed
    string purgeCompletedDate?;
    # The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
    # If this property is not set, each document defaults to the envelope's `authoritativeCopy`
    string authoritativeCopyDefault?;
    # By default, templates that have been used within
    # the last 60 days are included in auto-matching.
    # 
    # By explicitly setting `autoMatch`,
    # you can permanently include or exclude the template
    # in auto matching.
    # 
    # When **true** the template is included in auto-matching
    # regardless of when it was last used.
    # 
    # When **false** the template is never included in auto-matching
    string autoMatch?;
    # The URI for retrieving all of the documents associated with the envelope as separate files
    string documentsUri?;
    # The date that a purge was requested
    string purgeRequestDate?;
    # The ID of the folder
    string folderId?;
    # Reserved for DocuSign
    string accessControlListBase64?;
    # 
    string name?;
    # 
    string folderName?;
    # The UTC date and time that the comment was last updated.
    # 
    # **Note:** This can only be done by the creator
    string lastModified?;
    # When **true,** indicates that a .wav file used for voice authentication is included in the envelope. 
    string hasWavFile?;
    # When **true,** indicates that users have added comments to the envelope
    string hasComments?;
    # When **true,** recipients can view the history of the envelope
    string allowViewHistory?;
    AccountCustomFields customFields?;
    # A sender-defined description of the line item
    string description?;
    # When **true,** the Document Markup feature is enabled.
    # 
    # **Note:**  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting at the account level
    string allowMarkup?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    # Specifies the date and time this item was completed
    string completedDateTime?;
    # The subject line of the email message that is sent to all recipients.
    # 
    # For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](/docs/esign-rest-api/reference/templates/templates/create/#template-email-subject-merge-fields).
    # 
    # **Note:** The subject line is limited to 100 characters, including any merged fields.It is not truncated. It is an error if the text is longer than 100 characters
    string emailSubject?;
    # An array of PowerForm objects
    PowerForm[] powerForms?;
    # The data and time that the status changed
    string statusChangedDateTime?;
    # When **true,** the envelope is queued for
    # processing and the value of the `status` property
    # is set to `Processing`. Additionally, GET status
    # calls return `Processing` until completed.
    # 
    # 
    # **Note:** A `transactionId` is required for this
    # call to work correctly. When the envelope is
    # created, the status is `Processing` and an
    # `envelopeId` is not returned in the response. To
    # get the `envelopeId`, use a GET envelope query by
    # using the
    # [transactionId](/docs/esign-rest-api/reference/envelopes/envelopes/create/) or by checking the
    # Connect notification
    string asynchronous?;
    # Shows the current purge state for the envelope. Valid values:
    # 
    # - `unpurged`: There has been no successful request to purge documents.
    # - `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
    # - `documents_dequeued`: The envelope documents have been taken out of the purge queue.
    # - `documents_purged`: The envelope documents have been successfully purged.
    # - `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
    # - `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.
    # - `documents_and_metadata_and_redact_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged, nor has personal information been redacted.
    # - `documents_and_metadata_and_redact_purged`: The envelope documents and metadata have been successfully purged, and personal information has been redacted.
    # 
    # **Related topics**
    # 
    # - [Purging documents (eSingature Concepts)](/docs/esign-rest-api/esign101/concepts/documents/purging/)
    # - [Purging documents in an envelope (blog post)](https://www.docusign.com/blog/developers/purging-documents-envelope)
    string purgeState?;
    # 
    string burnDefaultTabData?;
    UserInfo owner?;
    # When **true,** the signer is allowed to print the document and sign it on paper
    string enableWetSign?;
    # An integer value specifying the number of document pages in the template. 
    string pageCount?;
    UserInfo lastModifiedBy?;
    # 
    string isDocGenTemplate?;
    # When **true,** users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document, they can add a comment to the document
    string allowComments?;
    EnvelopeCustomMetadata envelopeCustomMetadata?;
    # Reserved for DocuSign
    string location?;
    # Contains a URI for an endpoint that you can use to retrieve the recipients
    string recipientsUri?;
};

# A Commission County tab displays the county of a notary's commission. The tab is populated with the notary's commission information, but the recipient can also edit the value when notarizing. This tab can only be assigned to a remote notary recipient using [DocuSign Notary](/docs/notary-api/)
public type CommissionCounty record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # 
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# 
public type FolderSharedItem record {
    UserInfo owner?;
    # A list of users that share the folder
    UserSharedItem[] sharedUsers?;
    # The URI for the parent folder
    string parentFolderUri?;
    # Indicates how the folder is shared. Valid values are:
    # 
    # - `not_shared`
    # - `shared_to`
    string shared?;
    # A list of groups that share the folder
    MemberGroupSharedItem[] sharedGroups?;
    # The ID of the parent folder
    string parentFolderId?;
    # The name of the folder
    string name?;
    # A URI containing the user ID
    string uri?;
    UserInfo user?;
    # The ID of the folder
    string folderId?;
    ErrorDetails errorDetails?;
};

# Represents the Queries record for the operation: Templates_PostDocumentTemplates
public type TemplatesPostDocumentTemplatesQueries record {
    # If omitted or set to false (the default),
    # envelope recipients _will be removed_
    # if the template being applied
    # includes only  tabs positioned via anchor text for the recipient,
    # and none of the documents include the anchor text. 
    # 
    # When **true,** the recipients _will be preserved_ after the template is applied.
    @http:Query {name: "preserve_template_recipient"}
    string preserveTemplateRecipient?;
};

# Represents the Queries record for the operation: BillingCharges_GetAccountBillingCharges
public type BillingChargesGetAccountBillingChargesQueries record {
    # Specifies which billing charges to return.
    # Valid values are:
    # 
    # * envelopes
    # * seats
    @http:Query {name: "include_charges"}
    string includeCharges?;
};

# This object contains details about a captive (embedded) recipient
public type CaptiveRecipient record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # The username associated with the captive recipient
    string userName?;
    # The email address associated with the captive recipient
    string email?;
    ErrorDetails errorDetails?;
};

# 
public type MatchBox record {
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    # Specifies the page number on which the tab is located.
    # Must be 1 for supplemental documents
    string pageNumber?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
};

# 
public type AccountPasswordStrengthType record {
    # An array of option strings supported by this setting
    AccountPasswordStrengthTypeOption[] options?;
};

# Represents the Queries record for the operation: User_PutUser
public type UserPutUserQueries record {
    @http:Query {name: "allow_all_languages"}
    string allowAllLanguages?;
};

# 
public type TabGroup record {
    # The unique identifier for the tab
    string tabId?;
    # Specifies how `maximumAllowed` and `minimumRequired`
    # are interpreted when selecting tabs in a `tabGroup`.
    # 
    # Possible values are:
    # 
    # - `SelectAtLeast`
    # - `SelectAtMost`
    # - `SelectExactly`
    # - `SelectARange`
    string groupRule?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    PropertyMetadata groupLabelMetadata?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    # The maximum number of tabs within the `tabGroup` that should be checked, populated, or signed. This property is used for validation
    string maximumAllowed?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    PropertyMetadata maximumAllowedMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata tabScopeMetadata?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    PropertyMetadata minimumRequiredMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # The minimum number of of tabs within the `tabGroup` that should be checked, populated, or signed. This property is used for validation
    string minimumRequired?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab group will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    # A unique identifier for a tab group. To assign a tab to the `tabGroup`, you assign the `TabGroupLabel` to the `tab.TabGroupLabels` array
    string groupLabel?;
    PropertyMetadata validationMessageMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata groupRuleMetadata?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
    # The scope of the tab group. Possible values are:
    # 
    # - `document`
    # - `envelope` (default)
    string tabScope?;
};

# 
public type EnvelopeAttachmentsRequest record {
    # An object that contains information about the attachment
    Attachment[] attachments?;
};

# Information about the result of an event
public type EventResult record {
    # Failure status code, if the event failed
    string vendorFailureStatusCode?;
    # Date/time of the event
    string eventTimestamp?;
    # Reason for failure, if the event failed
    string failureDescription?;
    # Event status
    string status?;
};

# A complex element that specifies the expiration settings for the envelope. When an envelope expires, it is voided and no longer available for signing. **Note:** there is a short delay between when the envelope expires and when it is voided
public type Expirations record {
    # An integer that specifying the number of days before the envelope expires that an expiration warning email is sent to the recipient. When 0 (zero), no warning email is sent
    string expireWarn?;
    # An integer that sets the number of days the envelope is active. For this value to be used, `expireEnabled` must be explicitly set to **true.**
    string expireAfter?;
    # When **true,** the envelope expires in the number of days set by `expireAfter`. When **false** or not set, the envelope expires in the number of days specified by the [default expiration account setting](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=rra1583277381176.html)
    string expireEnabled?;
};

# This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only
public type FeatureSet record {
    # Reserved for DocuSign
    CurrencyFeatureSetPrice[] currencyFeatureSetPrices?;
    # Reserved for DocuSign
    string seatFee?;
    # Reserved for DocuSign
    string featureSetId?;
    # Reserved for DocuSign
    string is21CFRPart11?;
    # When **true,** the feature set is actively enabled as part of the plan
    string isEnabled?;
    # Reserved for DocuSign
    string name?;
    # Reserved for DocuSign
    string envelopeFee?;
    # Reserved for DocuSign
    string fixedFee?;
    # Reserved for DocuSign
    string isActive?;
};

# Represents the Queries record for the operation: UserSignatures_GetUserSignatureImage
public type UserSignaturesGetUserSignatureImageQueries record {
    # When **true,** the chrome (or frame containing the added line and identifier) is included with the signature image
    @http:Query {name: "include_chrome"}
    string includeChrome?;
};

# Represents the Queries record for the operation: UserAuthorizations_GetPrincipalUserAuthorizations
public type UserAuthorizationsGetPrincipalUserAuthorizationsQueries record {
    # The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image
    @http:Query {name: "start_position"}
    string startPosition?;
    # Filters returned user records by full email address or a substring of email address
    @http:Query {name: "email_substring"}
    string emailSubstring?;
    # When **true,** return only active authorizations. The default value is **true.**
    @http:Query {name: "active_only"}
    string activeOnly?;
    # Filters results by authorization permission. Valid values:
    # * `Send`
    # * `Manage`
    # * `Sign`
    string permissions?;
    # The maximum number of results to return
    string count?;
    # When **true,** returns active and scheduled authorizations of closed users. The default value is **true.** This value is only applied when `active_only` is **false.**
    @http:Query {name: "include_closed_users"}
    string includeClosedUsers?;
    # Filters results based on a full or partial user name.
    # 
    # **Note:** When you enter a partial user name, you do not use a wildcard character
    @http:Query {name: "user_name_substring"}
    string userNameSubstring?;
};

# A rule that defines a set of recipients and the conditions under which they will be used for the envelope
public type ConditionalRecipientRule record {
    # The ID of the recipient to whom the condition will be applied. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    RecipientGroup recipientGroup?;
    # An array of conditions that define when the recipients will be used
    ConditionalRecipientRuleCondition[] conditions?;
    # An integer that specifies the order in which rules are processed.
    # Lower values are processed before higher values
    string 'order?;
};

# Represents the Queries record for the operation: Templates_PostEnvelopeTemplates
public type TemplatesPostEnvelopeTemplatesQueries record {
    # If omitted or set to false (the default),
    # envelope recipients _will be removed_
    # if the template being applied
    # includes only  tabs positioned via anchor text for the recipient,
    # and none of the documents include the anchor text. 
    # 
    # When **true,** the recipients _will be preserved_ after the template is applied.
    @http:Query {name: "preserve_template_recipient"}
    string preserveTemplateRecipient?;
};

# Information about a link that a brand uses
public type BrandLink record {
    # The text used for the link
    string linkText?;
    # The type of link. Valid values include:
    # 
    # - `aboutDocusign`
    # - `closeButton`
    string linkType?;
    # When **true,** the link displays to the recipient
    string showLink?;
    # The URL or mailto address of the link
    string urlOrMailTo?;
};

# A tab that allows the recipient to enter an email address.
# This is a one-line field that checks that a valid email
# address is entered. It uses the same parameters as a Text
# tab, with the validation message and pattern set for email
# information.
# 
# When getting information that includes
# this tab type, the original value of the tab when the
# associated envelope was sent is included in the response
public type Email record {
    # The unique identifier for the tab
    string tabId?;
    # A regular expression used to validate input for the tab
    string validationPattern?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # When **true,** this tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located.
    # For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata validationPatternMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata validationMessageMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# 
public type DocumentFieldsInformation record {
    # The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements: 
    # 
    # * `name`: A string that can be a maximum of 50 characters. 
    # * `value`: A string that can be a maximum of 200 characters.
    # 
    # If you are using XML, the name/value pair is contained in a `nameValue` element. 
    NameValue[] documentFields?;
};

# This object contains details about the envelope transfer rule that you want to create
public type EnvelopeTransferRuleRequest record {
    UserInformation toUser?;
    # When **true,** the original owner is added as a carbon copy recipient after envelope transfer. The default value is **false.**
    string carbonCopyOriginalOwner?;
    UserInformation modifiedUser?;
    # Information about the group that triggers the transfer
    Group[] fromGroups?;
    # The ID of the envelope transfer rule. The system generates this ID when the rule is first created
    string envelopeTransferRuleId?;
    Folder toFolder?;
    # The UTC DateTime when the envelope transfer rule was last modified. This property is read-only
    string modifiedDate?;
    # The type of envelope event that triggers the transfer. Valid values are:
    # 
    # - `sent`
    # - `before sent` 
    # - `completed`
    string eventType?;
    # When **true,** the envelope transfer rule is active
    string enabled?;
    # Information about the user who triggers the transfer
    UserInformation[] fromUsers?;
};

# Contains information about an attachment
public type Attachment record {
    # Valid values are `sender` and `senderAndAllRecipients`
    string accessControl?;
    # A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size
    string data?;
    # Specifies the type of the attachment for the recipient
    string attachmentType?;
    # The name of the attachment
    string name?;
    # The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads
    string remoteUrl?;
    # The unique identifier for the attachment
    string attachmentId?;
    # A label for the attachment. Potential values include: 
    # 
    # - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms) provide a step-by-step, mobile-ready experience to help signers easily complete long or complex forms.
    # - `eventNotifications`: A list of envelope-level event statuses that trigger Connect to send updates to the endpoint specified in the `url` property. 
    string label?;
};

# 
public type Ssn4InformationInput record {
    # The last four digits of the recipient's Social Security Number (SSN)
    string ssn4?;
    # A Boolean value that specifies whether the information must be returned in the response
    string receiveInResponse?;
    # Specifies the display level for the recipient. Valid values are:
    # * `ReadOnly`
    # * `Editable`
    # * `DoNotDisplay`
    string displayLevelCode?;
};

# Prefill tabs are tabs
# that the sender can fill in
# before the envelope is sent.
# They are sometimes called
# sender tags or pre-fill fields.
# 
# Only the following tab types can be
# prefill tabs:
# 
# - text
# - check boxes
# - radio buttons
# 
# 
# 
# [Pre-Fill Your Own Document Fields][app]
# describes how prefill tabs
# work in the web application.
# 
# 
# [Customize your envelopes with pre-fill fields][catblog]
# shows how to use prefill tabs
# in your application using the eSignature
# SDKs.
# 
# [app]:      https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=nwo1611173513994.html
# [catblog]:  https://www.docusign.com/blog/developers/common-api-tasks-customize-your-envelopes-pre-fill-fields
public type PrefillTabs record {
    # An array of `tabGroup` items.
    # 
    # To associate a tab with a tab group, add the tab group's `groupLabel` to the tab's `tabGroupLabels` array
    TabGroup[] tabGroups?;
    # A list of [Radio Group tabs][radioGroup].
    # 
    # A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
    # buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
    # 
    # 
    # [radioGroup]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    RadioGroup[] radioGroupTabs?;
    # A list of
    # [SSN tabs][ssn].
    # 
    # An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
    # dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
    # 
    # 
    # [ssn]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Ssn[] ssnTabs?;
    # A list of
    # Text tabs.
    # 
    # A text tab enables the recipient to enter free text. This value can be set.
    # 
    # Find descriptions of all tab types in
    # the [EnvelopeRecipientTabs Resource][ert].
    # 
    # [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Text[] textTabs?;
    # A list of
    # [Date tabs][date].
    # 
    # A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but several other date formats are also accepted. The system retains the format that the recipient enters.
    # 
    # **Note:** If you need to enforce a specific date format, DocuSign recommends that you use a Text tab with a validation pattern and validation message.
    # 
    # 
    # [date]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Date[] dateTabs?;
    # A list of
    # [Checkbox tabs][checkbox].
    # 
    # 
    # A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
    # 
    # 
    # [checkbox]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Checkbox[] checkboxTabs?;
    # A list of
    # [Email tabs][email].
    # 
    # An Email tab enables the recipient to enter an email address.
    # This is a one-line field that checks that a valid email
    # address is entered. It uses the same parameters as a Text
    # tab, with the validation message and pattern set for email
    # information. This value can be set.
    # 
    # When getting information that includes
    # this tab type, the original value of the tab when the
    # associated envelope was sent is included in the response.
    # 
    # [email]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Email[] emailTabs?;
    # A list of Number tabs.
    # 
    # Number tabs validate that the entered value is a number.
    # They do not support advanced validation or display options.
    # 
    # To learn more about the different forms of number tabs,
    # see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide.
    # For specific information about number tabs
    # see [Features of numberTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numbertabs).
    # 
    # [number]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Number[] numberTabs?;
    # 
    SenderCompany[] senderCompanyTabs?;
    # A list of
    # [Zip tabs][zip].
    # 
    # A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
    # 
    # 
    # [zip]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Zip[] zipTabs?;
    # 
    SenderName[] senderNameTabs?;
};

# A complex element that specifies the delayed routing settings for the workflow step
public type DelayedRouting record {
    # User-specified rules indicating how and when the envelope should sent for the workflow step and its associated recipients. Only one rule may be specified
    EnvelopeDelayRule[] rules?;
    # The ISO 8601 timestamp of when the envelope is scheduled to be sent to the recipients associated with the workflow step. This property is `null` if the workflow step has not been initiated.
    # 
    # This property is read-only
    string resumeDate?;
    # Status of the delayed routing step. Valid values:
    # 
    # * `pending`: The workflow step has not been reached and the delay has not been initiated.
    # * `started`: The workflow step has begun and the delay is in progress. The envelope has not yet been sent to the workflow step's recipients.
    # * `completed`: The delay has elapsed and the envelope has been sent to the workflow step's recipients.
    # 
    # This property is read-only
    string status?;
};

# A tab that allows the recipient to select a yes/no (on/off) option
public type Checkbox record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-7, -6)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # This property does not apply to `checkbox` tabs.
    # 
    # To require users to check
    # at least one, or at most some number
    # of checkboxes,
    # associate the checkbox tabs
    # with a [`tabGroup`][tabGroup].
    # Then set the following `tabGroup` properties:
    # 
    # - [`maximumAllowed`][maximumAllowed]
    # - [`minimumRequired`][minimumRequired]
    # - [`groupRule`][groupRule] specifies how the other two properties are interpreted.
    # 
    # You can find an example
    # at [Stack Overflow][so].
    # 
    # [so]:               https://stackoverflow.com/questions/58209376/checkbox-validation-using-docusign-rest-api/58210277#58210277
    # [tabGroup]:         /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#definition__enveloperecipienttabs_tabgroups
    # [groupRule]:        /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#definition__enveloperecipienttabs_tabgroups_grouprule
    # [maximumAllowed]:   /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#definition__enveloperecipienttabs_tabgroups_maximumallowed
    # [minimumRequired]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#definition__enveloperecipienttabs_tabgroups_minimumrequired
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    PropertyMetadata selectedOriginalMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-7, -6)
    string xPosition?;
    # When **true,** this tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    PropertyMetadata selectedMetadata?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located.
    # For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** the checkbox is selected
    string selected?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign-generated custom tab ID for the custom tab to apply. This property can only be used when adding new tabs for a recipient. When used, the new tab inherits all custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    # 
    string selectedOriginal?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# 
public type FavoriteTemplatesContentItem record {
    # The ID of the template
    string templateId?;
    ErrorDetails errorDetails?;
    # Time at which the template was marked as favorite
    string favoritedDate?;
};

# Represents the Queries record for the operation: Pages_GetPageImages
public type PagesGetPageImagesQueries record {
    # Sets the maximum width of the returned images in pixels
    @http:Query {name: "max_width"}
    string maxWidth?;
    # The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image
    @http:Query {name: "start_position"}
    string startPosition?;
    # The maximum number of results to return
    string count?;
    # When **true,** using cache is disabled and image information is retrieved from a database. **True** is the default value. 
    string nocache?;
    # When **true,** changes display in the user interface
    @http:Query {name: "show_changes"}
    string showChanges?;
    # Sets the maximum height of the returned images in pixels
    @http:Query {name: "max_height"}
    string maxHeight?;
    # The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94
    string dpi?;
};

# This tab offers a list of options to choose from.
# The `listItems`
# property contains a list of
# [`listItem`](/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/)
# objects to specify the selectable options
public type List record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    # The list of values that can be selected by senders. The list values are separated by semi-colons. Example: [one;two;three;four]
    # 
    # Maximum Length of listItems:  2048 characters.
    # Maximum Length of items in the list: 100 characters. 
    ListItem[] listItems?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata listSelectedValueMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The value to use when the item is selected
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    # The value in the list that is selected by default
    string listSelectedValue?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# An `accountCustomField` is an envelope custom field that you set at the account level.
# Applying custom fields enables account administrators to group and manage envelopes
public type AccountCustomFields record {
    # An array of text custom fields
    TextCustomField[] textCustomFields?;
    # An array of list custom fields
    ListCustomField[] listCustomFields?;
};

# 
public type TemplateTabs record {
    # A list of
    # [First Name tabs][firstName].
    # 
    # A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.
    # 
    # 
    # [firstName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#parameters_firstname
    FirstName[] firstNameTabs?;
    # A list of numerical tabs.
    # 
    # Numerical  tabs provide robust display and validation features, including formatting for different regions and currencies, and minimum and maximum value validation.                                                                                                                                                                                                                                                                                                                                                                                                                                                             
    # 
    # To learn more about the different forms of number tabs,
    # see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide.
    # For specific information about numerical tabs
    # see [Features of numericalTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numericaltabs)
    Numerical[] numericalTabs?;
    # A list of
    # [Initial Here tabs][initialHere].
    # 
    # This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
    # 
    # [initialHere]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    InitialHere[] initialHereTabs?;
    # An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set
    CommentThread[] commentThreadTabs?;
    # A list of
    # [Title tabs][title].
    # 
    # A Title tab displays the recipient's title.  This value can't be set.
    # 
    # 
    # [title]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Title[] titleTabs?;
    # A list of
    # [View tabs][view].
    # 
    # A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
    # 
    # [view]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    View[] viewTabs?;
    # A list of
    # [Commission County tabs][cc].
    # 
    # 
    # A Commission County tab displays the county of a notary's commission. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionCounty[] commissionCountyTabs?;
    # A list of
    # [Commission State tabs][cc].
    # 
    # 
    # A Commission County tab displays the state in which a notary's commission was granted. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionState[] commissionStateTabs?;
    # An array of List tabs.
    # 
    # A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
    # 
    # Find descriptions of all tab types in
    # the [EnvelopeRecipientTabs Resource][ert].
    # 
    # [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    List[] listTabs?;
    # A list of
    # [Zip tabs][zip].
    # 
    # A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
    # 
    # 
    # [zip]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Zip[] zipTabs?;
    PrefillTabs prefillTabs?;
    # A list of
    # [Decline tabs][decline].
    # 
    # A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.
    # 
    # 
    # [decline]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Decline[] declineTabs?;
    # A list of
    # [Envelope ID tabs][envelopeId].
    # 
    # An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
    # 
    # 
    # [envelopeId]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#response201_envelopeid
    EnvelopeId[] envelopeIdTabs?;
    # A list of
    # [Approve tabs][approve].
    # 
    # An Approve tab enables
    # the recipient to approve documents without
    # placing a signature or initials on the document. If the
    # recipient clicks the tab during the signing process, the
    # recipient is considered to have signed the document. No
    # information is shown on the document of the approval, but it
    # is recorded as a signature in the envelope history.
    # The value of an approve tab can't be set.
    # 
    # [approve]:          /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Approve[] approveTabs?;
    # A list of
    # [Signer Attachment tabs][signerAttachment].
    # 
    # This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
    # 
    # 
    # [signerAttachment]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    SignerAttachment[] signerAttachmentTabs?;
    # An array of `tabGroup` items.
    # 
    # To associate a tab with a tab group, add the tab group's `groupLabel` to the tab's `tabGroupLabels` array
    TabGroup[] tabGroups?;
    # A list of
    # [Sign Here tabs][signHere].
    # 
    # This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
    # 
    # [signHere]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    SignHere[] signHereTabs?;
    # A list of Draw Tabs.
    # 
    # A Draw Tab allows the recipient to add a free-form drawing to the document
    Draw[] drawTabs?;
    # A list of
    # [Email Address tabs][emailAddress].
    # 
    # An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
    # 
    # 
    # [emailAddress]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    EmailAddress[] emailAddressTabs?;
    # A list of
    # [Date tabs][date].
    # 
    # A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but several other date formats are also accepted. The system retains the format that the recipient enters.
    # 
    # **Note:** If you need to enforce a specific date format, DocuSign recommends that you use a Text tab with a validation pattern and validation message.
    # 
    # 
    # [date]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Date[] dateTabs?;
    # A list of [Formula tabs][formulaTab].
    # 
    # The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.
    # 
    # The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
    # 
    # If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].
    # 
    # [calculatedfields]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html
    # [paymentguide]:     https://support.docusign.com/s/document-item?bundleId=juu1573854950452&topicId=fyw1573854935374.html
    # [formulaTab]:       /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    FormulaTab[] formulaTabs?;
    # A list of
    # [Checkbox tabs][checkbox].
    # 
    # 
    # A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
    # 
    # 
    # [checkbox]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Checkbox[] checkboxTabs?;
    # A list of
    # [Email tabs][email].
    # 
    # An Email tab enables the recipient to enter an email address.
    # This is a one-line field that checks that a valid email
    # address is entered. It uses the same parameters as a Text
    # tab, with the validation message and pattern set for email
    # information. This value can be set.
    # 
    # When getting information that includes
    # this tab type, the original value of the tab when the
    # associated envelope was sent is included in the response.
    # 
    # [email]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Email[] emailTabs?;
    # A list of
    # [Commission Number tabs][tabref].
    # 
    # 
    # A Commission Number tab displays a notary's commission number. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [tabref]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionNumber[] commissionNumberTabs?;
    # A list of
    # [Commission Expiration tabs][tabref].
    # 
    # 
    # A Commission Expiration tab displays the expiration date of a notary's commission. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [tabref]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionExpiration[] commissionExpirationTabs?;
    # A list of
    # [Phone Number tabs][cc].
    # 
    # 
    # A Phone Number tab enables a recipient to enter a phone number.
    # 
    # **Note:** This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    PhoneNumber[] phoneNumberTabs?;
    # A list of  [Notarize tabs][notarize].
    # 
    # A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
    # 
    # **Note:** Only one notarize tab can appear on a page.
    # 
    # [notarize]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Notarize[] notarizeTabs?;
    # A list of [Radio Group tabs][radioGroup].
    # 
    # A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
    # buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
    # 
    # 
    # [radioGroup]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    RadioGroup[] radioGroupTabs?;
    # A list of
    # [Date Signed tabs][dateSigned].
    # 
    # 
    # A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
    # 
    # [dateSigned]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    DateSigned[] dateSignedTabs?;
    # A list of
    # Text tabs.
    # 
    # A text tab enables the recipient to enter free text. This value can be set.
    # 
    # Find descriptions of all tab types in
    # the [EnvelopeRecipientTabs Resource][ert].
    # 
    # [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Text[] textTabs?;
    # A list of
    # [Company tabs][company].
    # 
    # A Company tab displays a field for the name of the recipient's company. This value can't be set.
    # 
    # [company]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#parameters_company
    Company[] companyTabs?;
    # A list of
    # [Note tabs][note].
    # 
    # A Note tab displays additional information to the recipient in the form of a note. This value can be set.
    # 
    # [note]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Note[] noteTabs?;
    # A list of
    # [Full Name tabs][fullName].
    # 
    # A Full Name tab displays the recipient's full name. This value can't be set.
    # 
    # 
    # [fullName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    FullName[] fullNameTabs?;
    # A list of
    # [SSN tabs][ssn].
    # 
    # An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
    # dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
    # 
    # 
    # [ssn]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Ssn[] ssnTabs?;
    # A list of Notary Seal tabs.
    # 
    # A Notary Seal tab enables the recipient to notarize a document. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
    # 
    # [notary]: /docs/notary-api/
    NotarySeal[] notarySealTabs?;
    # A list of
    # [Last Name tabs][lastName].
    # 
    # A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.
    # 
    # 
    # [lastName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    LastName[] lastNameTabs?;
    # A list of Number tabs.
    # 
    # Number tabs validate that the entered value is a number.
    # They do not support advanced validation or display options.
    # 
    # To learn more about the different forms of number tabs,
    # see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide.
    # For specific information about number tabs
    # see [Features of numberTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numbertabs).
    # 
    # [number]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Number[] numberTabs?;
    # A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections) tabs.
    # 
    # Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
    # 
    # **Note:** Smart Sections are a premium feature. Responsive signing must also be enabled for your account
    SmartSection[] smartSectionTabs?;
    # This type of tab enables the recipient to strike through document text. This value can't be set
    PolyLineOverlay[] polyLineOverlayTabs?;
};

# 
public type SigningGroupInformation record {
    # A collection group objects containing information about the groups
    SigningGroup[] groups?;
};

# 
public type AccountSignatureDefinition record {
    # The realtor's last name
    string nrdsLastName?;
    # The National Association of Realtors (NAR) membership ID for a user who is a realtor
    string nrdsId?;
    # The phonetic spelling of the `signatureName`
    string phoneticName?;
    # 
    SignatureGroupDef[] signatureGroups?;
    # Specifies the type of signature
    string signatureType?;
    # Optionally specify an external identifier for the user's signature
    string externalID?;
    # Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID
    string signatureId?;
    # The format of a stamp. Valid values are:
    # 
    # - `NameHanko`: The stamp represents only the signer's name.
    # - `NameDateHanko`: The stamp represents the signer's name and the date. 
    string stampFormat?;
    # The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents
    string stampSizeMM?;
    # 
    SignatureUserDef[] signatureUsers?;
    # Boolean that specifies whether the signature is the default signature for the user
    string isDefault?;
    # When **true,** users may not resize the stamp
    string disallowUserResizeStamp?;
    # The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.
    # 
    # - `"1_DocuSign"`
    # - `"2_DocuSign"`
    # - `"3_DocuSign"`
    # - `"4_DocuSign"`
    # - `"5_DocuSign"`
    # - `"6_DocuSign"`
    # - `"7_DocuSign"`
    # - `"8_DocuSign"`
    # - `"Mistral"`
    # - `"Rage Italic"`
    string signatureFont?;
    # Specifies the user's signature name
    string signatureName?;
    DateStampProperties dateStampProperties?;
    # Specificies the type of image. Valid values:
    # 
    # - `stamp_image`
    # - `signature_image`
    # - `initials_image`
    string imageType?;
    # Specifies the user's signature in initials format
    string signatureInitials?;
};

# Represents the Queries record for the operation: Templates_GetTemplate
public type TemplatesGetTemplateQueries record {
    # A comma-separated list
    # of additional template attributes
    # to include in the response.
    # Valid values are:
    # 
    # - `powerforms`: Includes information about PowerForms.
    # - `tabs`: Includes information about tabs.
    # - `documents`: Includes information about documents.
    # - `favorite_template_status`: : Includes the template `favoritedByMe` property in the response. **Note:** You can mark a template as a favorite only in eSignature v2.1
    string include?;
};

# Represents the Queries record for the operation: UserSignatures_GetUserSignatures
public type UserSignaturesGetUserSignaturesQueries record {
    # The type of stamps to return. Valid values are:
    # 
    # - `signature`: Returns information about signature images only. This is the default value.
    # - `stamp`: Returns information about eHanko and custom stamps only.
    # - null
    @http:Query {name: "stamp_type"}
    string stampType?;
};

# Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope
public type Brand record {
    # An array of two-letter codes for the languages that you want to use with the brand. The supported languages are:
    # 
    # - Arabic (`ar`)
    # - Armenian (`hy`)
    # - Bahasa Indonesia (`id`)
    # - Bahasa Malay (`ms`)
    # - Bulgarian (`bg`)
    # - Chinese Simplified (`zh_CN`)
    # - Chinese Traditional (`zh_TW`)
    # - Croatian (`hr`)
    # - Czech (`cs`)
    # - Danish (`da`)
    # - Dutch (`nl`)
    # - English UK (`en_GB`)
    # - English US (`en`)
    # - Estonian (`et`)
    # - Farsi (`fa`)
    # - Finnish (`fi`)
    # - French (`fr`)
    # - French Canada (`fr_CA`)
    # - German (`de`)
    # - Greek (`el`)
    # - Hebrew (`he`)
    # - Hindi (`hi`)
    # - Hungarian (`hu`)
    # - Italian (`it`)
    # - Japanese (`ja`)
    # - Korean (`ko`)
    # - Latvian (`lv`)
    # - Lithuanian (`lt`)
    # - Norwegian (`no`)
    # - Polish (`pl`)
    # - Portuguese (`pt`)
    # - Portuguese Brasil (`pt_BR`)
    # - Romanian (`ro`)
    # - Russian (`ru`)
    # - Serbian (`sr`)
    # - Slovak (`sk`)
    # - Slovenian (`sl`)
    # - Spanish (`es`)
    # - Spanish Latin America (`es_MX`)
    # - Swedish (`sv`)
    # - Thai (`th`)
    # - Turkish (`tr`)
    # - Ukranian (`uk`)
    # - Vietnamese (`vi`)
    string[] brandLanguages?;
    # The name of the brand
    string brandName?;
    # When **true,** the sending brand is the default brand for sending new envelopes
    boolean isSendingDefault?;
    # 
    string organizationBrandLogo?;
    # An array of name/value pairs specifying the pages to which the user is redirected after the following events occur:
    # 
    # - Signing Completed
    # - Viewed Exit
    # - Finish Later
    # - Decline
    # - Session Timeout
    # - Authentication Failure
    # 
    # If you do not specify landing pages, the DocuSign default pages are used
    NameValue[] landingPages?;
    BrandResourceUrls resources?;
    BrandLogos logos?;
    # An array of name-value pairs specifying the colors that the brand uses for the following elements:
    # 
    # - Button background
    # - Button text
    # - Header background
    # - Header text
    NameValue[] colors?;
    # When **true,** the siging brand is the default brand for the signing experience
    boolean isSigningDefault?;
    # The two-letter code for the language that you want to use as the brand default. The supported languages are:
    # 
    # - Arabic (`ar`)
    # - Armenian (`hy`)
    # - Bahasa Indonesia (`id`)
    # - Bahasa Malay (`ms`)
    # - Bulgarian (`bg`)
    # - Chinese Simplified (`zh_CN`)
    # - Chinese Traditional (`zh_TW`)
    # - Croatian (`hr`)
    # - Czech (`cs`)
    # - Danish (`da`)
    # - Dutch (`nl`)
    # - English UK (`en_GB`)
    # - English US (`en`)
    # - Estonian (`et`)
    # - Farsi (`fa`)
    # - Finnish (`fi`)
    # - French (`fr`)
    # - French Canada (`fr_CA`)
    # - German (`de`)
    # - Greek (`el`)
    # - Hebrew (`he`)
    # - Hindi (`hi`)
    # - Hungarian (`hu`)
    # - Italian (`it`)
    # - Japanese (`ja`)
    # - Korean (`ko`)
    # - Latvian (`lv`)
    # - Lithuanian (`lt`)
    # - Norwegian (`no`)
    # - Polish (`pl`)
    # - Portuguese (`pt`)
    # - Portuguese Brasil (`pt_BR`)
    # - Romanian (`ro`)
    # - Russian (`ru`)
    # - Serbian (`sr`)
    # - Slovak (`sk`)
    # - Slovenian (`sl`)
    # - Spanish (`es`)
    # - Spanish Latin America (`es_MX`)
    # - Swedish (`sv`)
    # - Thai (`th`)
    # - Turkish (`tr`)
    # - Ukranian (`uk`)
    # - Vietnamese (`vi`)
    string defaultBrandLanguage?;
    # The ID used to identify a specific brand in API calls
    string brandId?;
    # Deprecated
    BrandEmailContent[] emailContent?;
    # When **true,** the `brandCompany` property is overriding the name of the company in the account settings
    boolean isOverridingCompanyName?;
    # An array of `brandLink` objects that contain information about the links that the brand uses
    BrandLink[] links?;
    # 
    string isOrganizationBrand?;
    # The name of the company associated with the brand
    string brandCompany?;
    ErrorDetails errorDetails?;
};

# 
public type NotaryContactDetails record {
    # 
    string hasDocusignCertificate?;
    # 
    JurisdictionSummary[] jurisdictions?;
};

# 
public type DocGenFormFieldOption record {
    # A sender-defined description of the line item
    string description?;
    # 
    string label?;
    # Specifies the value of the tab. 
    string value?;
    # When **true,** the radio button is selected
    string selected?;
};

# Represents the Queries record for the operation: WorkspaceFilePages_GetWorkspaceFilePages
public type WorkspaceFilePagesGetWorkspaceFilePagesQueries record {
    # Sets the maximum width of the returned images in pixels
    @http:Query {name: "max_width"}
    string maxWidth?;
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip
    string count?;
    # Sets the maximum height of the returned images in pixels
    @http:Query {name: "max_height"}
    string maxHeight?;
    # The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94
    string dpi?;
};

# This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
# 
# It describes information about the notary host.
# The following information is required
# when using the eNotary in-person signing flow:
# 
# * `name`: Specifies the notary's full legal name.
# * `email`: Specifies the notary's email address.
# * `recipientId`: A unique ID number for the notary signing host
public type NotaryHost record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    PropertyMetadata requireIdLookupMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    # The host recipient ID
    string hostRecipientId?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    IdCheckInformationInput idCheckInformationInput?;
    # The notary's full legal name.
    # 
    # Maximum Length: 100 characters
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    PropertyMetadata routingOrderMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # The recipient's status. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only. 
    string statusCode?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # A note sent to the notary in the signing email.
    # This note is visible only to this notary.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    EnvelopeRecipientTabs tabs?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    PropertyMetadata deliveryMethodMetadata?;
    RecipientSMSAuthentication smsAuthentication?;
    # Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The notary's email address.
    # 
    # Maximum Length: 100 characters
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
};

# When a formula tab
# has a `paymentDetails` property,
# the formula tab
# is a payment item.
# See [Requesting Payments Along with Signatures][paymentguide]
# in the DocuSign Support Center
# to learn more about payments.
# 
# [paymentguide]:     https://support.docusign.com/s/document-item?bundleId=juu1573854950452&topicId=fyw1573854935374.html
public type PaymentDetails record {
    # A sender-defined field that specifies whether custom metadata is required for the transaction. When **true,** custom metadata is required. This property only applies if you are using an Authorize.net payment gateway account
    boolean customMetadataRequired?;
    # Name of the gateway connected to sender's DocuSign account.
    # 
    # Possible values are:
    # 
    # * `Stripe`
    # * `Braintree`
    # * `AuthorizeDotNet`
    # * `CyberSource`
    # * `Zuora`
    # * `Elavon`
    string gatewayName?;
    # A GUID that identifies the payment gateway
    # connected to the sender's DocuSign account.
    # 
    # There is no public API
    # for connecting payment gateway accounts
    # You must connect and manage payment gateway accounts
    # through the DocuSign Admin console
    # and through your chosen payment gateway.
    # 
    # You can get the gateway account ID
    # in the Payments section
    # of the DocuSign Admin console.
    # 
    # 
    # [paymentgateways]:  https://support.docusign.com/s/document-item?bundleId=juu1573854950452&topicId=knc1573854895499.html
    string gatewayAccountId?;
    PropertyMetadata gatewayAccountIdMetadata?;
    # Display name of the gateway connected to sender's DocuSign account.
    # 
    # Possible values are: Stripe, Braintree, Authorize.Net, CyberSource, Zuora, Elavon
    string gatewayDisplayName?;
    # The payment source ID
    string paymentSourceId?;
    # An array of accepted payment methods:
    # 
    # * `CreditCard`
    # * `ApplePay`
    # * `AndroidPay`
    # * `BankAccount`
    # 
    # For example, if you only accept credit cards and ACH transfers, you would set this property to:
    # 
    # `'["BankAccount", "CreditCard"]'`
    # 
    # Do not specify `BankAccount` (ACH) if you are also using in-person signing
    string[] allowedPaymentMethods?;
    # A payment formula can have
    # one or more line items
    # that provide detail about
    # individual items in a payment request.
    # 
    # The list of line items
    # are returned as metadata
    # to the payment gateway
    PaymentLineItem[] lineItems?;
    Money total?;
    # The GUID set by the payment gateway (such as Stripe) that identifies a transaction. The `chargeId` is created when authorizing a payment and must be referenced when completing a payment
    string chargeId?;
    # 
    string subGatewayName?;
    # The customer ID
    string customerId?;
    # This is a sender-defined field that passes any extra metadata about the payment that will show up in the Authorize.net transaction under **Description** in the merchant gateway portal. The custom metadata will be recorded in downloaded Authorize.net reports. 
    # 
    # The following example shows what the **Description** field of the transaction will look like: 
    # 
    # `<envelopeID>, <customMetadata>`
    string customMetadata?;
    # This property specifies how the signer's collected payment details will be used.
    # 
    # Valid values:
    # 
    # - `authorize`: The payment details will be used to collect payment. This is the default value.
    # - `save`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway.
    # - `save_and_authorize`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway and will also be used to collect payment
    string paymentOption?;
    PropertyMetadata currencyCodeMetadata?;
    PaymentSignerValues signerValues?;
    # Specifies the three-letter
    # [ISO 4217][ISO 4217] currency code for the payment.
    # 
    # Supported currencies are:
    # 
    # * AUD: Australian dollar
    # * CAD: Canadian dollar
    # * EUR: Euro
    # * GBP: Great Britain pound
    # * USD: United States dollar
    # 
    # Specifying any other ISO 4217 code for payments is an error.
    # 
    # [ISO 4217]:          https://en.wikipedia.org/wiki/ISO_4217
    string currencyCode?;
    # This read-only property describes the status of a payment.
    # 
    # * `new`<br>
    #   This is a new payment request.
    #   The envelope has been created,
    #   but no payment authorizations have been made.
    # 
    # * `auth_complete`<br>
    #   A recipient has entered their credit card information,
    #   but the envelope has not been completed.
    #   The card has not been charged.
    # 
    # * `payment_complete`<br>
    #   The recipient's card has been charged.
    # 
    # * `payment_capture_failed`<br>
    #   Final charge failed.
    #   This can happen when too much time
    #   passes between authorizing the payment
    #   and completing the document.
    # 
    # * `future_payment_saved` <br>
    # The recipient's payment method has been saved to the sender's payment gateway
    string status?;
};

# The `connectCustomConfiguration` object describes a Connect configuration for your account
public type ConnectCustomConfiguration record {
    # The web address of the listener or retrieving service endpoint. It must be an HTTPS URL
    string urlToPublishTo?;
    # 
    string senderOverride?;
    # An array of Salesforce objects
    ConnectSalesforceObject[] sfObjects?;
    # When **true,** the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect. The default value is **false.**
    # 
    # **Note:** If this property is **false,** make sure you set the `userIds` property to a non-empty array of user IDs
    string allUsers?;
    # The version of the Salesforce API that you are using
    string salesforceApiVersion?;
    # This flag allows you to toggle between including and excluding specified users from the configuration. When **false,** the users corresponding to the IDs in `userIds` will be included in the configuration. Conversely, when **true,** the users will be excluded from the configuration. The default value is **false.**
    string allUsersExcept?;
    # When **true,** the notifications are sent to your endpoint as SOAP requests. 
    string useSoapInterface?;
    # 
    string salesforceCallBackUrl?;
    # 
    string salesforceAuthcode?;
    # When **true,** DocuSign can use documents in your Salesforce account for sending and signing
    string salesforceDocumentsAsContentFiles?;
    # The namespace of the SOAP interface.
    # 
    # **Note:** If `useSoapInterface` is set to **true,** you must set this value
    string soapNamespace?;
    # The password for the Connect configuration.
    # 
    # This property is not used for the `createHistoricalEnvelopePublishTransaction` endpoint
    string password?;
    # When **true,** Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol. 
    string signMessageWithX509Certificate?;
    # The delivery mode of the configuration. Valid values:
    # 
    # * `SIM`
    # * `Aggregate`
    string deliveryMode?;
    # 
    string[] groupIds?;
    # A comma-separated list of user IDs. This sets the users associated with the tracked envelope and recipient events. When a tracked event occurs for a set user, the a notification message is sent to your Connect listener.
    # 
    # By default, the users will be included in the configuration. If you want to exclude the users, set the `allUsersExcept` property to **true.**
    # 
    # **Note:** If `allUsers` is set to `false`, then you must provide a list of user IDs
    string[] userIds?;
    # When **true,** Connect logging is turned on. DocuSign recommends that you enable this functionality to help troubleshoot any issues. 
    # 
    # You can have a maximum of 100 active logs in your account. You can view the entries in active logs in the **Logs** tab in the Connect console
    string enableLog?;
    # The ID of an external folder
    string externalFolderId?;
    # When **true,** the Connect Service includes the Certificate of Completion with completed envelopes. 
    string includeCertificateOfCompletion?;
    # When **true,** if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope. 
    string includeEnvelopeVoidReason?;
    # The type of the configuration. Valid values:
    # 
    # * `custom`: Creates an account-level configuration
    # * `customrecipient`: Creates a Recipient Connect configuration
    # * `salesforce`
    # * `eOriginal`
    # 
    # This property is required
    string configurationType?;
    # The DocuSign-generated ID for the Connect configuration.
    # 
    # This property is read-only
    string connectId?;
    # A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property.
    # 
    # When using any of [the legacy event message formats](/platform/webhooks/connect/legacy-message-formats/), you must include either the `envelopeEvents` property or the `recipientEvents` property. If you are instead using the [JSON SIM event model](]/platform/webhooks/connect/improved-json-sim-event-model/), use the `events` property.
    # 
    # The [possible event statuses](/platform/webhooks/connect/event-triggers/) are:
    # 
    # * `Sent`
    # * `Delivered`
    # * `Completed`
    # * `Declined`
    # * `Voided`
    # 
    # **Note:** These values are case-sensitive
    string[] envelopeEvents?;
    # A comma-separated list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `urlToPublishTo` property.
    # 
    # Set this property when you are using the [JSON SIM event model](/platform/webhooks/connect/improved-json-sim-event-model/). If you are instead using any of [the legacy event message formats](/platform/webhooks/connect/legacy-message-formats/), set either the `envelopeEvents` property or the `recipientEvents` property.
    # 
    # The [possible event statuses](/platform/webhooks/connect/improved-json-sim-event-model/#eventreference) are:
    # 
    # * `envelope-created`
    # * `envelope-sent`
    # * `envelope-resent`
    # * `envelope-delivered`
    # * `envelope-completed`
    # * `envelope-declined`
    # * `envelope-voided`
    # * `recipient-authenticationfailed`
    # * `recipient-autoresponded`
    # * `recipient-declined`
    # * `recipient-delivered`
    # * `recipient-completed`
    # * `recipient-sent`
    # * `recipient-resent`
    # * `template-created`
    # * `template-modified`
    # * `template-deleted`
    # * `envelope-corrected`
    # * `envelope-purge`
    # * `envelope-deleted`
    # * `envelope-discard`
    # * `recipient-reassign`
    # * `recipient-delegate`
    # * `recipient-finish-later`
    # * `click-agreed`
    # * `click-declined`
    string[] events?;
    # This property sets the items that are available for selection when adding or editing Connect objects. 
    string[] senderSelectableItems?;
    # When **true,** [Mutual TLS](/platform/webhooks/mutual-tls/) authentication is enabled
    string requireMutualTls?;
    # When **true,** the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. 
    string includeDocumentFields?;
    # Reserved for DocuSign
    string includeDocuments?;
    # When **true,** Connect will include the sender account as Custom Field in the data
    string includeSenderAccountasCustomField?;
    # The name of the user
    string userName?;
    # 
    string includeHMAC?;
    # When **true,** event delivery acknowledgements are enabled for your Connect configuration.
    # 
    # DocuSign Connect awaits a valid 200 response from your application acknowledging that it received a message. If you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and places it into a failure queue. It is imperative that you acknowledge successful receipt of Connect events as they occur by sending a 200 event back.
    # 
    # #### When **true** and Send Individual Messages (SIM) mode is activated
    # 
    # If the HTTP status response to a notification message is not in the range of 200-299,
    # then the message delivery failed, and the configuration is marked as down.
    # 
    # The message will be queued and retried once per day.
    # While a Connect configuration is marked down, subsequent notifications will not be tried. Instead they will be immediately queued with the reason `Pending`.
    # When a message succeeds, all queued messages for the configuration will be tried immediately, in order.
    # 
    # There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.
    # 
    # #### When **true** and SIM mode is not activated
    # 
    # If the HTTP Status response to a notification message is not in the range of 200-299,  then the message delivery failed, and the message is queued.
    # 
    # The message will be retried after at least a day the next time a subsequent message is successfully sent to this configuration (subscription).  Subsequent notifications will be tried when they occur.
    # There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.
    # 
    # #### When **false**
    # 
    # When `requiresAcknowledgement` is set to **false** and you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and determines that the server is unavailable. It does not retry to send the notification message, and you must handle the failure manually.
    string requiresAcknowledgement?;
    # 
    string disabledBy?;
    # When **true,** DocuSign sends data to the designated Salesforce account through Connect. The default value is **true.**
    string allowSalesforcePublish?;
    ConnectEventData eventData?;
    # The label for an external folder
    string externalFolderLabel?;
    # 
    string integratorManaged?;
    # The name of the Connect configuration.
    # 
    # This property is required
    string name?;
    # When **true,** Connect will include the envelope time zone information
    string includeTimeZoneInformation?;
    # 
    string includeCertSoapHeader?;
    # Set this value to **true** to enable the webhook. The default property is **false.**
    string allowEnvelopePublish?;
    # 
    string includeOAuth?;
    # An array of recipient event statuses that will trigger Connect to send notifications to your webhook listener at the URL endpoint specified in the `url` property. 
    # 
    # When using any of [the legacy event message formats](/platform/webhooks/connect/legacy-message-formats/), you must include either the `envelopeEvents` property or the `recipientEvents` property. If you are instead using the [JSON SIM event model](/platform/webhooks/connect/improved-json-sim-event-model/), use the `events` property.
    # 
    # The [possible event statuses](/platform/webhooks/connect/event-triggers/) are:
    # 
    # * `Sent`
    # * `AutoResponded`
    # * `Delivered`
    # * `Completed`
    # * `Declined`
    # * `AuthenticationFailed`
    # 
    # **Note:** These values are case-sensitive
    string[] recipientEvents?;
};

# A complex element that specifies the notification settings for the envelope
public type EnvelopeNotificationRequest record {
    Expirations expirations?;
    Reminders reminders?;
    # When **true,** the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When **false,** the reminders and expirations settings specified in this request are used. The default value is **false.**
    string useAccountDefaults?;
};

# 
public type SenderName record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # 
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# 
public type DiagnosticsSettingsInformation record {
    # Specifies the maximum number of API requests to log
    string apiRequestLogMaxEntries?;
    #  When **true,** enables API request logging for the user. 
    string apiRequestLogging?;
    # Indicates the remaining number of API requests that can be logged
    string apiRequestLogRemainingEntries?;
};

# 
public type UserInfo record {
    # Status of the user's account. One of:
    # 
    # - `ActivationRequired`
    # - `ActivationSent`
    # - `Active`
    # - `Closed`
    # - `Disabled`
    string userStatus?;
    # The name on the account
    string accountName?;
    # 
    string ipAddress?;
    # The user's membership ID
    string membershipId?;
    # When **true,** indicates that the user is logged in. This is a read-only property
    string loginStatus?;
    # The name of the user
    string userName?;
    # A URI containing the user ID
    string uri?;
    # The ID of the user to access
    string userId?;
    # The account ID associated with the envelope
    string accountId?;
    # This field is no longer supported for most accounts. To create an eSignature user without sending an activation email, use the Admin API by following [these steps](/docs/admin-api/how-to/create-active-user/)
    string sendActivationEmail?;
    # Access code provided to the user to activate the account
    string activationAccessCode?;
    # The type of user, for example `CompanyUser`
    string userType?;
    # The user's email address
    string email?;
    ErrorDetails errorDetails?;
};

# 
public type AuthorizationUser record {
    # The account ID
    string accountId?;
    # The name of the authorization user
    string name?;
    # The ID of the authorization user
    string userId?;
    # The email address of the authorization user
    string email?;
};

# A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document
public type Signer record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # When **true,** this signer is a bulk recipient and the recipient information is contained in a bulk recipient file. 
    # 
    # Note that when this is true the email and name for the recipient becomes bulk@recipient.com and "Bulk Recipient". These fields can not be changed for the bulk recipient. 
    string isBulkRecipient?;
    PropertyMetadata requireIdLookupMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # When **true,** this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient
    string defaultRecipient?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    PropertyMetadata isBulkRecipientMetadata?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    # When **true,** specifies that the recipient creates the tabs
    string recipientSuppliesTabs?;
    # Optional. When **true,** the agent recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account
    string agentCanEditName?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # When **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once)
    string signInEachLocation?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    RecipientSignatureInformation signatureInfo?;
    # The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
    RecipientSignatureProvider[] recipientSignatureProviders?;
    # 
    string notarySignerEmailSent?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # When **true,** the signer must print, sign, and upload or fax the signed documents to DocuSign
    string requireSignOnPaper?;
    # Sets the type of signer certificate required for signing. If left blank, no certificate is required. Only one type of certificate can be set for a signer. Valid values:
    # 
    # * `docusign_express`: Requires a DocuSign Express certificate.
    # * `safe`: Requires a SAFE-BioPharma certificate.
    # * `open_trust`: Requires an OpenTrust certificate. 
    # 
    # **Important:** There are certain rules and restrictions that must be followed when requiring OpenTrust digital signatures. See [ML:OpenTrust Rules and Restrictions] for more information. 
    #  
    string requireSignerCertificate?;
    PropertyMetadata routingOrderMetadata?;
    # Specifies the status of the recipient at the time of the request. This property is read-only. Possible values are:
    # 
    # - `created`: The recipient is in a draft state. This is only associated with draft envelopes (envelopes with a created status).
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing web site. This is not an email delivery of the documents in an envelope.
    # - `signed`; The recipient has completed (performed all required interactions, such as signing or entering data) all required tags in an envelope. This is a temporary state during processing, after which the recipient is automatically moved to completed.
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `faxpending`: The recipient has finished signing and the system is waiting a fax attachment by the recipient before completing their signing step.
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used by the DocuSign webapp (also known as the DocuSign console) to inform senders about the auto-responded email
    string status?;
    # Reserved for DocuSign
    string statusCode?;
    # The recipient's last name
    string lastName?;
    PropertyMetadata signInEachLocationMetadata?;
    # When **true,** autonavigation is set for the recipient
    string autoNavigation?;
    EnvelopeRecipientTabs tabs?;
    # When **true,** specifies that the signer can perform the signing ceremony offline
    string canSignOffline?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The recipient's email address. The system sends notifications about the documents to sign to this address. Maximum length: 100 characters. 
    string email?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    # The reason why the item was created
    string creationReason?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    DelegationInfo delegatedBy?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    OfflineAttributes offlineAttributes?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account
    string requireUploadSignature?;
    # Optional element. When **true,** the agent recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account
    string agentCanEditEmail?;
    # Reserved for DocuSign
    string bulkRecipientsUri?;
    # The `recipientId` of the notary for this signer
    string notaryId?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The recipient's first name. Maximum Length: 50 characters
    string firstName?;
    RecipientPhoneNumber phoneNumber?;
    # The full legal name of the recipient. Maximum Length: 100 characters.
    # 
    # **Note:** You must always set a value for this property in requests, even if `firstName` and `lastName` are set
    string name?;
    # Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    # 
    # When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent
    string[] excludedDocuments?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    RecipientProofFile proofFile?;
    RecipientSMSAuthentication smsAuthentication?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    # 
    DelegationInfo[] delegatedTo?;
    PropertyMetadata firstNameMetadata?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    # 
    string emailRecipientPostSigningURL?;
};

# Contains information about a bank that processes a customer's direct debit payments
public type DirectDebitProcessorInformation record {
    # The code or number that identifies the bank. This is also known as the sort code.
    # 
    # Example: `200000`
    # 
    # Maximum Length: 18 characters
    string bankCode?;
    # The user's country. The system populates this value automatically.
    string country?;
    # The user's first name. This field is required for POST and PUT requests.
    # 
    # Maximum Length: 30 characters
    string firstName?;
    # The user's last name. This field is required for POST and PUT requests.
    # 
    # Maximum Length: 70 characters
    string lastName?;
    # The branch code of the bank used for direct debit.
    # 
    # Maximum Length: 10 characters
    string bankBranchCode?;
    # The check digit or digits in the international bank account number. These digits are used to confirm the validity of the account.
    # 
    # Maximum Length: 4 characters
    string bankCheckDigit?;
    # The name on the direct debit bank account. This field is required for POST and PUT requests.
    # 
    # Maximum Length: 60 characters
    string bankTransferAccountName?;
    # Specifies the type of direct debit transfer. The value of this field is dependent on the user's country. This field is required for POST and PUT requests. Possible values are:
    # 
    # - `DirectDebitUK`
    # - `DirectEntryAU`
    # - `SEPA`
    string bankTransferType?;
    # The International Bank Account Number (IBAN). 
    # 
    # Example: `DE89370400440532013000`
    # 
    # For more information, see [PeopleSoft's guide to Setting Up Banks](https://docs.oracle.com/cd/E16365_01/fscm91pbr0/eng/psbooks/fsbk/chapter.htm?File=fsbk/htm/fsbk03.htm).
    # 
    # **Note:** This number will be obfuscated
    string iBAN?;
    # The name of the direct debit bank.
    # 
    # Maximum Length: 80 characters
    string bankName?;
    # The customer's bank account number. This value will be obfuscated. This field is required for POST and PUT requests.
    # 
    # Maximum Length: 30 characters
    string bankTransferAccountNumber?;
    # The email address of the user who is associated with the payment method. This field is required for POST and PUT requests.
    # 
    # Maximum Length: 80 characters
    string email?;
};

# Describes information
# about the `total` of a payment
public type Money record {
    # The payment amount as displayed
    # in the `currency`.
    # 
    # For example, if the payment amount
    # is USD 12.59,
    # the `amountInBaseUnit` is 1259 (cents),
    # and the displayed amount is `$12.59 USD`.
    # 
    # This is a read-only property
    string displayAmount?;
    # The total payment amount
    # in the currency's base unit.
    # For example, for USD
    # the base currency is one cent
    string amountInBaseUnit?;
    # The three-letter
    # [ISO 4217][ISO 4217] currency code for the payment.
    # 
    # For example:
    # 
    # * AUD Australian dollar
    # * CAD Canadian dollar
    # * EUR Euro
    # * GBP Great Britain pound
    # * USD United States dollar
    # 
    # This is a read-only property.
    # 
    # [ISO 4217]:          https://en.wikipedia.org/wiki/ISO_4217
    string currency?;
};

# Represents the Queries record for the operation: Comments_GetCommentsTranscript
public type CommentsGetCommentsTranscriptQueries record {
    # (Optional) The encoding to use for the file
    string encoding?;
};

# Represents the Queries record for the operation: Recipients_GetTemplateRecipientTabs
public type RecipientsGetTemplateRecipientTabsQueries record {
    # When **true,** all tabs with anchor tab properties are included in the response. The default value is **false.**
    @http:Query {name: "include_anchor_tab_locations"}
    string includeAnchorTabLocations?;
    # When **true,** the response includes metadata indicating which properties are editable
    @http:Query {name: "include_metadata"}
    string includeMetadata?;
};

# Number tabs validate that the entered value is a number.
# They do not support advanced validation or display options.
# See [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/)
# to learn more about this tab type
public type Number record {
    # The unique identifier for the tab
    string tabId?;
    # A regular expression used to validate input for the tab
    string validationPattern?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata formulaMetadata?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata validationPatternMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata validationMessageMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Contains the formula
    # for calculating the value of
    # this tab.
    # 
    # Use a tab's `tabLabel`,
    # enclosed in brackets,
    # to refer to it.
    # 
    # For example,
    # you want to present the total cost
    # of two items, tax included.
    # 
    # The cost of each item is stored
    # in number tabs labeled Item1 and Item2.
    # The tax rate is in a number tab
    # labeled TaxRate.
    # 
    # The formula string for this property
    # would be:
    # `([Item1] + [Item2]) * (1 + [TaxRate])`
    # 
    # See [Calculated Fields][calculatedfields]
    # in the DocuSign Support Center
    # to learn more about formulas.
    # 
    # Maximum Length: 2000 characters
    # 
    # [calculatedfields]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html
    string formula?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: BrandResources_GetBrandResources
public type BrandResourcesGetBrandResourcesQueries record {
    # The ISO 3166-1 alpha-2 codes for the languages that the brand supports
    string langcode?;
    # Specifies which resource file data to return. When **true,** only the master resource file is returned. When **false,** only the elements that you modified are returned
    @http:Query {name: "return_master"}
    string returnMaster?;
};

# Represents the Queries record for the operation: BillingPlan_PutBillingPlan
public type BillingPlanPutBillingPlanQueries record {
    # When **true,** updates the account using a preview billing plan
    @http:Query {name: "preview_billing_plan"}
    string previewBillingPlan?;
};

# A Notary Seal tab enables the recipient to notarize a document. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
# 
# [notary]: /docs/notary-api/
public type NotarySeal record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # 
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata scaleValueMetadata?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size
    string scaleValue?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: AccountSignatures_PutAccountSignatureImage
public type AccountSignaturesPutAccountSignatureImageQueries record {
    @http:Query {name: "transparent_png"}
    string transparentPng?;
};

# A tab that allows the recipient to approve documents
# without placing a signature or initials on the
# document
public type Approve record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # **Note:** Approve tabs never display this tooltip in the signing interface.
    # 
    # Although you can technically set a value via the API for this tab,
    # it will not be displayed to the recipient
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    #  Specifies the approval text that displays in the tab. 
    string buttonText?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata buttonTextMetadata?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign-generated custom tab ID for the custom tab to be applied. You can only use this when adding new tabs for a recipient. When used, the new tab inherits all of the properties of the custom tab
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# This object is used to match a DocuSign field to a Salesforce field so that DocuSign can send information to your Salesforce account
public type ConnectSalesforceField record {
    # 
    string dsAttribute?;
    # 
    string sfField?;
    # A URL that links to the information in the DocuSign field
    string dsLink?;
    # The name of the Salesforce folder
    string sfFolder?;
    # The name of the Salesforce field
    string sfFieldName?;
    # A unique ID for the Salesforce object
    string id?;
    # 
    string sfLockedValue?;
    # 
    string dsNode?;
};

# 
public type AskAnAdmin record {
    # 
    string phone?;
    # 
    string name?;
    # 
    string message?;
    # 
    string email?;
};

# Information about shared items
public type MemberSharedItems record {
    # List of information about shared folders
    FolderSharedItem[] folders?;
    # List of information about shared templates
    TemplateSharedItem[] templates?;
    # List of information about shared envelopes
    SharedItem[] envelopes?;
    UserInfo user?;
    ErrorDetails errorDetails?;
};

# This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.
# 
# [composite]: /docs/esign-rest-api/esign101/concepts/templates/composite/
public type CompositeTemplate record {
    # A number representing the sequence in which to apply the template that contains the PDF metadata.
    # 
    # Example: `4`
    string pdfMetaDataTemplateSequence?;
    Document document?;
    # Zero or more server-side templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value
    ServerTemplate[] serverTemplates?;
    # The ID of this composite template. This ID is used as a reference when adding document object information. If used, the document's `content-disposition` must include the composite template ID to which the document should be added. If a composite template ID is not specified in the content-disposition, the document is applied based on the value of the `documentId` property only. If no document object is specified, the composite template inherits the first document
    string compositeTemplateId?;
    #  Zero or more inline templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value
    InlineTemplate[] inlineTemplates?;
};

# Represents the Queries record for the operation: Folders_GetFolderItems
public type FoldersGetFolderItemsQueries record {
    # Reserved for DocuSign
    @http:Query {name: "owner_email"}
    string ownerEmail?;
    # Reserved for DocuSign
    @http:Query {name: "start_position"}
    string startPosition?;
    # Indicates whether folder items are included in the response. If this parameter is omitted, the default is false
    @http:Query {name: "include_items"}
    string includeItems?;
    # Reserved for DocuSign
    @http:Query {name: "owner_name"}
    string ownerName?;
    # Reserved for DocuSign
    @http:Query {name: "from_date"}
    string fromDate?;
    # Reserved for DocuSign
    @http:Query {name: "to_date"}
    string toDate?;
    # Reserved for DocuSign
    @http:Query {name: "search_text"}
    string searchText?;
    # Reserved for DocuSign
    string status?;
};

# One of the selectable items
# in the `listItems` property
# of a [`list`](/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/) tab
public type ListItem record {
    PropertyMetadata selectedMetadata?;
    PropertyMetadata valueMetadata?;
    # Specifies the text that is shown in the dropdown list. 
    string text?;
    PropertyMetadata textMetadata?;
    # Specifies the value that is used when the list item is selected
    string value?;
    # When **true,** indicates that this item is the default selection shown to a signer. 
    # 
    # Only one selection can be set as the default
    string selected?;
};

# 
public type SmartSectionAnchorPosition record {
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    decimal xPosition?;
    # Specifies the page number on which the tab is located
    int:Signed32 pageNumber?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    decimal yPosition?;
};

# Represents the Queries record for the operation: Recipients_GetRecipients
public type RecipientsGetRecipientsQueries record {
    #  When **true** and `include_tabs` value is set to **true,** all tabs with anchor tab properties are included in the response. 
    @http:Query {name: "include_anchor_tab_locations"}
    string includeAnchorTabLocations?;
    #  When **true,** the extended properties are included in the response. 
    @http:Query {name: "include_extended"}
    string includeExtended?;
    # Boolean value that specifies whether to include metadata associated with the recipients (for envelopes only, not templates)
    @http:Query {name: "include_metadata"}
    string includeMetadata?;
    # When **true,** the tab information associated with the recipient is included in the response
    @http:Query {name: "include_tabs"}
    string includeTabs?;
};

# The request object to update a user authorization
public type UserAuthorizationUpdateRequest record {
    # The end date for the user authorization. The default value is the max UTC value: `9999-12-31T23:59:59.0000000+00:00`
    string endDate?;
    # The start date for the user authorization. The default value is the current date and time
    string startDate?;
};

# A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
# 
# **Note:** saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DocuSign use only
public type ReferralInformation record {
    # When **true,** customer support is provided as part of the account plan
    string enableSupport?;
    # The name of the referrer
    string referrerName?;
    # 
    string idType?;
    # The number of seats (users) included in the plan
    string includedSeats?;
    # Reserved for DocuSign
    string saleDiscountSeatPriceOverride?;
    # 
    string shopperId?;
    # Reserved for DocuSign
    string saleDiscountPeriods?;
    # The name of the industry associated with the referral. 
    # 
    # Example: `Accounting`
    string industry?;
    # A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry.
    # 
    # **Note:** saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DocuSign use only
    string advertisementId?;
    # 
    string publisherId?;
    # Reserved for DocuSign
    string saleDiscountFixedAmount?;
    # An optional external ID for the referral
    string externalOrgId?;
    # 
    string groupMemberId?;
    # 
    string planStartMonth?;
    # 
    string referralCode?;
    # Reserved for DocuSign
    string saleDiscountAmount?;
    # 
    string promoCode?;
    # Reserved for DocuSign
    string saleDiscountPercent?;
};

# Represents the Queries record for the operation: Users_PutUsers
public type UsersPutUsersQueries record {
    @http:Query {name: "allow_all_languages"}
    string allowAllLanguages?;
};

# A complex element that specifies the scheduled sending settings for the envelope
public type ScheduledSending record {
    # The ID of the bulk list. Set this optional value to use scheduled sending with a bulk send operation
    string bulkListId?;
    # User-specified rules indicating how and when the envelope should be scheduled for sending. Only one rule may be specified
    EnvelopeDelayRule[] rules?;
    # The timestamp of when the envelope is scheduled to be sent in ISO 8601 format.
    # 
    # This property is read-only
    string resumeDate?;
    # Status of the scheduled sending job. Valid values:
    # 
    # * `pending`: The envelope has not yet been sent and the scheduled sending delay has not been initiated.
    # * `started`: The sender has initiated the sending process. The delay has not elapsed, so the envelope has not yet been sent to the first recipient.
    # * `completed`: The delay has elapsed and the envelope has been sent to the first recipient.
    # 
    # This property is read-only
    string status?;
};

# Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
# 
# Example:
# 
# ```json
# "recipients": {
#       "seals": [
#         {
#           "recipientId": "1",
#           "routingOrder" : 1,
#           "recipientSignatureProviders": [
#             {
#               "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
#             }
#         ]
#       }
#     ]
#   },
#     .
#     .
#     .
# ```
# For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/s/document-item?bundleId=xcm1643837555908&topicId=isl1578456577247.html)
public type SealSign record {
    # Not applicable
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata requireIdLookupMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Not applicable
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # Not applicable
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # Not applicable
    string deliveredDateTime?;
    # Not applicable
    string suppressEmails?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # Not applicable
    string accessCode?;
    # Not applicable
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # Not applicable
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # Not applicable
    string totalTabCount?;
    # Not applicable
    string addAccessCodeToEmail?;
    # Not applicable
    string completedCount?;
    IdCheckInformationInput idCheckInformationInput?;
    # (Required) Indicates which electronic seal to apply on documents when creating an envelope
    RecipientSignatureProvider[] recipientSignatureProviders?;
    # Not applicable
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    PropertyMetadata routingOrderMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # The recipient's status. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only
    string statusCode?;
    # Not applicable
    string embeddedRecipientStartURL?;
    # Not applicable
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # Not applicable
    string[] customFields?;
    EnvelopeRecipientTabs tabs?;
    # Not applicable
    string declinedDateTime?;
    PropertyMetadata deliveryMethodMetadata?;
    RecipientSMSAuthentication smsAuthentication?;
    # Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document
    string recipientId?;
    # (Optional, default: 1) 
    # Specifies the routing order of the electronic seal in the envelope.
    # The routing order assigned to your electronic seal cannot be shared with another recipient.
    # It is recommended that you set a routing order for your electronic seals
    string routingOrder?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # Not applicable
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Not applicable
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # Not applicable
    string declinedReason?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # Not applicable
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # Not applicable
    DocumentVisibility[] documentVisibility?;
};

# An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching, and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".
# 
# When a user creates an envelope, the envelope custom fields display in the **Envelope Settings** section of the DocuSign console. Envelope recipients do not see the envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=qor1583277385137.html)
public type EnvelopeCustomFields record {
    # An array of text custom fields
    TextCustomField[] textCustomFields?;
    # An array of list custom fields
    ListCustomField[] listCustomFields?;
};

# An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
public type RecipientSignatureProvider record {
    # By default, electronic seals apply on all documents in an envelope. If any of the documents has a `signHere` tab, then a visual representation of the electronic seal will show up in the final document. If not, the electronic seal will be visible in the metadata but not in the content of the document.
    # 
    # To apply electronic seals on specific documents only, you must enable the  `sealDocumentsWithTabsOnly` parameter. In this case, Electronic Seal applies only on documents that have `signHere` tabs set for the Electronic Seal recipient. Other documents won't be sealed. 
    string sealDocumentsWithTabsOnly?;
    # The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details, see [the current provider list](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/). You can also retrieve the list by using the [AccountSignatureProviders: List](/docs/esign-rest-api/reference/accounts/accountsignatureproviders/list/) method.
    # 
    # Example: `universalsignaturepen_default`
    string signatureProviderName?;
    # Indicates the name of the electronic seal to apply on documents
    string sealName?;
    RecipientSignatureProviderOptions signatureProviderOptions?;
    PropertyMetadata signatureProviderNameMetadata?;
};

# A tab that allows the recipient to sign a document. May be
# optional
public type SignHere record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located.
    # Must be 1 for supplemental documents
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (+1, -7)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,**  the tab contains a visual representation for an electronic seal in a document
    string isSealSignTab?;
    # Not applicable to Sign Here tab
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the recipient does not need to complete this tab to complete the signing process
    string optional?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata optionalMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    PropertyMetadata stampTypeMetadata?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (+1, -7)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    # The type of stamp. Valid values are:
    # 
    # - `signature`: A signature image. This is the default value.
    # - `stamp`: A stamp image.
    # - null
    string stampType?;
    PropertyMetadata toolTipMetadata?;
    Stamp stamp?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata scaleValueMetadata?;
    PropertyMetadata yPositionMetadata?;
    # Reserved for DocuSign
    string handDrawRequired?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Scales the size of the tab. This field accepts values from 0.5 to 2.0, where  0.5 is half the normal size, 1.0 is normal size, and 2.0 is twice the normal size
    string scaleValue?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # Not applicable to Sign Here tab
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
};

# Describes a recipient who is a member of a conditional group
public type RecipientOption record {
    # An identifier for the recipient. After assigning this value in a `recipient` object, you can reference it in the `conditions` object to set the recipient as a conditional recipient. For an example, see [How to use conditional recipients](/docs/esign-rest-api/how-to/use-conditional-recipients/)
    string recipientLabel?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The full legal name of the recipient. Maximum length: 100 characters
    string name?;
    # Specifies the signing group role of the recipient. This property is required
    string roleName?;
    # The email ID of the agent. This property is required. Maximum length: 100 characters
    string email?;
};

# 
public type PaymentProcessorInformation record {
    AddressInformation address?;
    # The ID of the billing agreement
    string billingAgreementId?;
    # The email address associated with the payment processor
    string email?;
};

# This object contains details about an envelope transfer rule
public type EnvelopeTransferRule record {
    UserInformation toUser?;
    # When **true,** the original owner is added as a carbon copy recipient after envelope transfer. The default value is **false.**
    string carbonCopyOriginalOwner?;
    UserInformation modifiedUser?;
    UserInformation fromUser?;
    # The ID of the envelope transfer rule. The system generates this ID when the rule is first created
    string envelopeTransferRuleId?;
    Folder toFolder?;
    # The UTC DateTime when the envelope transfer rule was last modified. This property is read-only
    string modifiedDate?;
    Group fromGroup?;
    # The type of envelope event that triggers the transfer. Valid values are:
    # 
    # - `sent`
    # - `before sent` 
    # - `completed`
    string eventType?;
    # When **true,** the envelope transfer rule is active
    string enabled?;
};

# The CloudStorageProviders resource provides methods that allow you to manage the cloud storage providers associate with an account
public type CloudStorageProviders1 record {
    # An Array containing the storage providers associated with the user
    CloudStorageProvider[] storageProviders?;
};

# Allows you to customize locale settings
public type LocalePolicyTab record {
    # Determines how negative currency values
    # are displayed.
    # 
    # In most cases, you should not need to change
    # this value. See [Explicitly define formatting](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#explicitly-define-formatting).
    # 
    # Valid values:
    # 
    # - `Default`<br>
    #   `0`
    # - `OPar_CSym_1_Comma_234_Comma_567_Period_89_CPar`<br>
    #   `($1,234,567.89)`
    # - `Minus_CSym_1_Comma_234_Comma_567_Period_89`<br>
    #   `-$1,234,567.89`
    # - `Minus_CSym_Space_1_Period_234_Period_567_Comma_89`<br>
    #   `-$ 1.234.567,89`
    # - `CSym_Space_Minus_1_Period_234_Period_567_Comma_89`<br>
    #   `$ -1.234.567,89`
    # - `Minus_1_Period_234_Period_567_Comma_89_Space_CSym`<br>
    #   `-1.234.567,89 $`
    # - `OPar_1_Space_234_Space_567_Comma_89_Space_CSym_CPar`<br>
    #   `(1 234 567,89 $)`
    # - `Minus_1_Space_234_Space_567_Comma_89_Space_CSym`<br>
    #   `-1 234 567,89 $`
    # - `CSym_Minus_1_Quote_234_Quote_567_Period_89`<br>
    #   `$-1'234'567.89`
    # - `Minus_CSym_1_Period_234_Period_567_Comma_89`<br>
    #   `-$1.234.567,89`
    # - `Minus_CSym_1_Comma_234_Comma_567`<br>
    #   `-$1,234,567`
    # - `Minus_CSym_12_Comma_34_Comma_567_Period_89`<br>
    #   `-$12,34,567.89`
    # - `OPar_CSym_Space_1234_Comma_567_Period_89_CPar`<br>
    #   `($ 1234,567.89)`
    # - `CSym_Space_Minus_12_Comma_34_Comma_567_Period_89`<br>
    #   `$ -12,34,567.89`
    # - `CSym_Minus_12_Comma_34_Comma_567_Period_89`<br>
    #   `$-1,234,567.89`
    # - `CSym_Space_Minus_1_Space_234_Space_567_Comma_89`<br>
    #   `$ -1 234 567,89`
    # - `CSym_Space_Minus_1_Space_234_Space_567_Period_89`<br>
    #   `$ -1 234 567.89`
    # - `Minus_CSym_Space_1_Space_234_Space_567_Comma_89`<br>
    #   `-$ 1 234 567,89`
    # - `Minus_1_Space_234_Space_567_Comma_89_CSym`<br>
    #   `-1 234 567,89$`
    # - `Minus_1_Space_234_Space_567_Period_89_Space_CSym`<br>
    #   `-1 234 567.89 $`
    # - `OPar_CSym_1_Period_234_Period_567_CPar`<br>
    #   `(1.234.567)`
    # - `OPar_CSym_1_Comma_234_Comma_567_CPar`<br>
    #   `($1,234,567)`
    # - `Minus_1_Comma_234_Comma_567_Period_89_Space_CSym`<br>
    #   `-1,234,567.89 $`
    # - `Minus_CSym_Space_1_Comma_234_Comma_567_Period_89`<br>
    #   `-$ 1,234,567.89`
    # - `OPar_CSym_Space_1_Period_234_Period_567_Comma_89_CPar`<br>
    #   `($ 1.234.567,89)`
    # - `OPar_CSym_Space_1_Quote_234_Quote_567_Period_89_CPar`<br>
    #   `($ 1'234'567.89)`
    # - `OPar_CSym_Space_1_Space_234_Space_567_Comma_89_CPar`<br>
    #   `($ 1 234 567,89)`
    # - `OPar_CSym_Space_1_Space_234_Space_567_Period_89_CPar`<br>
    #   `($ 1 234 567.89)`
    # - `OPar_CSym_12_Comma_34_Comma_567_Period_89_CPar`<br>
    #   `($12,34,567.89)`
    # - `OPar_CSym_Space_12_Comma_34_Comma_567_Period_89_CPar`<br>
    #   `($ 12,34,567.89)`
    # - `OPar_1_Comma_234_Comma_567_Period_89_Space_CSym_CPar`<br>
    #   `(1,234,567.89 $)`
    # - `OPar_1_Period_234_Period_567_Comma_89_Space_CSym_CPar`<br>
    #   `(1.234.567,89 $)`
    # - `OPar_1_Space_234_Space_567_Comma_89_CSym_CPar`<br>
    #   `(1 234 567,89$)`
    # - `OPar_1_Space_234_Space_567_Period_89_Space_CSym_CPar`<br>
    #   `(1 234 567.89 $)`
    # - `OPar_CSym_Space_1_Comma_234_Comma_567_Period_89_CPar`<br>
    #   `($ 1,234,567.89)`
    # - `Minus_CSym_1_Period_234_Period_567`<br>
    #   `-$ 1.234.567`
    # - `Minus_CSym_Space_1_Quote_234_Quote_567_Period_89`<br>
    #   `-$ 1'234'567.89`
    # - `Minus_CSym_Space_1_Space_234_Space_567_Period_89`<br>
    #   `-$ 1 234 567.89`
    # - `CSym_Minus_1_Comma_234_Comma_567`<br>
    #   `$-1,234,567`
    # - `CSym_Minus_1_Period_234_Period_567`<br>
    #   `$-1.234.567`
    # - `CSym_Space_Minus_1_Quote_234_Quote_567_Period_89`<br>
    #   `$ -1'234'567.89`
    # - `CSym_Space_Minus_1_Comma_234_Comma_567_Period_89`<br>
    #   `$ -1,234,567.89`
    # - `Minus_CSym_Space_12_Comma_34_Comma_567_Period_89`<br>
    #   `-$ 12,34,567.89`
    # - `Minus_1_Period_234_Period_567_Space_CSym`<br>
    #   `-123.456.789 $`
    # - `CSym_Minus_1_Space_234_Space_567_Comma_89`<br>
    #   `$-123 456 789,00`
    # - `Minus_1_Quote_234_Quote_567_Period_89_Space_CSym`<br>
    #   `-123'456'789.00 $`
    # - `CSym_1_Comma_234_Comma_567_Period_89_Minus`<br>
    #   `$123,456,789.00-`
    # - `CSym_Minus_1_Period_234_Period_567_Comma_89`<br>
    #   `$-123.456.789,00`
    # - `OPar_CSym_1_Period_234_Period_567_Comma_89_CPar`<br>
    #   `($123.456.789,00)`
    # - `Minus_CSym_1234_Comma_567_Period_89`<br>
    #   `-$123456,789.00`
    # - `Minus_CSym_1_Space_234_Space_567_Comma_89`<br>
    #   `-$123 456 789,00`
    string currencyNegativeFormat?;
    # Specifies the type of calendar. Valid values:
    # 
    # - `gregorian`
    # - `japanese`
    # - `buddhist`
    string calendarType?;
    # Specifies the date format. Valid values:
    # 
    # - `default` <br> used the UI's 
    # - `longformat` <br> use the UI's long format
    # - `dd_mm_yy` <br> dd-MM-yy
    # - `dd_mmm_yy` <br> dd-MMM-yy
    # - `dd_mm_yyyy` <br> dd-MM-yyyy
    # - `dd_mmm_yyyy` <br> dd-MMM-yyyy
    # - `ddmmmmyyyy` <br> dd MMMM yyyy
    # - `ddmmyyyy` <br> dd/MM/yyyy
    # - `ddmmyyyy_de` <br> dd.MM.yyyy
    # - `dmyyyy` <br> d/M/yyyy
    # - `d_m_yyyy` <br> d-M-yyyy
    # - `mmmd_yyyy` <br> MMM d, yyyy
    # - `mmm_dd_yyyy` <br> MMM-dd-yyyy
    # - `mmmmd_yyyy` <br> MMMM d, yyyy
    # - `mm_dd_yyyy` <br> MM-dd-yyyy
    # - `mdyyyy` <br> M/d/yyyy
    # - `yyyy_mmm_dd` <br> yyyy-MMM-dd
    # - `yyyy_mm_dd` <br> yyyy-MM-dd
    # - `yyyymmdd` <br> yyyy/MM/dd
    # - `yyyymd` <br> yyyy/M/d
    # - `custom` <br> Customer set own value
    # - `mmddyyyy` <br> MM/dd/yyyy
    # - `mmddyy` <br> MM/dd/yy
    # - `yyyy_mmmm_d` <br> yyyy MMMM d
    string dateFormat?;
    # When **true,** use the long currency format for the locale
    string useLongCurrencyFormat?;
    # Specifies the address format. Valid values:
    # 
    # - `en_us`
    # - `ja_jp`
    # - `zh_cn_tw`
    string addressFormat?;
    # The two letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code
    string cultureName?;
    # 
    string customTimeFormat?;
    # Specifies the time zone. Valid values:
    # 
    # - `TZ_01_AfghanistanStandardTime`
    # - `TZ_02_AlaskanStandardTime`
    # - `TZ_03_ArabStandardTime`
    # - `TZ_04_ArabianStandardTime`
    # - `TZ_05_ArabicStandardTime`
    # - `TZ_06_ArgentinaStandardTime`
    # - `TZ_07_AtlanticStandardTime`
    # - `TZ_08_AUS_CentralStandardTime`
    # - `TZ_09_AUS_EasternStandardTime`
    # - `TZ_10_AzerbaijanStandardTime`
    # - `TZ_11_AzoresStandardTime`
    # - `TZ_12_BangladeshStandardTime`
    # - `TZ_13_CanadaCentralStandardTime`
    # - `TZ_14_CapeVerdeStandardTime`
    # - `TZ_15_CaucasusStandardTime`
    # - `TZ_16_CentralAustraliaStandardTime`
    # - `TZ_17_CentralAmericaStandardTime`
    # - `TZ_18_CentralAsiaStandardTime`
    # - `TZ_19_CentralBrazilianStandardTime`
    # - `TZ_20_CentralEuropeStandardTime`
    # - `TZ_21_CentralEuropeanStandardTime`
    # - `TZ_22_CentralPacificStandardTime`
    # - `TZ_23_CentralStandardTime`
    # - `TZ_24_CentralStandardTimeMexico`
    # - `TZ_25_ChinaStandardTime`
    # - `TZ_26_DatelineStandardTime`
    # - `TZ_27_E_AfricaStandardTime`
    # - `TZ_28_E_AustraliaStandardTime`
    # - `TZ_29_E_EuropeStandardTime`
    # - `TZ_30_E_SouthAmericaStandardTime`
    # - `TZ_31_EasternStandardTime`
    # - `TZ_32_EgyptStandardTime`
    # - `TZ_33_EkaterinburgStandardTime`
    # - `TZ_34_FijiStandardTime`
    # - `TZ_35_FLE_StandardTime`
    # - `TZ_36_GeorgianStandardTime`
    # - `TZ_37_GMT_StandardTime`
    # - `TZ_38_GreenlandStandardTime`
    # - `TZ_39_GreenwichStandardTime`
    # - `TZ_40_GTB_StandardTime`
    # - `TZ_41_HawaiianStandardTime`
    # - `TZ_42_IndiaStandardTime`
    # - `TZ_43_IranStandardTime`
    # - `TZ_44_IsraelStandardTime`
    # - `TZ_45_JordanStandardTime`
    # - `TZ_46_KaliningradStandardTime`
    # - `TZ_47_KamchatkaStandardTime`
    # - `TZ_48_KoreaStandardTime`
    # - `TZ_49_MagadanStandardTime`
    # - `TZ_50_MauritiusStandardTime`
    # - `TZ_51_MidAtlanticStandardTime`
    # - `TZ_52_MiddleEastStandardTime`
    # - `TZ_53_MontevideoStandardTime`
    # - `TZ_54_MoroccoStandardTime`
    # - `TZ_55_MountainStandardTime`
    # - `TZ_56_MountainStandardTimeMMexico`
    # - `TZ_57_MyanmarStandardTime`
    # - `TZ_58_N_CentralAsiaStandardTime`
    # - `TZ_59_NamibiaStandardTime`
    # - `TZ_60_NepalStandardTime`
    # - `TZ_61_NewZealandStandardTime`
    # - `TZ_62_NewfoundlandStandardTime`
    # - `TZ_63_NorthAsiaEastStandardTime`
    # - `TZ_64_NorthAsiaStandardTime`
    # - `TZ_65_PacificSAStandardTime`
    # - `TZ_66_PacificStandardTime`
    # - `TZ_67_PacificStandardTimeMexico`
    # - `TZ_68_PakistanStandardTime`
    # - `TZ_69_ParaguayStandardTime`
    # - `TZ_70_RomanceStandardTime`
    # - `TZ_71_RussianStandardTime`
    # - `TZ_72_SAEasternStandardTime`
    # - `TZ_73_SAPacificStandardTime`
    # - `TZ_74_SAWesternStandardTime`
    # - `TZ_75_SamoaStandardTime`
    # - `TZ_76_SE_AsiaStandardTime`
    # - `TZ_77_SingaporeStandardTime`
    # - `TZ_78_SouthAfricaStandardTime`
    # - `TZ_79_SriLankaStandardTime`
    # - `TZ_80_SyriaStandardTime`
    # - `TZ_81_TaipeiStandardTime`
    # - `TZ_82_TasmaniaStandardTime`
    # - `TZ_83_TokyoStandardTime`
    # - `TZ_84_TongaStandardTime`
    # - `TZ_85_TurkeyStandardTime`
    # - `TZ_86_UlaanbaatarStandardTime`
    # - `TZ_87_US_EasternStandardTime`
    # - `TZ_88_USMountainStandardTime`
    # - `TZ_89_VenezuelaStandardTime`
    # - `TZ_90_VladivostokStandardTime`
    # - `TZ_91_W_AustraliaStandardTime`
    # - `TZ_92_W_CentralAfricaStandardTime`
    # - `TZ_93_W_EuropeStandardTime`
    # - `TZ_94_WestAsiaStandardTime`
    # - `TZ_95_WestPacificStandardTime`
    # - `TZ_96_YakutskStandardTime`
    string timeZone?;
    # When a user is required to enter their initials,
    # this property
    # specifies how initials are rendered.
    # The examples show the
    # initials for "William Henry Gates".
    # 
    # 
    # - `first1last1`<br> "WG"
    # - `last2`<br> "GA"
    # - `first2`<br> "WI"
    # - `last2_cjk`<br> first two characters from last name in CJK characters.
    # 
    # <!-- Components/BusinessObjects/Models/ConcealedApiRestModels/localePolicyEnums.cs -->
    string initialFormat?;
    # Determines how positive currency values
    # are displayed.
    # 
    # In most cases, you should not need to change
    # this value. See [Explicitly define formatting](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#explicitly-define-formatting).
    # 
    # Valid values:
    # 
    # 
    # - `Default`<br>
    #   Uses the current locale.
    # - `CSym_1_Comma_234_Comma_567_Period_89`<br>
    #   `$1,234,567.89`
    # - `CSym_Space_1_Period_234_Period_567_Comma_89`<br>
    #   `$ 1.234.567,89`
    # - `Leading_1_Period_234_Period_567_Comma_89_Space_CSym`<br>
    #   `1.234.567,89 $`
    # - `Leading_1_Space_234_Space_567_Comma_89_Space_CSym`<br>
    #   `1 234 567,89 $`
    # - `CSym_Space_1_Quote_234_Quote_567_Period_89`<br>
    #   `$ 1'234'567.89`
    # - `CSym_1_Comma_234_Comma_567`<br>
    #   `$1,234,567`
    # - `CSym_Space_12_Comma_34_Comma_567_Period_89`<br>
    #   `$ 12,34,567.89`
    # - `CSym_12_Comma_34_Comma_567_Period_89`<br>
    #   `$12,34,567.89`
    # - `CSym_Space_1234_Comma_567_Period_89`<br>
    #   `$ 1234,567.89`
    # - `Leading_1_Space_234_Space_567_Period_89_Space_CSym`<br>
    #   `1 234 567.89 $`
    # - `CSym_Space_1_Space_234_Space_567_Comma_89`<br>
    #   `$ 1 234 567,89`
    # - `CSym_Space_1_Space_234_Space_567_Period_89`<br>
    #   `$ 1 234 567.89`
    # - `Leading_1_Space_234_Space_567_Comma_89_CSym`<br>
    #   `1 234 567,89$`
    # - `CSym_1_Period_234_Period_567`<br>
    #   `$1.234.567`
    # - `Leading_1_Comma_234_Comma_567_Period_89_Space_CSym`<br>
    #   `1,234,567. $` (New Armenian)
    # - `CSym_Space_1_Comma_234_Comma_567_Period_89`<br>
    #   `$ 1,234,567.89` (Persian)
    # - `CSym_1_Period_234_Period_567_Comma_89`<br>
    #   `$123.456.789,00` (es-CO)
    # - `Leading_1_Quote_234_Quote_567_Period_89_Space_CSym`<br>
    #   `123'456'789.00 $` (fr-ch)
    # - `CSym_1234_Comma_567_Period_89`<br>
    #   `$123456,789.00` (es-PR)
    # - `Leading_1_Period_234_Period_567_Space_CSym`<br>
    #   `123.456.789 $`
    # - `CSym_1_Space_234_Space_567_Comma_89`<br>
    #   `$123 456 789,00` (en-ZA, es-CR)
    string currencyPositiveFormat?;
    # Describes how names are displayed. Valid values:
    # 
    # - `first_middle_last`<br>William Henry Gates
    # - `full`<br>Mr William Henry Gates III
    # - `last_first`<br>Gates William
    # - `lastfirst`<br>GatesWilliam
    # - `last_first_cjk`<br>Gates William only with CJK characters
    # - `lastfirst_cjk`<br>GatesWilliam only with CJK characters
    # 
    # <!-- Web/RestApi/Models/v2_1/localePolicy.cs#L341-L366 -->
    string nameFormat?;
    # Specifies the time format. Valid values:
    # 
    # - `none`      <br>None
    # - `hh_mm`     <br>hh:mm 
    # - `hhmm`      <br>HH:mm
    # - `hhmmss`    <br>HH:mm:ss
    # - `hhmmsstt`  <br>HH:mm:ss tt
    # - `hhmmtt`    <br> HH:mm tt
    # - `hmm`       <br>h:mm
    # - `hmmss`     <br>h:mm:ss
    # - `hmmsstt`   <br>h:mm:ss tt
    # - `hmmtt`     <br>h:mm tt
    # - `custom`    <br>Customer-set format
    # 
    # <!-- Web/RestApi/Models/v2_1/localePolicy.cs#L501-L546 -->
    string timeFormat?;
    # 
    string customDateFormat?;
    # The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
    # 
    # Supported formats:
    # 
    # - `AED`
    # - `AFN`
    # - `ALL`
    # - `AMD`
    # - `ANG`
    # - `AOA`
    # - `ARS`
    # - `AUD`
    # - `AWG`
    # - `AZN`
    # - `BAM`
    # - `BBD`
    # - `BDT`
    # - `BGN`
    # - `BHD`
    # - `BIF`
    # - `BMD`
    # - `BND`
    # - `BOB`
    # - `BOV`
    # - `BRL`
    # - `BSD`
    # - `BTN`
    # - `BWP`
    # - `BYN`
    # - `BYR`
    # - `BZD`
    # - `CAD`
    # - `CDF`
    # - `CHE`
    # - `CHF`
    # - `CHW`
    # - `CLF`
    # - `CLP`
    # - `CNY`
    # - `COP`
    # - `COU`
    # - `CRC`
    # - `CUC`
    # - `CUP`
    # - `CVE`
    # - `CZK`
    # - `DJF`
    # - `DKK`
    # - `DOP`
    # - `DZD`
    # - `EGP`
    # - `ERN`
    # - `ETB`
    # - `EUR`
    # - `FJD`
    # - `FKP`
    # - `GBP`
    # - `GEL`
    # - `GHS`
    # - `GIP`
    # - `GMD`
    # - `GNF`
    # - `GTQ`
    # - `GYD`
    # - `HKD`
    # - `HNL`
    # - `HRK`
    # - `HTG`
    # - `HUF`
    # - `IDR`
    # - `ILS`
    # - `INR`
    # - `IQD`
    # - `IRR`
    # - `ISK`
    # - `JMD`
    # - `JOD`
    # - `JPY`
    # - `KES`
    # - `KGS`
    # - `KHR`
    # - `KMF`
    # - `KPW`
    # - `KRW`
    # - `KWD`
    # - `KYD`
    # - `KZT`
    # - `LAK`
    # - `LBP`
    # - `LKR`
    # - `LRD`
    # - `LSL`
    # - `LYD`
    # - `MAD`
    # - `MDL`
    # - `MGA`
    # - `MKD`
    # - `MMK`
    # - `MNT`
    # - `MOP`
    # - `MRO`
    # - `MUR`
    # - `MVR`
    # - `MWK`
    # - `MXN`
    # - `MXV`
    # - `MYR`
    # - `MZN`
    # - `NAD`
    # - `NGN`
    # - `NIO`
    # - `NOK`
    # - `NPR`
    # - `NZD`
    # - `OMR`
    # - `PAB`
    # - `PEN`
    # - `PGK`
    # - `PHP`
    # - `PKR`
    # - `PLN`
    # - `PYG`
    # - `QAR`
    # - `RON`
    # - `RSD`
    # - `RUB`
    # - `RWF`
    # - `SAR`
    # - `SBD`
    # - `SCR`
    # - `SDG`
    # - `SEK`
    # - `SGD`
    # - `SHP`
    # - `SLL`
    # - `SOS`
    # - `SRD`
    # - `SSP`
    # - `STD`
    # - `SVC`
    # - `SYP`
    # - `SZL`
    # - `THB`
    # - `TJS`
    # - `TMT`
    # - `TND`
    # - `TOP`
    # - `TRY`
    # - `TTD`
    # - `TWD`
    # - `TZS`
    # - `UAH`
    # - `UGX`
    # - `USD`
    # - `USN`
    # - `UYI`
    # - `UYU`
    # - `UZS`
    # - `VEF`
    # - `VND`
    # - `VUV`
    # - `WST`
    # - `XAF`
    # - `XAG`
    # - `XAU`
    # - `XBA`
    # - `XBB`
    # - `XBC`
    # - `XBD`
    # - `XCD`
    # - `XDR`
    # - `XOF`
    # - `XPD`
    # - `XPF`
    # - `XPT`
    # - `XSU`
    # - `XTS`
    # - `XUA`
    # - `XXX`
    # - `YER`
    # - `ZAR`
    # - `ZMW`
    # - `ZWL`
    string currencyCode?;
};

# 
public type GraphicsContext record {
    # The fill color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)
    string fillColor?;
    # The line weight or thickness to use for the overlay
    string lineWeight?;
    # The line color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)
    string lineColor?;
};

# Represents the Queries record for the operation: AccountSignatures_GetAccountSignatures
public type AccountSignaturesGetAccountSignaturesQueries record {
    # The name associated with the stamps to return. This value can be a Japanese surname (up to 5 characters) or a purchase order ID
    @http:Query {name: "stamp_name"}
    string stampName?;
    # The format of the stamp to return. Valid values:
    # - `NameDateHanko`
    # - `NameHanko`
    # - `PlaceholderHanko`
    @http:Query {name: "stamp_format"}
    string stampFormat?;
    # The type of the stamps to return. Valid values:
    # - `name_stamp`
    # - `stamp`
    # - `signature`
    @http:Query {name: "stamp_type"}
    string stampType?;
};

# A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
public type Witness record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # Reserved for DocuSign
    string isBulkRecipient?;
    PropertyMetadata requireIdLookupMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # When **true,** this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient
    string defaultRecipient?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    PropertyMetadata isBulkRecipientMetadata?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    # When **true,** specifies that the recipient creates the tabs
    string recipientSuppliesTabs?;
    # Optional element. When **true,** the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account
    string agentCanEditName?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # When **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once)
    string signInEachLocation?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    RecipientSignatureInformation signatureInfo?;
    # The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
    RecipientSignatureProvider[] recipientSignatureProviders?;
    # 
    string notarySignerEmailSent?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # When **true,** the signer must print, sign, and upload or fax the signed documents to DocuSign
    string requireSignOnPaper?;
    # By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.
    # 
    # This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. 
    # 
    # Set this parameter to `safe` to use a SAFE-BioPharma certificate.
    # 
    # The signer must be enrolled in the SAFE program to sign with a SAFE certificate
    string requireSignerCertificate?;
    PropertyMetadata routingOrderMetadata?;
    # The recipient's status. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only
    string statusCode?;
    # The recipient's last name
    string lastName?;
    PropertyMetadata signInEachLocationMetadata?;
    # Not used. Use the `witnessFor` property instead
    string witnessForGuid?;
    # When **true,** autonavigation is set for the recipient
    string autoNavigation?;
    EnvelopeRecipientTabs tabs?;
    # When **true,** specifies that the signer can perform the signing ceremony offline
    string canSignOffline?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    # Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The recipient's email address
    string email?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    # The reason why the recipient was created (for example, `sender`). This property is read-only
    string creationReason?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    DelegationInfo delegatedBy?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    OfflineAttributes offlineAttributes?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account
    string requireUploadSignature?;
    # Optional element. When **true,** the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account
    string agentCanEditEmail?;
    # Reserved for DocuSign
    string bulkRecipientsUri?;
    # 
    string notaryId?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The recipient's first name. Maximum Length: 50 characters
    string firstName?;
    RecipientPhoneNumber phoneNumber?;
    # The full legal name of the recipient. Maximum Length: 100 characters.
    # 
    # **Note:** You must always set a value for this property in requests, even if `firstName` and `lastName` are set
    string name?;
    # Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    # 
    # When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent
    string[] excludedDocuments?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    RecipientProofFile proofFile?;
    RecipientSMSAuthentication smsAuthentication?;
    # The `recipientId` of the person or party for whom the recipient is a witness
    string witnessFor?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    # 
    DelegationInfo[] delegatedTo?;
    PropertyMetadata firstNameMetadata?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    # 
    string emailRecipientPostSigningURL?;
};

# A user authorizations to create or update
public type UserAuthorizationCreateRequestWithId record {
    # The UTC DateTime to end the authorization. The default value is the max UTC value: `9999-12-31T23:59:59.0000000+00:00`
    string endDate?;
    # The ID of the user authorization. This property is required to update an existing authorization
    string authorizationId?;
    # The permission level to grant the agent. Valid values:
    # 
    # - `Send`
    # - `Manage`
    # - `Sign`
    # 
    # This property is required if you are creating a new authorization
    string permission?;
    AuthorizationUser agentUser?;
    # The UTC DateTime to initiate the authorization. The default value is the current date and time
    string startDate?;
};

# 
public type DocGenFormFieldValidation record {
    # 
    string expression?;
    # 
    string errorMessage?;
};

# Represents the Queries record for the operation: PowerForms_GetPowerFormsSenders
public type PowerFormsGetPowerFormsSendersQueries record {
    # The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image
    @http:Query {name: "start_position"}
    string startPosition?;
};

# Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature
public type SigningGroup record {
    # The email address for the signing group. You can use a group email address to email all of the group members at the same time
    string groupEmail?;
    # The name of the group
    string groupName?;
    # The type of the group. The only valid value for this request is `sharedSigningGroup`
    string groupType?;
    # The name of the user who created the signing group. This property is read-only
    string createdBy?;
    # The UTC DateTime when the signing group was created. This property is read-only
    string created?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The UTC DateTime when the signing group was last modified. This property is read-only
    string modified?;
    # The user ID (GUID) of the user who last modified this user record. This property is read-only
    string modifiedBy?;
    # User management information
    SigningGroupUser[] users?;
    ErrorDetails errorDetails?;
};

# This object represents an item in a workspace, which can be either a file or folder
public type WorkspaceItem record {
    # The height of the thumbnail image
    string thumbHeight?;
    # The file extension of a file item
    string extension?;
    # The number of pages in a file
    string pageCount?;
    Page thumbnail?;
    # A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content of a file. DocuSign compares this value to its own computation. If the two values are not equal, the original content and received content are not the same and the upload is refused
    string sha256?;
    # The ID of the parent folder, or the special value `root` for the root folder
    string parentFolderId?;
    # The UTC DateTime when the workspace item was created
    string created?;
    WorkspaceUser createdByInformation?;
    WorkspaceUser lastModifiedByInformation?;
    WorkspaceUserAuthorization userAuthorization?;
    # The width of the thumbnail image
    string thumbWidth?;
    # The type of the workspace item. Valid values are file, folder
    string 'type?;
    # A URI containing the user ID
    string uri?;
    # The URI of the parent folder
    string parentFolderUri?;
    WorkspaceUserAuthorization callerAuthorization?;
    # The size of the file in bytes
    string fileSize?;
    # The ID of the user who last modified the item
    string lastModifiedById?;
    # The name of the file or folder
    string name?;
    # The URI for retrieving the file
    string fileUri?;
    #  When **true,** the item is public
    string isPublic?;
    # A unique ID for the Salesforce object
    string id?;
    # The UTC date and time that the comment was last updated.
    # 
    # **Note:** This can only be done by the creator
    string lastModified?;
    # If the item is a file, this property specifies the content type of the file
    string contentType?;
    # The ID of the user who created the workspace item
    string createdById?;
};

# Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order
public type Agent record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    PropertyMetadata requireIdLookupMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The recipient's first name. Maximum Length: 50 characters
    string firstName?;
    RecipientPhoneNumber phoneNumber?;
    # The full legal name of the recipient. Maximum Length: 100 characters.
    # 
    # **Note:** You must always set a value for this property in requests, even if `firstName` and `lastName` are set
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    # 
    # When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent
    string[] excludedDocuments?;
    PropertyMetadata routingOrderMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # The recipient's status. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only
    string statusCode?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The recipient's last name
    string lastName?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    RecipientSMSAuthentication smsAuthentication?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The email ID of the agent. Notification of the document to sign is sent to this email id. 
    # 
    # Maximum length: 100 characters. 
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    PropertyMetadata firstNameMetadata?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # 
    string emailRecipientPostSigningURL?;
};

# This object contains information about the envelope or template that you want to send in bulk
public type BulkSendRequest record {
    # The human-readable name of the batch. If you do not set this value, it defaults to the `name` property of the `bulkSendingList` object
    string batchName?;
    # The GUID of the envelope or template that you want to send in bulk
    string envelopeOrTemplateId?;
};

# Contains account settings information. Used in requests to set property values. Used in responses to report property values
public type AccountSettingsInformation record {
    SettingsMetadata captureVoiceRecordingMetadata?;
    # 
    string enableDSigIDCheckInPersonForQESPens?;
    #  When **true,** auto-tagging is enabled for the account
    string allowAutoTagging?;
    SettingsMetadata advancedCorrectMetadata?;
    SettingsMetadata suppressCertificateEnforcementMetadata?;
    SettingsMetadata usesAPIMetadata?;
    # Boolean that specifies whether member names can be changed in the account
    string allowAccountMemberNameChange?;
    # 
    string enableSearchSiteSpecificApi?;
    # "true" if the account has permission to use the scheduled sending feature to send envelopes at a specified datetime in the future, "false" otherwise
    string allowScheduledSending?;
    # 
    string allowAgreementActions?;
    # When **true,** indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false.**
    # **Note:** Only Admin users can change this setting
    string allowCDWithdraw?;
    # When **true,** a sender can allow signers to use the sign on paper option.
    # 
    # **Note:** Only Admin users can change this setting
    string enableSignOnPaper?;
    SettingsMetadata allowEditingEnvelopesOnBehalfOfOthersMetadata?;
    # 
    string allowDocGenDocuments?;
    SettingsMetadata enablePowerFormDirectMetadata?;
    # 
    @jsondata:Name {value: "dss_SIGN_29182_SlideUpBar_RadminOption"}
    string dssSIGN29182SlideUpBarRadminOption?;
    SettingsMetadata enablePDFAConversionMetadata?;
    SettingsMetadata writeReminderToEnvelopeHistoryMetadata?;
    # 
    string allowParticipantRecipientType?;
    SettingsMetadata disableUserSharingMetadata?;
    # 
    string enableInboxBrowseViewsPoweredByElasticSearch?;
    # 
    string enforceTlsEmails?;
    # Metadata that indicates whether the `allowSignNow` property is editable
    string allowSignNowMetadata?;
    # Boolean that specifies whether to enable PDF form fields to get converted to DocuSign secure fields when the document is added or uploaded to an envelope
    string convertPdfFields?;
    # Boolean that specifies whether validations on recipient email domains are allowed
    string validationsAllowed?;
    # The number of minutes of inactivity before a mobile user is automatically logged out of the system. Valid values are `1` to `120` minutes. The default value is `20` minutes.
    # 
    # **Note:** Only Admin users can change this setting
    string mobileSessionTimeout?;
    SettingsMetadata enableSearchMetadata?;
    # When **true,** enables customer satisfaction metric tracking for the account
    string enableCustomerSatisfactionMetricTracking?;
    # 
    LinkedExternalPrimaryAccount[] linkedExternalPrimaryAccounts?;
    SettingsMetadata optOutNewPlatformSealPlatformMetadata?;
    SettingsMetadata enableInboxBrowseViewsPoweredByElasticSearchMetadata?;
    SettingsMetadata sendingTagsFontNameMetadata?;
    SettingsMetadata allowENoteEOriginalMetadata?;
    SettingsMetadata enableInboxRelevanceSortMetadata?;
    # When **true,** enables comments for the account so that signers and recipients can make and respond to comments in documents belonging to the envelopes that they are sent
    string enableSigningExtensionComments?;
    SettingsMetadata allowDocumentDisclosuresMetadata?;
    # Boolean that specifies whether resource files can be used for extended sending
    string allowExtendedSendingResourceFile?;
    SettingsMetadata allowOrganizationToUseRemoteNotaryMetadata?;
    # 
    string draftEnvelopeRetention?;
    # When **true,** Vaulting is enabled for the account
    string enableVaulting?;
    SettingsMetadata idfxKBAAuthenticationOverrideMetadata?;
    SettingsMetadata wurflMinAllowableScreenSizeMetadata?;
    SettingsMetadata allowACEMetadata?;
    SettingsMetadata timezoneOffsetAPIMetadata?;
    # When **true,** enables advanced PowerForms for the account
    string enableAdvancedPowerForms?;
    # When **true,** push notifications are disabled for the account.
    # 
    # **Note:** Only Admin users can change this setting
    string disableMobilePushNotifications?;
    # Boolean that specifies whether or not API calls require a x509 cert in the header of the call
    string suppressCertificateEnforcement?;
    # 
    string enableDSigIDVerificationPens?;
    SettingsMetadata allowMemberTimeZoneMetadata?;
    # Sets the login requirements for signers. Valid values are:
    # 
    # - `login_not_required`: Signers are not required to log in.
    # - `login_required_if_account_holder`: If the signer has a DocuSign account,
    #   they must log in to sign the document.
    # - `login_required_per_session`: The sender cannot send an envelope to anyone
    #   who does not have a DocuSign account.
    # - `login_required_per_envelope`: The sender cannot send an envelope to anyone
    #   who does not have a DocuSign account, and the signer must also log in for
    #   each envelope they will sign.
    # 
    # 
    # **Note:** Only Admin users can change this setting. If you use Direct PowerForms
    # or captive (embedded signers), the "Account required" settings are bypassed for
    # those signers. If your workflow requires that the signer have an account,
    # you should not use those methods
    string signerLoginRequirements?;
    SettingsMetadata pdfMaxChunkedUploadPartSizeMetadata?;
    SettingsMetadata accountNameMetadata?;
    # The account-wide default font size used for the information in the tab:
    # 
    # - `Size7`
    # - `Size8`
    # - `Size9`
    # - `Size10`
    # - `Size11`
    # - `Size12`
    # - `Size14`
    # - `Size16`
    # - `Size18`
    # - `Size20`
    # - `Size22`
    # - `Size24`
    # - `Size26`
    # - `Size28`
    # - `Size36`
    # - `Size48`
    # - `Size72`
    string sendingTagsFontSize?;
    SettingsMetadata enableDSigIDVerificationPensMetadata?;
    SettingsMetadata canSelfBrandSignMetadata?;
    SettingsMetadata allowRecipientConnectMetadata?;
    SettingsMetadata enablePowerFormMetadata?;
    SettingsMetadata enableDSigIDCheckForAESPensMetadata?;
    SettingsMetadata allowPerformanceAnalyticsMetadata?;
    SettingsMetadata allowOrganizationDocusignMonitorMetadata?;
    # 
    string allowIDVForEUQualifiedSignatures?;
    # 
    string enableBccDummyLink?;
    SettingsMetadata enableClickwrapsMetadata?;
    # 
    string mergeMixedModeResults?;
    SettingsMetadata identityVerificationMetadata?;
    # When **true,**
    # shared tabs are enabled for the account.
    # 
    # **Note:** Only Admin users can change this setting
    string allowSharedTabs?;
    # When **true,** the [Document Visibility](https://support.docusign.com/guides/ndse-user-guide-document-visibility) feature is enabled for the account
    string allowDocumentVisibility?;
    # When **true,** the account administrator can enable in-person signing.
    # 
    # **Note:** Only SysAdmin users can change this setting.
    string allowInPerson?;
    # When **true,**
    # recipients can use
    # [social ids](https://support.docusign.com/guides/signer-authentication)
    # when signing
    string socialIdRecipAuth?;
    # 
    string allowACE?;
    SettingsMetadata maximumUsersPerSigningGroupMetadata?;
    # When **true,**
    # setting a unique language for a recipient
    # not only affects the email language, but also the signing
    # language they are presented with. When **false,** only the email will
    # be affected when the sender specifies a unique language for a
    # recipient.
    # 
    # **Note:** Only Admin users can change this setting
    string setRecipSignLang?;
    # 
    string showMaskedFieldsWhenDownloadingDocumentAsSender?;
    SettingsMetadata faxOutEnabledMetadata?;
    # When **true,** enables fonts to be set on tags for the account
    string enableSendingTagsFontSettings?;
    SettingsMetadata validationsCadenceMetadata?;
    SettingsMetadata attachCompletedEnvelopeMetadata?;
    # 
    string enableClickPlusCustomStyle?;
    SettingsMetadata enableIdfxPhoneAuthSignatureAuthStatusMetadata?;
    SettingsMetadata enableSearchUIMetadata?;
    SettingsMetadata allowNonUSPhoneAuthMetadata?;
    SettingsMetadata billingAddressMetadata?;
    SettingsMetadata useDerivedKeysMetadata?;
    SettingsMetadata chromeSignatureEnabledMetadata?;
    # When **true,** bulk send functionality is enabled for the account.
    # 
    # **Note:** Only Admin users can change this setting
    string allowBulkSend?;
    # 
    string enableKeyTermsSuggestionsByDocumentType?;
    # When **true,** account users cannot be logged into multiple sessions at the same time.
    # 
    # **Note:** Only Admin users can change this setting
    string disableMultipleSessions?;
    # When **true,** signers are required to use Express Digital Signatures.
    # 
    # **Note:** Only Admin users can change this setting
    string allowExpressSignerCertificate?;
    # When **true,** this user can use the bulk send feature for the account
    string bulkSend?;
    SettingsMetadata enableAdmHealthcareMetadata?;
    # When **true,** Signature Stamps are enabled.
    # 
    # **Note:** Only Admin users can change this setting
    string allowSignatureStamps?;
    # Valid values are:
    # 
    # - `none`
    # - `monthly`
    string validationsCadence?;
    SettingsMetadata allowTransactionsWorkspaceMetadata?;
    # 
    string bulkSendMaxUnprocessedEnvelopesCount?;
    SettingsMetadata useMultiAppGroupsDataMetadata?;
    SettingsMetadata allowIDVLevel3Metadata?;
    # When **true,**
    # recipients receiving envelopes from this account
    # can sign offline.
    # 
    # **Note:** Only Admin users can change this setting
    string recipientsCanSignOffline?;
    # When **true,** signers who decline to sign an envelope sent from this account
    # are required to provide a reason for declining.
    # 
    # **Note:** Only Admin users can change this setting
    string requireDeclineReason?;
    SettingsMetadata allowOrganizationDomainUserManagementMetadata?;
    SettingsMetadata showLocalizedWatermarksMetadata?;
    # When **true,** the envelope correction feature is enabled.
    # 
    # **Note:** Only Admin users can change this setting
    string allowEnvelopeCorrect?;
    # When **true,** this user can include supplemental documents
    string allowSupplementalDocuments?;
    SettingsMetadata bulkSendMetadata?;
    # Reserved for DocuSign
    string useAccountLevelEmail?;
    SettingsMetadata accountDefaultLanguageMetadata?;
    # The user ID for the RSA account.
    # 
    # **Note:**
    # Only Admin users can change this setting. Modifying this value may disrupt
    # your ID Check capability.
    # Ensure you have the correct value before changing it
    string rsaVeridUserId?;
    # 
    string enableInBrowserEditor?;
    SettingsMetadata mergeMixedModeResultsMetadata?;
    # When **true,** enables Connect for an account. Note that Connect integration requires additional configuration that must be set up for it to take effect; this switch is only the on/off control for the account.
    # 
    # **Note:** Only Admin users can change this setting, and only when `envelopeIntegrationAllowed` is set
    string envelopeIntegrationEnabled?;
    # 
    string enableDSigEUAdvancedPens?;
    SettingsMetadata enableEnvelopeStampingByAccountAdminMetadata?;
    # When **true,**
    # the account administrator can enable
    # the Sign Now feature
    string allowSignNow?;
    # 
    @jsondata:Name {value: "EnvelopeLimitsTotalDocumentSizeAllowedInMBEnabled"}
    string envelopeLimitsTotalDocumentSizeAllowedInMBEnabled?;
    SettingsMetadata signerCanSignOnMobileMetadata?;
    # When **true,** scheduled releases are enabled. The default value is **false.**
    string enableScheduledRelease?;
    SettingsMetadata recipientSigningAutoNavigationControlMetadata?;
    # 
    string useNewEnvelopeSearchOnlyWithSearchTerm?;
    SettingsMetadata showInitialConditionalFieldsMetadata?;
    # Speficies how often to display the consumer disclosure.
    # 
    # Valid values are:
    # 
    # - `once`: Per account, the supplemental document is displayed once only per `userId`. 
    # - `always`: Per envelope, the supplemental document is displayed once only per `userId`. 
    # - `each_access`: Per envelope, the supplemental document is displayed once only per `recipientId`
    string consumerDisclosureFrequency?;
    SettingsMetadata enableVaultingMetadata?;
    # Specifies the ID Verification workflow applied on an envelope by workflow ID. <br/>See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. <br/>This can be used in addition to other [recipient authentication](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=kzp1578456318101.html) methods. <br/>Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients' identity by verifying their ID while ID Check relies on data available on public records (such as current and former address)
    AccountIdentityVerificationWorkflow[] identityVerification?;
    SettingsMetadata supplementalDocumentsMustViewMetadata?;
    # When **true,** account users must both view and accept supplemental documents when signing
    string supplementalDocumentsMustRead?;
    # Boolean that specifies whether to display a Beta switch for your app
    string displayBetaSwitch?;
    # 
    @jsondata:Name {value: "EnvelopeLimitsTotalDocumentSizeAllowedInMB"}
    string envelopeLimitsTotalDocumentSizeAllowedInMB?;
    SettingsMetadata allowUsersToAccessDirectoryMetadata?;
    SettingsMetadata enableScheduledReleaseMetadata?;
    # When **true,**
    # [offline signing](https://support.docusign.com/articles/Offline-access-with-the-DocuSign-Mobile-App-for-iOS-iPad-iPhone-iPod-Touch)
    # is enabled for the account.
    # 
    # **Note:** Only Admin users can change this setting
    string allowOfflineSigning?;
    SettingsMetadata enableESignAPIHourlyLimitManagementMetadata?;
    # 
    string enableIdfxPhoneAuthSignatureAuthStatus?;
    SettingsMetadata enableSMSDeliveryAdditionalNotificationMetadata?;
    # 
    string enableInboxRelevanceSort?;
    SettingsMetadata requireSignerCertificateTypeMetadata?;
    # Boolean that specifies whether conditional field options are initially displayed (before a user makes entries)
    string showInitialConditionalFields?;
    # 
    string enableSMSDeliveryPrimary?;
    SettingsMetadata accountDateTimeFormatMetadata?;
    SettingsMetadata disableSignerCertViewMetadata?;
    # 
    string enablePDFAConversion?;
    # 
    string allowWhatsAppDelivery?;
    # Boolean that specifies whether to automatically provision a user membership in the account for accountless recipients. (Also known as Just-in-Time provisioning.)
    string autoProvisionSignerAccount?;
    # When **true,** enables Access Code Generator on the account
    string enableAccessCodeGenerator?;
    # When **true,**
    # show tutorials
    string showTutorials?;
    SettingsMetadata allowTransactionsWorkspaceOriginalMetadata?;
    # 
    string signDateTimeAccountLanguageOverride?;
    SettingsMetadata inSessionEnabledMetadata?;
    SettingsMetadata allowAccountMemberNameChangeMetadata?;
    SettingsMetadata allowSignerReassignMetadata?;
    # When **true,** the initial values of all SecureFields are written
    # to the document when it is sent.
    # 
    # **Note:** Only Admin users can change this setting
    string signerShowSecureFieldInitialValues?;
    SettingsMetadata allowAdvancedRecipientRoutingConditionalMetadata?;
    @jsondata:Name {value: "EnvelopeLimitsTotalDocumentSizeAllowedInMBMetadata"}
    SettingsMetadata envelopeLimitsTotalDocumentSizeAllowedInMBMetadata?;
    # 
    string allowOrganizationDocusignMonitorFree?;
    # When **true,** senders can only send an envelope to a recipient
    # that has a DocuSign account.
    # 
    # **Note:** Only Account Administrators can change this setting
    string signerMustHaveAccount?;
    SettingsMetadata documentConversionRestrictionsMetadata?;
    # When **true,** [Managed Stamps](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=cex1583277417267.html) are enabled
    string allowManagedStamps?;
    SettingsMetadata allowDelegatedSigningMetadata?;
    SettingsMetadata useDocuSignExpressSignerCertificateMetadata?;
    SettingsMetadata allowIDVPlatformMetadata?;
    SettingsMetadata enableSequentialSigningAPIMetadata?;
    SettingsMetadata enableContactSuggestionsMetadata?;
    # When **true,** account users must accept supplemental documents when signing
    string supplementalDocumentsMustAccept?;
    # Boolean that specifies whether the signers of the envelopes from this account use a signature with a DocuSign chrome around it or not
    string chromeSignatureEnabled?;
    # Specifies whether the account is able to
    # manage rules that [transfer ownership](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=xqx1583277378404.html)
    # of envelopes within the same account.
    string allowEnvelopeCustodyTransfer?;
    # 
    string enableESignAPIHourlyLimitManagement?;
    SettingsMetadata signerAttachCertificateToEnvelopePDFMetadata?;
    # When **true,** the account can be managed on a per-user basis.
    # 
    # **Note:** Only Admin users can change this setting
    string allowAccountManagementGranular?;
    # When **true** and `documentRetention` is set, document fields and metadata are also purged after the document retention period ends. The default value is **false.**
    # 
    # **Note:** Only Admins can change this setting
    string documentRetentionPurgeTabs?;
    # 
    string enableDSigIDCheckRemoteForQESPens?;
    # Boolean that specifies whether to opt in for Signing v02 on Mobile Devices functionality
    string optInMobileSigningV02?;
    SettingsMetadata showCompleteDialogInEmbeddedSessionMetadata?;
    # When **true,** enables PowerForms for the account.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string enablePowerForm?;
    # Specifies the time zone
    # to use in the UI.
    # 
    # Valid values are:
    # 
    # - `TZ_01_AfghanistanStandardTime`
    # - `TZ_02_AlaskanStandardTime`
    # - `TZ_03_ArabStandardTime`
    # - `TZ_04_ArabianStandardTime`
    # - `TZ_05_ArabicStandardTime`
    # - `TZ_06_ArgentinaStandardTime`
    # - `TZ_07_AtlanticStandardTime`
    # - `TZ_08_AUS_CentralStandardTime`
    # - `TZ_09_AUS_EasternStandardTime`
    # - `TZ_10_AzerbaijanStandardTime`
    # - `TZ_11_AzoresStandardTime`
    # - `TZ_12_BangladeshStandardTime`
    # - `TZ_13_CanadaCentralStandardTime`
    # - `TZ_14_CapeVerdeStandardTime`
    # - `TZ_15_CaucasusStandardTime`
    # - `TZ_16_CentralAustraliaStandardTime`
    # - `TZ_17_CentralAmericaStandardTime`
    # - `TZ_18_CentralAsiaStandardTime`
    # - `TZ_19_CentralBrazilianStandardTime`
    # - `TZ_20_CentralEuropeStandardTime`
    # - `TZ_21_CentralEuropeanStandardTime`
    # - `TZ_22_CentralPacificStandardTime`
    # - `TZ_23_CentralStandardTime`
    # - `TZ_24_CentralStandardTimeMexico`
    # - `TZ_25_ChinaStandardTime`
    # - `TZ_26_DatelineStandardTime`
    # - `TZ_27_E_AfricaStandardTime`
    # - `TZ_28_E_AustraliaStandardTime`
    # - `TZ_29_E_EuropeStandardTime`
    # - `TZ_30_E_SouthAmericaStandardTime`
    # - `TZ_31_EasternStandardTime`
    # - `TZ_32_EgyptStandardTime`
    # - `TZ_33_EkaterinburgStandardTime`
    # - `TZ_34_FijiStandardTime`
    # - `TZ_35_FLE_StandardTime`
    # - `TZ_36_GeorgianStandardTime`
    # - `TZ_37_GMT_StandardTime`
    # - `TZ_38_GreenlandStandardTime`
    # - `TZ_39_GreenwichStandardTime`
    # - `TZ_40_GTB_StandardTime`
    # - `TZ_41_HawaiianStandardTime`
    # - `TZ_42_IndiaStandardTime`
    # - `TZ_43_IranStandardTime`
    # - `TZ_44_IsraelStandardTime`
    # - `TZ_45_JordanStandardTime`
    # - `TZ_46_KaliningradStandardTime`
    # - `TZ_47_KamchatkaStandardTime`
    # - `TZ_48_KoreaStandardTime`
    # - `TZ_49_MagadanStandardTime`
    # - `TZ_50_MauritiusStandardTime`
    # - `TZ_51_MidAtlanticStandardTime`
    # - `TZ_52_MiddleEastStandardTime`
    # - `TZ_53_MontevideoStandardTime`
    # - `TZ_54_MoroccoStandardTime`
    # - `TZ_55_MountainStandardTime`
    # - `TZ_56_MountainStandardTimeMMexico`
    # - `TZ_57_MyanmarStandardTime`
    # - `TZ_58_N_CentralAsiaStandardTime`
    # - `TZ_59_NamibiaStandardTime`
    # - `TZ_60_NepalStandardTime`
    # - `TZ_61_NewZealandStandardTime`
    # - `TZ_62_NewfoundlandStandardTime`
    # - `TZ_63_NorthAsiaEastStandardTime`
    # - `TZ_64_NorthAsiaStandardTime`
    # - `TZ_65_PacificSAStandardTime`
    # - `TZ_66_PacificStandardTime`
    # - `TZ_67_PacificStandardTimeMexico`
    # - `TZ_68_PakistanStandardTime`
    # - `TZ_69_ParaguayStandardTime`
    # - `TZ_70_RomanceStandardTime`
    # - `TZ_71_RussianStandardTime`
    # - `TZ_72_SAEasternStandardTime`
    # - `TZ_73_SAPacificStandardTime`
    # - `TZ_74_SAWesternStandardTime`
    # - `TZ_75_SamoaStandardTime`
    # - `TZ_76_SE_AsiaStandardTime`
    # - `TZ_77_SingaporeStandardTime`
    # - `TZ_78_SouthAfricaStandardTime`
    # - `TZ_79_SriLankaStandardTime`
    # - `TZ_80_SyriaStandardTime`
    # - `TZ_81_TaipeiStandardTime`
    # - `TZ_82_TasmaniaStandardTime`
    # - `TZ_83_TokyoStandardTime`
    # - `TZ_84_TongaStandardTime`
    # - `TZ_85_TurkeyStandardTime`
    # - `TZ_86_UlaanbaatarStandardTime`
    # - `TZ_87_US_EasternStandardTime`
    # - `TZ_88_USMountainStandardTime`
    # - `TZ_89_VenezuelaStandardTime`
    # - `TZ_90_VladivostokStandardTime`
    # - `TZ_91_W_AustraliaStandardTime`
    # - `TZ_92_W_CentralAfricaStandardTime`
    # - `TZ_93_W_EuropeStandardTime`
    # - `TZ_94_WestAsiaStandardTime`
    # - `TZ_95_WestPacificStandardTime`
    # - `TZ_96_YakutskStandardTime`
    string timezoneOffsetUI?;
    # When **true,** a signer can draw their signature in each
    # location where a sign or initial tab exists. This functionality
    # is typically used for mobile signing.
    # 
    # **Note:** Only Admin users can change this setting
    string senderCanSignInEachLocation?;
    SettingsMetadata allowEnvelopeCorrectMetadata?;
    SettingsMetadata allowWebFormsMetadata?;
    SettingsMetadata signingUiVersionMetadata?;
    SettingsMetadata finishReminderMetadata?;
    # 
    string allowConnectUnifiedPayloadUI?;
    # When **true,** signers cannot upload custom image files of their signature and initials.
    # 
    # **Note:** Only Admin users can change this setting
    string disableUploadSignature?;
    SettingsMetadata enforceTlsEmailsMetadata?;
    SettingsMetadata senderMustAuthenticateSigningMetadata?;
    SettingsMetadata signDateTimeAccountLanguageOverrideMetadata?;
    SettingsMetadata canSelfBrandSendMetadata?;
    SettingsMetadata guidedFormsHtmlAllowedMetadata?;
    SettingsMetadata enableIDFxIntuitKBAMetadata?;
    # 
    string idfxPhoneAuthenticationOverride?;
    AddressInformation billingAddress?;
    # When **true,** the User Sharing feature is disabled for the account
    string disableUserSharing?;
    SettingsMetadata enableDSigIDCheckRemoteForQESPensMetadata?;
    # When **true,** in-person signing is enabled for the account
    string inPersonSigningEnabled?;
    SettingsMetadata require21CFRpt11ComplianceMetadata?;
    # Boolean that specifies whether Signing and App Extensions are allowed
    string allowSigningExtensions?;
    SettingsMetadata envelopeIntegrationAllowedMetadata?;
    SettingsMetadata canUseSalesforceOAuthMetadata?;
    # 
    string allowRecipientConnect?;
    # 
    string allowSendingEnvelopesOnBehalfOfOthers?;
    # The policy for adding a digital certificate to downloaded, printed, and emailed documents. 
    # 
    # Possible values are: 
    # 
    # - `no_sign`
    # - `no_sign_allow_user_override`
    # - `yes_sign` (Specifies that PDF files downloaded from the platform are signed.)
    # 
    # **Note:** Only Admin users can change this setting
    string pkiSignDownloadedPDFDocs?;
    SettingsMetadata setRecipEmailLangMetadata?;
    SettingsMetadata allowAgentNameEmailEditMetadata?;
    SettingsMetadata enableClickPlusDynamicContentMetaData?;
    SettingsMetadata inPersonIDCheckQuestionMetadata?;
    # Boolean that specifies whether a Connect configuration can use HTTP listeners
    string allowConnectHttpListenerConfigs?;
    # Boolean that specifies whether users can override phone authentication
    string allowPhoneAuthOverride?;
    SettingsMetadata enablePaymentProcessingMetadata?;
    # The maximum number of custom stamps
    string maxNumberOfCustomStamps?;
    SettingsMetadata allowOfflineSigningMetadata?;
    SettingsMetadata useConsumerDisclosureWithinAccountMetadata?;
    SettingsMetadata allowDelayedRoutingMetadata?;
    # 
    string allowDelegatedSigning?;
    SettingsMetadata allowIDVLevel1Metadata?;
    # Specifies whether eNote eOriginal integration is enabled
    string allowENoteEOriginal?;
    # 
    @jsondata:Name {value: "dss_SIGN_28411_EnableLeavePagePrompt_RadminOption"}
    string dssSIGN28411EnableLeavePagePromptRadminOption?;
    # 
    string allowTransactionsWorkspaceOriginal?;
    # When **true,** recipients can sign on a mobile device.
    # 
    # **Note:** Only Admin users can change this setting
    string signerCanSignOnMobile?;
    SettingsMetadata commentEmailShowMessageTextMetadata?;
    SettingsMetadata allowSetEmbeddedRecipientStartURLMetadata?;
    # 
    string guidedFormsHtmlConversionPolicy?;
    # Org level flag that determines the availability to perform Third Party Notary (3PN) actions
    string allowOrganizationToUseThirdPartyElectronicNotary?;
    # 
    string enableClickPlusCustomFields?;
    SettingsMetadata enableReservedDomainMetadata?;
    # When **true,** the account can
    # configure and use signature pads for their recipients.
    # 
    # **Note:** Only Admin users can change this setting
    string allowExternalSignaturePad?;
    SettingsMetadata guidedFormsHtmlConversionPolicyMetadata?;
    SettingsMetadata enableSendingTagsFontSettingsMetadata?;
    # When **true,** simplified sending is enabled for the account. The default value is **false.**
    string simplifiedSendingEnabled?;
    SettingsMetadata allowEnvelopeCustomFieldsMetadata?;
    SettingsMetadata idCheckRequiredMetadata?;
    SettingsMetadata setRecipSignLangMetadata?;
    # When **true,**
    # an account administrator can to turn on reminders
    # and expiration defaults for the account.
    # 
    # **Note:** Only Admin users can change this setting
    string allowReminders?;
    # Valid values are:
    # 
    # - `docusign`
    # - `account`
    string validationsBrand?;
    SettingsMetadata optInMobileSigningV02Metadata?;
    # Account-level flag that determines the ability to perform In-Person Electronic Notary (IPEN) actions
    string allowInPersonElectronicNotary?;
    # Boolean that specifies whether a member of an account can send templates without the tags being stripped out, even when the account is configured to let its users express send only (they cannot use the tagger)
    string expressSendAllowTabs?;
    # A list of ID check configuration objects
    IdCheckConfiguration[] idCheckConfigurations?;
    # Reserved for DocuSign
    string anchorTagVersionedPlacementEnabled?;
    # The maximum number of users per signing group. The default value is `50`. This setting is only shown in responses that list account settings.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string maximumUsersPerSigningGroup?;
    SettingsMetadata allowManagedStampsMetadata?;
    SettingsMetadata allowOrganizationDocusignMonitorFreeMetadata?;
    SettingsMetadata allowSafeBioPharmaSignerCertificateMetadata?;
    # 
    string allowSMSDelivery?;
    # 
    string isConnectDocumentFieldsEnabled?;
    SettingsMetadata allowManagingEnvelopesOnBehalfOfOthersMetadata?;
    # 
    string enableIDFxIntuitKBA?;
    SettingsMetadata sendLockoutRecipientNotificationMetadata?;
    # When true,
    # the account can use the
    # certified deliveries recipient type
    string sendToCertifiedDeliveryEnabled?;
    SettingsMetadata allowDocumentVisibilityMetadata?;
    SettingsMetadata enableSmartContractsMetadata?;
    # 
    string readOnlyMode?;
    SettingsMetadata enableSigningExtensionCommentsMetadata?;
    SettingsMetadata disablePurgeNotificationsForSenderMetadata?;
    # 
    string enableSMSDeliveryAdditionalNotification?;
    SettingsMetadata disableMobileAppMetadata?;
    SettingsMetadata commentsAllowEnvelopeOverrideMetadata?;
    # 
    string enableSearchServiceAzureUri?;
    # When **true,** envelopes sent by this account automatically have the envelope ID stamped in the document margins, unless the sender selects not to have the documents stamped
    string envelopeStampingDefaultValue?;
    # 
    string allowIDVPlatform?;
    SettingsMetadata enableDSigEUAdvancedPensMetadata?;
    # When **true,** this account can use the Editor recipient type.
    # 
    # **Note:** Only Admin users can change this setting
    string enableSendToManage?;
    # When **true,**
    # when initiating correction of an in-flight envelope
    # the sender starts in advanced correct mode
    string startInAdvancedCorrect?;
    # When **true,**
    # signers must log in to the DocuSign platform to sign an envelope.
    # 
    # **Note:** Only Admin users can change this setting
    string signerMustLoginToSign?;
    SettingsMetadata enableSocialIdLoginMetadata?;
    SettingsMetadata showTutorialsMetadata?;
    # 
    @jsondata:Name {value: "dss_EnableSignatureTypeCustomTagRadmin_RadminOption"}
    string dssEnableSignatureTypeCustomTagRadminRadminOption?;
    SettingsMetadata externalSignaturePadTypeMetadata?;
    # When **true,** account users can set their own
    # [time zone settings](https://support.docusign.com/s/articles/How-do-I-modify-time-zone-settings-for-my-account).
    # 
    # **Note:** Only Admin users can change this setting
    string allowMemberTimeZone?;
    SettingsMetadata defaultToAdvancedEnvelopesFilterFormMetadata?;
    # When **true,**
    # [eHanko stamps](https://support.docusign.com/s/document-item?bundleId=jux1643235969954&topicId=dys1578456666697.html)
    # are enabled
    string allowEHankoStamps?;
    # When **true,** recipients can
    # upload multiple signer attachments with a single attachment.
    # 
    # **Note:** Only Admin users can change this setting
    string allowMultipleSignerAttachments?;
    SettingsMetadata signerInSessionUseEnvelopeCompleteEmailMetadata?;
    SettingsMetadata autoNavRuleMetadata?;
    # When **true,** senders can use OpenTrust signer certificates.
    # 
    # **Note:** Only Admin users can change this setting
    string allowOpenTrustSignerCertificate?;
    # Boolean that specifies whether a member of an account can express send (without tags) or must send with tags on documents
    string expressSend?;
    SettingsMetadata idCheckExpireMinutesMetadata?;
    # Deprecated
    string allowSocialIdLogin?;
    SettingsMetadata showConditionalRoutingOnSendMetadata?;
    # 
    string useNewEnvelopeSearch?;
    SettingsMetadata allowInPersonElectronicNotaryMetadata?;
    SettingsMetadata enableEsignCommunitiesMetadata?;
    # When **true,** enables direct PowerForms for an account. Direct PowerForms are in-session PowerForms.
    # 
    # **Note:** Only Admin users can change this setting
    string enablePowerFormDirect?;
    SettingsMetadata enableSignWithNotaryMetadata?;
    SettingsMetadata allowSigningGroupsMetadata?;
    # When **true,**
    # single sign-on (SSO) is enabled
    string singleSignOnEnabled?;
    SettingsMetadata allowOrganizationSsoManagementMetadata?;
    # When **true,**
    # the account can use the API.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string usesAPI?;
    # 
    @jsondata:Name {value: "AllowConnectIdentityVerificationUI"}
    string allowConnectIdentityVerificationUI?;
    # When **true,** the text of comments is included in email notifications when a comment is posted.
    # 
    # **Note:**  If the envelope requires additional recipient authentication, comment text is not included
    string commentEmailShowMessageText?;
    SettingsMetadata enableClickPlusCustomStyleMetaData?;
    SettingsMetadata maximumSigningGroupsMetadata?;
    # When **true,** the account requires external management of users.
    # 
    # **Note:** Only Admin users can change this setting
    string requireExternalUserManagement?;
    SettingsMetadata recipientsCanSignOfflineMetadata?;
    SettingsMetadata allowSigningInsightsMetadata?;
    SettingsMetadata allowSupplementalDocumentsMetadata?;
    SettingsMetadata requireExternalUserManagementMetadata?;
    # When **true,**
    # enables validations
    string validationsEnabled?;
    SettingsMetadata allowResourceFileBrandingMetadata?;
    # When **true,**
    # the
    # [watermark feature](https://support.docusign.com/s/articles/How-do-I-manage-the-watermark-for-In-Process-envelopes-sent-from-my-account)
    # is enabled for the account
    string waterMarkEnabled?;
    # 
    string enableSearchUI?;
    SettingsMetadata allowRemindersMetadata?;
    # Boolean that specifies whether phone authentication is enabled for the account
    string allowPhoneAuthentication?;
    # Names of electronic or digital signature providers that can be used
    string[] signatureProviders?;
    # When **true,**
    # the Certificate of Completion is included in the PDF of the envelope documents
    # when it is downloaded.
    # 
    # **Note:** Only Admin users can change this setting
    string signerAttachCertificateToEnvelopePDF?;
    # When **true,** envelope documents are included as a PDF file attachment to "signing completed" emails.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string attachCompletedEnvelope?;
    SettingsMetadata enableWebFormsSeparateUserPermissionsMetadata?;
    # 
    string cfr21SimplifiedSigningEnabled?;
    # Sets a document retention period, which controls the number of days that DocuSign retains documents after they have reached a completed,declined, or voided state. When document retention is enabled for the account, the default value is `356` days
    string documentRetention?;
    SettingsMetadata allowPrivateSigningGroupsMetadata?;
    # When **true,** conditional fields can be used in documents.
    # 
    # **Note:** Only Admin users can change this setting
    string conditionalFieldsEnabled?;
    SettingsMetadata requireDeclineReasonMetadata?;
    # When **true,** enables the account administrator
    # to control envelope stamping for an account
    # (stamping the `envelopeId` in the document margins).
    # 
    # **Note:** This setting can be changed only
    # by Admin users, and only if the account-level
    # setting `enableEnvelopeStampingByDSAdmin` is set to **true.**
    string enableEnvelopeStampingByAccountAdmin?;
    # 
    @jsondata:Name {value: "dss_EnableProvisioningPenConfiguration_RadminOption"}
    string dssEnableProvisioningPenConfigurationRadminOption?;
    SettingsMetadata envelopeStampingDefaultValueMetadata?;
    # Reserved for DocuSign
    string useNewBlobForPdf?;
    SettingsMetadata allowBulkSendMetadata?;
    # When **true,** enables the account to set the AutoNav rule setting, which enables a sender to override the auto-navigation setting per envelope.
    # 
    # **Note:** To change this setting, you must be a SysAdmin user or `EnableAutoNavByDSAdmin must be set
    string enableAutoNav?;
    # When **true,** Sign with Notary functionality is enabled for the account.
    # 
    # **Note:** Only Admin users can change this setting
    string enableSignWithNotary?;
    # The name on the account
    string accountName?;
    SettingsMetadata allowOrganizationToUseInPersonElectronicNotaryMetadata?;
    # When **true,** the account allows signing groups. This setting is only shown in responses that list account settings. This property is read-only
    string allowSigningGroups?;
    SettingsMetadata allowConsumerDisclosureOverrideMetadata?;
    # Boolean that specifies whether notifications can include the envelope's signed document
    string allowDocumentsOnSignedEnvelopes?;
    # When **true,** signers cannot view envelope history
    string disableSignerHistoryView?;
    SettingsMetadata socialIdRecipAuthMetadata?;
    # 
    string allowOrganizationToUseRemoteNotary?;
    SettingsMetadata allowSMSDeliveryMetadata?;
    SettingsMetadata enableClickPlusCustomFieldsMetaData?;
    # 
    string sbsTransactionLevel?;
    SettingsMetadata enableIDFxAccountlessSMSAuthForPart11Metadata?;
    # When **true** and comments are enabled for the account, senders can disable comments for an envelope through the **Advanced Options** menu that appears during the sending process
    string commentsAllowEnvelopeOverride?;
    # 
    string enableContactSuggestions?;
    SettingsMetadata hidePricingMetadata?;
    SettingsMetadata allowEnvelopePublishReportingMetadata?;
    # Reserved for DocuSign
    string universalSignatureOptIn?;
    SettingsMetadata allowIDVLevel2Metadata?;
    SettingsMetadata allowSigningExtensionsMetadata?;
    SettingsMetadata exitPromptMetadata?;
    SettingsMetadata useNewEnvelopeSearchMetadata?;
    SettingsMetadata selfSignedRecipientEmailDocumentMetadata?;
    SettingsMetadata allowSignatureStampsMetadata?;
    # 
    string enableCommentsHistoryDownloadInSigning?;
    SettingsMetadata enableDSigIDCheckInPersonForQESPensMetadata?;
    # 
    string finishReminder?;
    SettingsMetadata pdfMaxChunkedUploadTotalSizeMetadata?;
    SettingsMetadata enableSendToIntermediaryMetadata?;
    SettingsMetadata validationsBrandMetadata?;
    SettingsMetadata disableUploadSignatureMetadata?;
    # Reserved for DocuSign
    string signingUiVersion?;
    SettingsMetadata validationsEnabledMetadata?;
    SettingsMetadata optOutAutoNavTextAndTabColorUpdatesMetadata?;
    # When **true,** enables Advanced Payments for the account
    string enableAdvancedPayments?;
    # This property determines how template anchor tabs are applied.
    # 
    # Valid values are:
    # 
    # - `document`: Anchor tabs are applied only to the document that you specify. 
    # - `envelope`: Anchor tabs are applied to all of the documents in the envelope associated with the template.
    # 
    # **Note:** When you are using the `anchorPopulationScope` property with a Composite Template, the value `document` is supported only with a single server template and a single inline template.
    string anchorPopulationScope?;
    SettingsMetadata checkForMultipleAdminsOnAccountMetadata?;
    SettingsMetadata useEnvelopeSearchMixedModeMetadata?;
    SettingsMetadata allowSigningRadioDeselectMetadata?;
    SettingsMetadata allowOrganizationToUseThirdPartyElectronicNotaryMetadata?;
    # Specifies whether
    # [envelope custom fields](https://support.docusign.com/s/document-item?bundleId=jux1643235969954&topicId=mns1578456285568.html)
    # are enabled
    string allowEnvelopeCustomFields?;
    # 
    string checkForMultipleAdminsOnAccount?;
    # Boolean that specifies whether to use a shorter/wider format when generating the CFR Part 11 signature image
    string cfrUseWideImage?;
    # 
    string enableAdvancedEnvelopesSearch?;
    # When **true,** the account can use the `requireSignOnPaper` option.
    # 
    # **Note:** Only Admin users can change this setting
    string enableRequireSignOnPaper?;
    # 
    string pdfMaxIndividualUploadSize?;
    # When **true,** payment processing is enabled for this account.
    # 
    # **Note:** This setting can be changed only by Admin users, and only if the account-level setting `allowPaymentProcessing` is set
    string enablePaymentProcessing?;
    TabAccountSettings tabAccountSettings?;
    SettingsMetadata anchorTagVersionedPlacementMetadataEnabled?;
    # When **true,** Conditional Routing options display to senders during the sending experience
    string showConditionalRoutingOnSend?;
    SettingsMetadata showMaskedFieldsWhenDownloadingDocumentAsSenderMetadata?;
    # 
    string allowWebForms?;
    # Sets the account document upload restriction for non-account administrators. Valid values are:
    # 
    # - `no_restrictions`: There are no restrictions on the type of documents that can be uploaded.
    # - `allow_pdf_only`: Non-administrators can only upload PDF files.
    # - `no_upload`: Non-administrators cannot upload files.
    # 
    # **Note:** Only Admin users can change this setting
    string documentConversionRestrictions?;
    # Specifies the version of the email templates used in an account. If new signing is selected in a member's Admin page, the user is updated to the newest version (1.1), the minimum version of email supported for the account
    string emailTemplateVersion?;
    # Reserved for DocuSign
    string enableWitnessing?;
    SettingsMetadata allowEHankoStampsMetadata?;
    SettingsMetadata draftEnvelopeRetentionMetadata?;
    # The format for the signature time. Valid values are:
    # 
    # - `none`
    # - `HH:mm`
    # - `h:mm`
    # - `HH:mm:ss`
    # - `h:mm:ss`
    string signTimeFormat?;
    # When **true,** the recipient of an envelope sent from this account can reassign it to another person.
    # 
    # **Note:** Only Admin users can change this setting
    string allowSignerReassign?;
    SettingsMetadata hideAccountAddressInCoCMetadata?;
    SettingsMetadata allowPhoneAuthOverrideMetadata?;
    SettingsMetadata allowThirdPartyElectronicNotaryMetadata?;
    SettingsMetadata enableSearchServiceAzureUriMetadata?;
    SettingsMetadata allowOpenTrustSignerCertificateMetadata?;
    SettingsMetadata enableRecipientDomainValidationMetadata?;
    SettingsMetadata enableSigningOrderSettingsForAccountMetadata?;
    # When **true,** recipients receiving envelopes from this account can override auto-navigation functionality.
    # 
    # **Note:** Only Admin users can change this setting
    string recipientSigningAutoNavigationControl?;
    SettingsMetadata signerLoginRequirementsMetadata?;
    SettingsMetadata conditionalFieldsEnabledMetadata?;
    SettingsMetadata supplementalDocumentsMustReadMetadata?;
    SettingsMetadata signerMustLoginToSignMetadata?;
    # 
    string allowManagingEnvelopesOnBehalfOfOthers?;
    SettingsMetadata envelopeIntegrationEnabledMetadata?;
    # Boolean that specifies whether to hide the pricing functionality for an account
    string hidePricing?;
    # 
    string allowIDVLevel3?;
    # 
    string allowIDVLevel2?;
    SettingsMetadata allowSendToCertifiedDeliveryMetadata?;
    SettingsMetadata sharedTemplateFoldersMetadata?;
    SettingsMetadata enforceTemplateNameUniquenessMetadata?;
    # When **true,** emails are not sent to the in-session (embedded) recipients on an envelope.
    # 
    # **Note:** Only Admin users can change this setting
    string inSessionSuppressEmails?;
    # Boolean that specifies whether the account uses the digital signature provider platform to eSign
    string useSignatureProviderPlatform?;
    SettingsMetadata allowPhoneAuthenticationMetadata?;
    # When **true,** the account uses an Electronic Record and
    # Signature Disclosure Statement.
    # 
    # **Note:** Only Admin users can change this setting
    string useConsumerDisclosure?;
    # 
    string enableRecipientMayProvidePhoneNumber?;
    SettingsMetadata enableDSProMetadata?;
    # When **true,**
    # the time shows the AM or PM indicator
    string signTimeShowAmPm?;
    # 
    string advancedSearchEnableTabField?;
    # When **true,** payment processing is enabled for the account.
    # 
    # **Note:** Only Admin users can change this setting
    string allowPaymentProcessing?;
    # When **true,** the template name must be unique
    string enforceTemplateNameUniqueness?;
    # Specifies how auto-navigation works.
    # Valid values are:
    # 
    # - `off`
    # - `required_fields`
    # - `required_and_blank_fields`
    # - `all_fields`
    # - `page_then_required_fields`
    # - `page_then_required_and_blank_fields`
    # - `page_then_all_fields`
    string autoNavRule?;
    SettingsMetadata anchorPopulationScopeMetadata?;
    # When **true,**
    # do not require authentication prompt for viewing completed envelopes
    string skipAuthCompletedEnvelopes?;
    SettingsMetadata allowParticipantRecipientTypeMetadata?;
    # 
    string enableClickPlusConditionalContent?;
    SettingsMetadata allowSocialIdLoginMetadata?;
    # 
    string pdfMaxChunkedUploadTotalSize?;
    # When **true,**
    # the account admin can enable the Send to Intermediary
    # feature on the account
    string allowSendToIntermediary?;
    # 
    string enableIDFxAccountlessSMSAuthForPart11?;
    # When **true,** the mobile app distributor key is prevented from connecting for account users
    string disableMobileApp?;
    # The number of active custom stamps associated with the account. DocuSign calculates this number automatically. This property is only visible to the DocuSign account manager
    string numberOfActiveCustomStamps?;
    # Sets how self-signed documents are presented to the email recipients.
    # Valid values are:
    # 
    # - `include_pdf`: A PDF of the completed document is attached to the email.
    # - `include_link`: A secure link to the self-signed documents is included
    #    in the email.
    # 
    # **Note:** Only Admin users can change this setting
    string selfSignedRecipientEmailDocument?;
    # When **true,**
    # recipients are required
    # to use a 21 CFR part 11-compliant signing experience.
    # 
    # **Note:** Only Admin users can change this setting
    string require21CFRpt11Compliance?;
    SettingsMetadata autoProvisionSignerAccountMetadata?;
    SettingsMetadata disableMobileSendingMetadata?;
    SettingsMetadata enableAutoNavMetadata?;
    # Reserved for DocuSign
    string captureVoiceRecording?;
    # The RSA rule set used with the account.
    # 
    # **Note:**
    # Only Admin users can change this setting. Modifying this value may disrupt
    # your ID Check capability.
    # Ensure you have the correct value before changing it
    string rsaVeridRuleset?;
    # Reserved for DocuSign
    string useDerivedKeys?;
    SettingsMetadata supplementalDocumentsMustAcceptMetadata?;
    SettingsMetadata sendingTagsFontSizeMetadata?;
    SettingsMetadata allowSendingEnvelopesOnBehalfOfOthersMetadata?;
    SettingsMetadata enableSequentialSigningUIMetadata?;
    SettingsMetadata signerShowSecureFieldInitialValuesMetadata?;
    # 
    string useMultiAppGroupsData?;
    SettingsMetadata useNewEnvelopeSearchOnlyWithSearchTermMetadata?;
    SettingsMetadata signerAttachConcatMetadata?;
    SettingsMetadata allowAutoNavSettingsMetadata?;
    # 
    string allowRemoteNotary?;
    # When **true,** enables conversation functionality
    string enableSigningExtensionConversations?;
    SettingsMetadata enableCustomerSatisfactionMetricTrackingMetadata?;
    # 
    string allowConnectOAuthUI?;
    SettingsMetadata mobileSessionTimeoutMetadata?;
    # Boolean that specifies whether an account can use Shared Template Folders
    string sharedTemplateFolders?;
    SettingsMetadata enableWitnessingMetadata?;
    # When **true,** the account can define the routing
    # order of recipients for envelopes sent by using the eSignature API.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string enableSequentialSigningAPI?;
    SettingsMetadata allowOrganizationsMetadata?;
    # When **true,** enables responsive signing
    string enableResponsiveSigning?;
    # When **true,**
    # resource files can be uploaded in branding
    string allowResourceFileBranding?;
    # When **true,**
    # signers are
    # required to use SAFE digital signatures
    string useSAFESignerCertificates?;
    # 
    string idfxKBAAuthenticationOverride?;
    SettingsMetadata documentRetentionMetadata?;
    SettingsMetadata allowExpressSignerCertificateMetadata?;
    SettingsMetadata allowAgreementOrchestrationsMetadata?;
    # Boolean that specifies whether [DocuSign Admin](/docs/admin-api/) is enabled for the account
    string allowOrganizations?;
    SettingsMetadata advancedSearchEnableTemplateIdFieldMetadata?;
    # When **true,** [Conditional Routing](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=aqm1578456487908.html) is enabled for the account as part of DocuSign's Advanced Recipient Routing feature
    string allowAdvancedRecipientRoutingConditional?;
    # 
    string useNewEnvelopeSearchOnlyWhenSearchingAfterDate?;
    SettingsMetadata allowCDWithdrawMetadata?;
    SettingsMetadata allowDataDownloadMetadata?;
    # Configures the Document Visibility feature for the account. Valid values are:
    # 
    # - `Off`: Document Visibility is not active for the account.
    # - `MustSignToViewUnlessSenderAccount`: Document Visibility is enabled for all envelopes sent from the account. Any member of the sending account can view all of the documents in an envelope.
    # - `MustSignToViewUnlessSender`: Document Visibility is enabled for all envelopes sent from the account. Only the sender can view all of the documents in an envelope.
    # - `SenderCanSetMustSignToViewUnlessSenderAccount`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope, all of the documents within it are still visible to any member of the sending account.
    # Vd- `SenderCanSetMustSignToViewUnlessSender`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope, all of the documents in the envelope are visible only to the sender.
    # 
    # **Note:** For this configuration to take effect, `allowDocumentVisibility` must be set to **true.**
    string documentVisibility?;
    SettingsMetadata enableAdvancedPaymentsMetadata?;
    # Determines when a user's authentication with the account expires. Valid values are:
    # 
    # - `always`: Users are required to authenticate each time.
    # - `variable`: If the authentication for a user is valid and falls within the value for the `idCheckExpireDays` property, the user is not required to authenticate again.
    # 
    # **Note:** Only Admin users can change this setting
    string idCheckExpire?;
    SettingsMetadata advancedSearchEnableTabFieldMetadata?;
    SettingsMetadata enableCommentsHistoryDownloadInSigningMetadata?;
    SettingsMetadata signDateFormatMetadata?;
    # When **true,** the account can use SMS authentication.
    # 
    # **Note:** Only Admin users can change this setting
    string enableSMSAuthentication?;
    SettingsMetadata dataPopulationScopeMetadata?;
    # Reserved for DocuSign
    string enableRecipientDomainValidation?;
    # The smallest screen allowed
    string wurflMinAllowableScreenSize?;
    SettingsMetadata disableMultipleSessionsMetadata?;
    SettingsMetadata cfr21SimplifiedSigningEnabledMetadata?;
    # 
    string enableDSigIDVerificationPremierPens?;
    SettingsMetadata timezoneOffsetUIMetadata?;
    SettingsMetadata idCheckExpireDaysMetadata?;
    SettingsMetadata adoptSigConfigMetadata?;
    # The RSA account name.
    # 
    # **Note:**
    # Only Admin users can change this setting. Modifying this value may disrupt
    # your ID Check capability.
    # Ensure you have the correct value before changing it
    string rsaVeridAccountName?;
    AccountNotification accountNotification?;
    SettingsMetadata disableSignerHistoryViewMetadata?;
    SettingsMetadata enableInboxRelevanceSortForRecentAccountsMetadata?;
    # Reserved for DocuSign
    string allowConnectSendFinishLater?;
    # 
    string enableCombinedPDFDownloadForSBS?;
    # The maximum number of signing groups allowed on the account. The default value is `50`. This setting is only shown in responses that list account settings.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string maximumSigningGroups?;
    # When **true,** account administrators can self-brand their signing console through the DocuSign console
    string canSelfBrandSign?;
    # UTC date/time format for the account
    string accountDateTimeFormat?;
    # When **true,** senders can allow recipients to provide a phone number for the Phone Authentication process.
    # 
    # **Note:** Only Admin users can change this setting
    string phoneAuthRecipientMayProvidePhoneNumber?;
    SettingsMetadata allowExternalSignaturePadMetadata?;
    SettingsMetadata enableSendToManageMetadata?;
    # When **true,** the Advanced Correction feature is enabled for this account
    string advancedCorrect?;
    SettingsMetadata allowPaymentProcessingMetadata?;
    # Reserved for DocuSign
    string enableDSPro?;
    SettingsMetadata expressSendAllowTabsMetadata?;
    # When **true,** the account can define the routing order
    # of recipients for envelopes sent by using the DocuSign application.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string enableSequentialSigningUI?;
    SettingsMetadata signTimeShowAmPmMetadata?;
    SettingsMetadata bccEmailArchiveMetadata?;
    # 
    string enableClickPlus?;
    # When **true,** senders can download form data from the envelopes that they send.
    # 
    # **Note:** Only Admin users can change this setting
    string allowDataDownload?;
    SettingsMetadata cfrUseWideImageMetadata?;
    @jsondata:Name {value: "EnvelopeLimitsTotalDocumentSizeAllowedInMBEnabledMetadata"}
    SettingsMetadata envelopeLimitsTotalDocumentSizeAllowedInMBEnabledMetadata?;
    # 
    string enableLargeFileSupport?;
    # Specifies how data is shared for tabs with the same tabLabel. Valid values are:
    # 
    # - `document`: Tabs in a document with the same label populate with the same data.
    # - `envelope`: Tabs in all documents in the envelope with the same label populate with the same data.
    # - `notset`:   Use the global account setting.
    # 
    # This setting applies to the following tab types:
    # 
    # - Check box
    # - Company
    # - Data field
    # - Drop-down list
    # - Full name
    # - Formula
    # - Note
    # - Title
    # 
    # **Note:** Only Admin users can change this setting. Changing this setting affects envelopes that have been sent but not completed
    string dataPopulationScope?;
    # The amount of idle activity time, in minutes, before a user is automatically logged out of the system. The minimum setting is 20 minutes and the maximum setting is 120 minutes
    string sessionTimeout?;
    SettingsMetadata disableStyleSignatureMetadata?;
    SettingsMetadata enableInBrowserEditorMetadata?;
    SettingsMetadata useAccountLevelEmailMetadata?;
    # 
    string enableWebFormsSeparateUserPermissions?;
    # 
    string enableAgreementActionsForCLM?;
    SettingsMetadata enableSignOnPaperMetadata?;
    SettingsMetadata allowExpressionMetadata?;
    # 
    string optInUniversalSignatures?;
    # When **true,** senders can set the email language to use for
    # each recipient.
    # 
    # **Note:** Only Admin users can change this setting
    string setRecipEmailLang?;
    # Deprecated
    string enableSocialIdLogin?;
    SettingsMetadata allowDocumentsOnSignedEnvelopesMetadata?;
    SettingsMetadata allowOcrOfEnvelopeDocumentsMetadata?;
    SettingsMetadata allowExtendedSendingResourceFileMetadata?;
    # 
    string useSmartContractsV1?;
    SettingsMetadata skipAuthCompletedEnvelopesMetadata?;
    SettingsMetadata inSessionSuppressEmailsMetadata?;
    # When **true,** IDV Level 1 is allowed. The default value is **false.**
    string allowIDVLevel1?;
    SettingsMetadata allowMergeFieldsMetadata?;
    # When **true,** envelope publishing reporting is enabled.
    # 
    # **Note:** Only Admin users can change this setting
    string allowEnvelopePublishReporting?;
    # Organization-level flag that determines the ability to perform In-Person Electronic Notary (IPEN) actions
    string allowOrganizationToUseInPersonElectronicNotary?;
    # Indicates if authentication is configured for the account. Valid values are:
    # 
    # - `always`: Authentication checks are performed on every envelope.
    # - `never`: Authentication checks are not performed on any envelopes.
    # - `optional`: Authentication is configurable per envelope.
    # 
    # **Note:** Only Admin users can change this setting
    string idCheckRequired?;
    SettingsMetadata enableAccessCodeGeneratorMetadata?;
    SettingsMetadata allowWhatsAppDeliveryMetadata?;
    SettingsMetadata authenticationCheckMetadata?;
    # Boolean that specifies whether disclosure documents can be included in envelopes
    string allowDocumentDisclosures?;
    SettingsMetadata allowIDVForEUQualifiedSignaturesMetadata?;
    SettingsMetadata enableLargeFileSupportMetadata?;
    SettingsMetadata useNewBlobForPdfMetadata?;
    SettingsMetadata advancedSearchEnableTemplateNameFieldMetadata?;
    # Shows the envelope integration rule for the account, which indicates whether custom admins can enable Connect for their accounts. Enumeration values are: 
    # 
    # - `not_allowed`
    # - `full` 
    # 
    # **Note:** Only SysAdmin users can change this setting.                                                                                 
    string envelopeIntegrationAllowed?;
    SettingsMetadata allowSignerReassignOverrideMetadata?;
    # When **true,** switches Signing Order to On by default for new envelopes
    string enableSigningOrderSettingsForAccount?;
    SettingsMetadata displayBetaSwitchMetadata?;
    SettingsMetadata signatureProvidersMetadata?;
    SettingsMetadata allowAccessCodeFormatMetadata?;
    # When **true,** the account can use
    # [merge fields](https://support.docusign.com/s/document-item?bundleId=evk1581360654067&topicId=ipy1581360621906.html)
    # with DocuSign for Salesforce
    string allowMergeFields?;
    SettingsMetadata signDateTimeAccountTimezoneOverrideMetadata?;
    SettingsMetadata startInAdvancedCorrectMetadata?;
    # 
    string hasRecipientConnectClaimedDomain?;
    # When **true,** senders can specify the visibility of the documents in an envelope at the recipient level
    string specifyDocumentVisibility?;
    SettingsMetadata enableAdvancedPowerFormsMetadata?;
    SettingsMetadata enableResponsiveSigningMetadata?;
    SettingsMetadata allowValueInsightsMetadata?;
    SettingsMetadata enableEnforceTlsEmailsSettingMetadata?;
    # Boolean that specifies whether to hide the account address in the Certificate of Completion
    string hideAccountAddressInCoC?;
    SettingsMetadata allowConnectSendFinishLaterMetadata?;
    # 
    string enableEsignCommunities?;
    SettingsMetadata enableTransactionPointMetadata?;
    SettingsMetadata enableSendToAgentMetadata?;
    SettingsMetadata senderCanSignInEachLocationMetadata?;
    # Boolean that specifies whether localized watermarks are displayed
    string showLocalizedWatermarks?;
    # When **true,** an "envelope complete" email is sent to an in-session
    # (embedded) or offline signer after DocuSign processes the envelope
    # if in-session emails are not suppressed.
    # 
    # **Note:** Only Admin users can change this setting
    string signerInSessionUseEnvelopeCompleteEmail?;
    # 
    string allowTransactionsWorkspace?;
    SettingsMetadata enableDSigIDVerificationPremierPensMetadata?;
    # When **true,** enables strikethrough formatting in documents
    string enableStrikeThrough?;
    SettingsMetadata enableCalculatedFieldsMetadata?;
    SettingsMetadata pkiSignDownloadedPDFDocsMetadata?;
    SettingsMetadata sendToCertifiedDeliveryEnabledMetadata?;
    SettingsMetadata enableRequireSignOnPaperMetadata?;
    # 
    string advancedSearchEnableTemplateNameField?;
    # Specifies whether the account has access to reports
    string allowEnvelopeReporting?;
    # 
    string allowUsersToAccessDirectory?;
    # When **true,** this account can use the Intermediary recipient type.
    # 
    # **Note:** Only Admin users can change this setting, and only if `allowSendToIntermediary` is set
    string enableSendToIntermediary?;
    # 
    string enableAgreementActionsForESign?;
    # Valid values are:
    # 
    # - `none`
    # - `life_sciences_part11`
    string validationsReport?;
    SettingsMetadata allowMultipleSignerAttachmentsMetadata?;
    # Boolean that specifies whether complete dialogs are displayed directly within an application in embedded signing sessions
    string showCompleteDialogInEmbeddedSession?;
    SettingsMetadata allowSharedTabsMetadata?;
    SettingsMetadata enableSignerAttachmentsMetadata?;
    SettingsMetadata enableSearchSiteSpecificApiMetadata?;
    SettingsMetadata enableRecipientMayProvidePhoneNumberMetadata?;
    # Specifies whether the account supports multiple brands
    string allowMultipleBrandProfiles?;
    SettingsMetadata enableAgreementActionsForESignMetadata?;
    # Sets the Digital Signature certificate requirements for sending envelopes.
    # Valid values are:
    # 
    # - `none`: A Digital Signature certificate is not required.
    # - `docusign_express`: Signers must use a DocuSign Express certificate.
    # - `docusign_personal`: Signers must use a DocuSign personal certificate.
    # - `safe`
    # - `open_trust`: Signers must use an OpenTrust certificate
    string requireSignerCertificateType?;
    SettingsMetadata enableDSigExpressPensMetadata?;
    SettingsMetadata idCheckExpireMetadata?;
    # 
    string allowSetEmbeddedRecipientStartURL?;
    # "true" if the account has permission to use the scheduled sending feature to send envelopes at a specified datetime in the future, "false" otherwise
    string allowDelayedRouting?;
    SettingsMetadata enableClickPlusConditionalContentMetaData?;
    AccountUISettings accountUISettings?;
    # A text field containing the question that an in-person signing host uses to collect personal information from the recipient. The recipient's response to this question is saved and can be viewed in the certificate associated with the envelope.
    # 
    # **Note:** Only Admin users can change this setting
    string inPersonIDCheckQuestion?;
    SettingsMetadata useNewEnvelopeSearchOnlyWhenSearchingAfterDateMetadata?;
    # 
    string allowAgreementOrchestrations?;
    # When **true,**
    # signers
    # are required to use Express Digital Signatures
    string useDocuSignExpressSignerCertificate?;
    SettingsMetadata specifyDocumentVisibilityMetadata?;
    # 
    string signDateTimeAccountTimezoneOverride?;
    # Reserved for DocuSign
    string enableTransactionPoint?;
    SettingsMetadata enableParticipantRecipientSettingMetadata?;
    SettingsMetadata allowScheduledSendingMetadata?;
    SettingsMetadata consumerDisclosureFrequencyMetadata?;
    SettingsMetadata enableSignOnPaperOverrideMetadata?;
    SettingsMetadata allowEnvelopeCustodyTransferMetadata?;
    # 
    string allowExternalLinkedAccounts?;
    SettingsMetadata validationsAllowedMetadata?;
    SettingsMetadata useSignatureProviderPlatformMetadata?;
    SettingsMetadata enableEnvelopeStampingByDSAdminMetadata?;
    SettingsMetadata singleSignOnEnabledMetadata?;
    SettingsMetadata allowMultipleBrandProfilesMetadata?;
    SettingsMetadata enableAgreementActionsForCLMMetadata?;
    SettingsMetadata signTimeFormatMetadata?;
    # When **true,** the **Select Style** option is hidden from signers and they must draw their signature instead. 
    string disableStyleSignature?;
    SettingsMetadata enableBccDummyLinkMetadata?;
    # When **true,** signer attachments are added to the parent document
    # that contains the attachment.
    # The default behavior creates
    # a new document in the envelope for every signer attachment.
    # 
    # **Note:** Only Admin users can change this setting
    string signerAttachConcat?;
    # When **true,**
    # the account can use templates
    string allowServerTemplates?;
    # 
    string enableDSigIDCheckForAESPens?;
    SettingsMetadata allowEnvelopeReportingMetadata?;
    # Reserved for DocuSign
    string ignoreErrorIfAnchorTabNotFound?;
    SettingsMetadata betaSwitchConfigurationMetadata?;
    # 
    string disableAutoTemplateMatching?;
    SettingsMetadata enableClickPlusMetaData?;
    # 
    string accountDefaultLanguage?;
    # When **true,** the account can send in-session (embedded) envelopes.
    # 
    # **Note:** Only Admin users can change this setting
    string inSessionEnabled?;
    # 
    string enableDSigExpressPens?;
    # When **true,** HTML used to implement [Guided Forms](https://www.docusign.com/products/guided-forms) is enabled for the account
    string guidedFormsHtmlAllowed?;
    SettingsMetadata sendingTagsFontColorMetadata?;
    # When **true,** blockchain-based [Smart Contracts](https://www.docusign.com/products/blockchain) are enabled. The default value is **false.**
    string enableSmartContracts?;
    # Specifies the signature pad type.
    # Valid values are:
    # 
    # - `none`
    # - `topaz`
    # - `e_padv9`
    # - `e_pad_integrisign`
    # - `topaz_sigplusextlite`
    # 
    # **Note:** Only Admin users can change this setting
    string externalSignaturePadType?;
    # 
    string sendLockoutRecipientNotification?;
    # When **true,** a sender who is also a recipient of an envelope
    # must follow the authentication requirements for the envelope.
    # 
    # **Note:** Only Admin users can change this setting
    string senderMustAuthenticateSigning?;
    # When **true,** this account can use the Agent recipient type.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string enableSendToAgent?;
    # 
    string canUseSalesforceOAuth?;
    SettingsMetadata sessionTimeoutMetadata?;
    # 
    string allowIDVLevel1Trial?;
    SettingsMetadata signingSessionTimeoutMetadata?;
    AccessCodeFormat accessCodeFormat?;
    SettingsMetadata simplifiedSendingEnabledMetadata?;
    SettingsMetadata allowIDVLevel1TrialMetadata?;
    # When **true,** recipients can sign documents from the home page.
    # 
    # **Note:** Only Admin users can change this setting
    string allowSignDocumentFromHomePage?;
    SettingsMetadata enableAdvancedEnvelopesSearchMetadata?;
    # Boolean that specifies whether a DocuSign Signature Appliance can be used with the account
    string allowSecurityAppliance?;
    # When **true,** the `selfSignedRecipientEmailDocument` user setting
    # can be set for an individual user.
    # The user setting overrides the account setting.
    # 
    # **Note:** Only Admin users can change this account setting
    string selfSignedRecipientEmailDocumentUserOverride?;
    SettingsMetadata ignoreErrorIfAnchorTabNotFoundMetadataEnabled?;
    SettingsMetadata signerMustHaveAccountMetadata?;
    SettingsMetadata inPersonSigningEnabledMetadata?;
    # When **true,** calculated fields are enabled for the account. 
    # 
    # **Note:** This setting can be changed only by Admin users, and only if the account-level setting `allowExpression` is set to **true.**
    string enableCalculatedFields?;
    # When **true,**
    # the account admin can enable the
    # Send to Certified Delivery
    # feature on the account
    string allowSendToCertifiedDelivery?;
    SettingsMetadata idfxPhoneAuthenticationOverrideMetadata?;
    SettingsMetadata readOnlyModeMetadata?;
    SettingsMetadata expressSendMetadata?;
    SettingsMetadata pdfMaxIndividualUploadSizeMetadata?;
    # 
    string allowOrganizationSsoManagement?;
    # Specifies whether users can use
    # international numbers
    # for phone authentication
    string allowNonUSPhoneAuth?;
    # 
    string envelopeSearchMode?;
    # When **true,** account administrators can self-brand their sending console through the DocuSign console
    string canSelfBrandSend?;
    ExternalDocumentSources externalDocumentSources?;
    SettingsMetadata allowAutoTaggingMetadata?;
    SettingsMetadata useSAFESignerCertificatesMetadata?;
    SettingsMetadata envelopeSearchModeMetadata?;
    # 
    string allowOcrOfEnvelopeDocuments?;
    # When **true,**
    # account administrators can
    # specify that signers are
    # required to use SAFE-BioPharma digital signatures.
    # 
    # **Note:** Only Admin users can change this setting
    string allowSafeBioPharmaSignerCertificate?;
    # Specifies the time zone
    # to use with the API.
    # 
    # Valid values are:
    # 
    # - `TZ_01_AfghanistanStandardTime`
    # - `TZ_02_AlaskanStandardTime`
    # - `TZ_03_ArabStandardTime`
    # - `TZ_04_ArabianStandardTime`
    # - `TZ_05_ArabicStandardTime`
    # - `TZ_06_ArgentinaStandardTime`
    # - `TZ_07_AtlanticStandardTime`
    # - `TZ_08_AUS_CentralStandardTime`
    # - `TZ_09_AUS_EasternStandardTime`
    # - `TZ_10_AzerbaijanStandardTime`
    # - `TZ_11_AzoresStandardTime`
    # - `TZ_12_BangladeshStandardTime`
    # - `TZ_13_CanadaCentralStandardTime`
    # - `TZ_14_CapeVerdeStandardTime`
    # - `TZ_15_CaucasusStandardTime`
    # - `TZ_16_CentralAustraliaStandardTime`
    # - `TZ_17_CentralAmericaStandardTime`
    # - `TZ_18_CentralAsiaStandardTime`
    # - `TZ_19_CentralBrazilianStandardTime`
    # - `TZ_20_CentralEuropeStandardTime`
    # - `TZ_21_CentralEuropeanStandardTime`
    # - `TZ_22_CentralPacificStandardTime`
    # - `TZ_23_CentralStandardTime`
    # - `TZ_24_CentralStandardTimeMexico`
    # - `TZ_25_ChinaStandardTime`
    # - `TZ_26_DatelineStandardTime`
    # - `TZ_27_E_AfricaStandardTime`
    # - `TZ_28_E_AustraliaStandardTime`
    # - `TZ_29_E_EuropeStandardTime`
    # - `TZ_30_E_SouthAmericaStandardTime`
    # - `TZ_31_EasternStandardTime`
    # - `TZ_32_EgyptStandardTime`
    # - `TZ_33_EkaterinburgStandardTime`
    # - `TZ_34_FijiStandardTime`
    # - `TZ_35_FLE_StandardTime`
    # - `TZ_36_GeorgianStandardTime`
    # - `TZ_37_GMT_StandardTime`
    # - `TZ_38_GreenlandStandardTime`
    # - `TZ_39_GreenwichStandardTime`
    # - `TZ_40_GTB_StandardTime`
    # - `TZ_41_HawaiianStandardTime`
    # - `TZ_42_IndiaStandardTime`
    # - `TZ_43_IranStandardTime`
    # - `TZ_44_IsraelStandardTime`
    # - `TZ_45_JordanStandardTime`
    # - `TZ_46_KaliningradStandardTime`
    # - `TZ_47_KamchatkaStandardTime`
    # - `TZ_48_KoreaStandardTime`
    # - `TZ_49_MagadanStandardTime`
    # - `TZ_50_MauritiusStandardTime`
    # - `TZ_51_MidAtlanticStandardTime`
    # - `TZ_52_MiddleEastStandardTime`
    # - `TZ_53_MontevideoStandardTime`
    # - `TZ_54_MoroccoStandardTime`
    # - `TZ_55_MountainStandardTime`
    # - `TZ_56_MountainStandardTimeMMexico`
    # - `TZ_57_MyanmarStandardTime`
    # - `TZ_58_N_CentralAsiaStandardTime`
    # - `TZ_59_NamibiaStandardTime`
    # - `TZ_60_NepalStandardTime`
    # - `TZ_61_NewZealandStandardTime`
    # - `TZ_62_NewfoundlandStandardTime`
    # - `TZ_63_NorthAsiaEastStandardTime`
    # - `TZ_64_NorthAsiaStandardTime`
    # - `TZ_65_PacificSAStandardTime`
    # - `TZ_66_PacificStandardTime`
    # - `TZ_67_PacificStandardTimeMexico`
    # - `TZ_68_PakistanStandardTime`
    # - `TZ_69_ParaguayStandardTime`
    # - `TZ_70_RomanceStandardTime`
    # - `TZ_71_RussianStandardTime`
    # - `TZ_72_SAEasternStandardTime`
    # - `TZ_73_SAPacificStandardTime`
    # - `TZ_74_SAWesternStandardTime`
    # - `TZ_75_SamoaStandardTime`
    # - `TZ_76_SE_AsiaStandardTime`
    # - `TZ_77_SingaporeStandardTime`
    # - `TZ_78_SouthAfricaStandardTime`
    # - `TZ_79_SriLankaStandardTime`
    # - `TZ_80_SyriaStandardTime`
    # - `TZ_81_TaipeiStandardTime`
    # - `TZ_82_TasmaniaStandardTime`
    # - `TZ_83_TokyoStandardTime`
    # - `TZ_84_TongaStandardTime`
    # - `TZ_85_TurkeyStandardTime`
    # - `TZ_86_UlaanbaatarStandardTime`
    # - `TZ_87_US_EasternStandardTime`
    # - `TZ_88_USMountainStandardTime`
    # - `TZ_89_VenezuelaStandardTime`
    # - `TZ_90_VladivostokStandardTime`
    # - `TZ_91_W_AustraliaStandardTime`
    # - `TZ_92_W_CentralAfricaStandardTime`
    # - `TZ_93_W_EuropeStandardTime`
    # - `TZ_94_WestAsiaStandardTime`
    # - `TZ_95_WestPacificStandardTime`
    # - `TZ_96_YakutskStandardTime`
    string timezoneOffsetAPI?;
    # When **true,**
    # sent reminders are included in the envelope history
    string writeReminderToEnvelopeHistory?;
    # When **true,** an account administrator can override the ability of an envelope recipient to reassign it to another person.
    # 
    # **Note:** Only Admin users can change this setting
    string allowSignerReassignOverride?;
    # The number of days before user authentication credentials expire. A value of `0` specifies that users must re-authenticate for each new session.
    # 
    # **Note:** Only Admin users can change this setting
    string idCheckExpireDays?;
    SettingsMetadata waterMarkEnabledMetadata?;
    # Account level flag that determines the availability to perform Third Party Notary (3PN) actions
    string allowThirdPartyElectronicNotary?;
    # 
    string exitPrompt?;
    # When **true,** account users must view supplemental documents when signing
    string supplementalDocumentsMustView?;
    # When **true,** the configured [Access Code Format](/docs/esign-rest-api/reference/accounts/accounts/get/#accessCodeFormat) page is enabled for account administrators.
    # 
    # **Note:** Only Admin users can change this setting
    string allowAccessCodeFormat?;
    # 
    string enableInboxRelevanceSortForRecentAccounts?;
    # 
    string enableSearch?;
    SettingsMetadata enableSigningExtensionConversationsMetadata?;
    SettingsMetadata allowAgreementActionsMetadata?;
    # 
    string allowEditingEnvelopesOnBehalfOfOthers?;
    # Reserved for DocuSign. This property returns the value **false** when listing account settings. This property is read-only
    string allowPrivateSigningGroups?;
    SettingsMetadata allowSignDocumentFromHomePageMetadata?;
    SettingsMetadata enableKeyTermsSuggestionsByDocumentTypeMetadata?;
    # Enables direct links to envelopes in reports for administrators in the following scopes:
    # - `NoEnvelopes`
    # - `AllEnvelopes`
    # - `OnlyOwnEnvelopes`
    string enableReportLinks?;
    SettingsMetadata signerCanCreateAccountMetadata?;
    # When **true,** sending from a mobile application is disabled.
    # 
    # **Note:** Only Admin users can change this setting
    string disableMobileSending?;
    # 
    string allowPerformanceAnalytics?;
    # 
    string useEnvelopeSearchMixedMode?;
    # 
    string allowOrganizationDomainUserManagement?;
    # When **true,**
    # a signer can create a DocuSign account
    # after signing.
    # 
    # **Note:** Only Admin users can change this setting
    string signerCanCreateAccount?;
    #   When **true,** an agent recipient can change the email addresses of recipients later in the signing order
    string allowAgentNameEmailEdit?;
    # When **true,** enables the DocuSign administrator to control envelope stamping for an account (placement of the `envelopeId`)
    string enableEnvelopeStampingByDSAdmin?;
    SettingsMetadata allowSecurityApplianceMetadata?;
    SettingsMetadata allowAccountManagementGranularMetadata?;
    SettingsMetadata disableAutoTemplateMatchingMetadata?;
    SettingsMetadata selfSignedRecipientEmailDocumentUserOverrideMetadata?;
    SettingsMetadata allowMarkupMetadata?;
    # The account-wide default font color to use for the content of the tab.
    # 
    # Valid values are:
    # 
    # - `Black`
    # - `BrightBlue`
    # - `BrightRed`
    # - `DarkGreen`
    # - `DarkRed`
    # - `Gold`
    # - `Green`
    # - `NavyBlue`
    # - `Purple`
    # - `White`
    string sendingTagsFontColor?;
    #   When **true,** auto-navigation can be enabled for this account
    string allowAutoNavSettings?;
    SettingsMetadata enableSMSAuthenticationMetadata?;
    # 
    string bulkSendMaxCopiesInBatch?;
    SettingsMetadata documentVisibilityMetadata?;
    SettingsMetadata allowExternalLinkedAccountsMetadata?;
    # When **true,** a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign documents on paper as an option to signing electronically.
    # 
    # **Note:** Only Admin users can change this setting
    string enableSignOnPaperOverride?;
    SettingsMetadata enableStrikeThroughMetadata?;
    SettingsMetadata allowRemoteNotaryMetadata?;
    SettingsMetadata allowInPersonMetadata?;
    # Boolean that specifies whether clickwraps are enabled in your app. A [clickwrap](/docs/click-api/click101/) is an iframe that you embed in your own website or app
    string enableClickwraps?;
    SettingsMetadata validationsReportMetadata?;
    SettingsMetadata enableIDFxPhoneAuthenticationMetadata?;
    # When **true,** [Signature Adoption Configuration](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=dsz1583277358168.html) is enabled. 
    # 
    # **Note:** Only Admin users can change this setting
    string adoptSigConfig?;
    SettingsMetadata allowDocGenDocumentsMetadata?;
    # When **true,** the Document Markup feature is enabled.
    # 
    # **Note:**  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting at the account level
    string allowMarkup?;
    SettingsMetadata enableReportLinksMetadata?;
    # 
    string allowValueInsights?;
    SettingsMetadata allowServerTemplatesMetadata?;
    # 
    string defaultToAdvancedEnvelopesFilterForm?;
    # 
    string enableClickPlusDynamicContent?;
    SettingsMetadata enableAccountWideSearchMetadata?;
    # Boolean that specifies whether to allow envelope senders to opt out of using the new platform seal
    string optOutNewPlatformSeal?;
    # The format for the signature date. Valid values are:
    # 
    # - `d/M/yyyy`
    # - `dd-MM-yy`
    # - `dd-MMM-yy`
    # - `dd-MM-yyyy`
    # - `dd.MM.yyyy`
    # - `dd-MMM-yyyy`
    # - `dd MMMM yyyy`
    # - `M/d/yyyy`
    # - `MM-dd-yyyy`
    # - `MM/dd/yyyy`
    # - `MM/dd/yy`
    # - `MMM-dd-yyyy`
    # - `MMM d, yyyy`
    # - `MMMM d, yyyy`
    # - `yyyy-MM-dd`
    # - `yyyy-MMM-dd`
    # - `yyyy/MM/dd`
    # - `yyyy MMMM d`
    # 
    # **Note:** Only Admin users can change this setting
    string signDateFormat?;
    # 
    string allowOrganizationDocusignMonitor?;
    # When **true,** specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement
    string useConsumerDisclosureWithinAccount?;
    # Boolean that specifies whether the account supports radio buttons on tabs [Radio CustomTabType](/docs/esign-soap-api/reference/sending-group/tab/)
    string allowSigningRadioDeselect?;
    # 
    string advancedSearchEnableTemplateIdField?;
    # 
    string enableAccountWideSearch?;
    # 
    string pdfMaxChunkedUploadPartSize?;
    # The number of minutes
    # that a signing session stays
    # alive without any activity
    string signingSessionTimeout?;
    # Boolean that specifies whether BCC for Email Archive is enabled for the account. BCC for Email Archive allows you to set up an archive email address so that a BCC copy of an envelope is sent only to that address
    string bccEmailArchive?;
    # If the account plan does not include calculated fields, this setting allows an account to use them.
    string allowExpression?;
    # Account Level Flag that determines the availability to use ADM Healthcare fields
    string enableAdmHealthcare?;
    # The account-wide default font to be used for the tab value. Supported fonts include:
    # 
    # - `Default`
    # - `Arial`
    # - `ArialNarrow`
    # - `Calibri`
    # - `CourierNew`
    # - `Garamond`
    # - `Georgia`
    # - `Helvetica`
    # - `LucidaConsole`
    # - `MSGothic`
    # - `MSMincho`
    # - `OCR-A`
    # - `Tahoma`
    # - `TimesNewRoman`
    # - `Trebuchet`
    # - `Verdana`
    string sendingTagsFontName?;
    SettingsMetadata disableMobilePushNotificationsMetadata?;
    # When **true,** users can use the signing attachments feature to request attachments from signers.
    # 
    # **Note:** Only Admin users can change this setting
    string enableSignerAttachments?;
    # Boolean that allows envelope senders to opt out of the recipient signing auto-navigation feature and opt out of updating tab font color
    string optOutAutoNavTextAndTabColorUpdates?;
    # The password for the RSA account.
    # 
    # 
    # **Note:**
    # Only Admin users can change this setting. Modifying this value may disrupt
    # your ID Check capability.
    # Ensure you have the correct value before changing it
    string rsaVeridPassword?;
    SettingsMetadata useConsumerDisclosureMetadata?;
    # When **true,** fax delivery to recipients is allowed for the account.
    # 
    # **Note:** Only Admin users can change this setting
    string faxOutEnabled?;
    SettingsMetadata convertPdfFieldsMetadata?;
    # Sets when authentication checks are applied for recipient envelope access. This setting only applies to the following ID checks: 
    # 
    # - Phone Authentication
    # - SMS Authentication
    # - Knowledge-Based ID
    # 
    # This setting takes one of the following options: 
    # 
    # - `initial_access`: The authentication check always applies the first time a recipient accesses the documents. Recipients are not asked to authenticate again when they access the documents from the same browser on the same device. If the recipient attempts to access the documents from a different browser or a different device, the recipient must pass authentication again. Once authenticated, that recipient is not challenged again on the new device or browser. The ability for a recipient to skip authentication for documents is limited to documents sent from the same sending account.
    # - `each_access`: Authentication checks apply every time a recipient attempts to access the envelope. However, you can configure the Authentication Expiration setting to allow recipients to skip authentication when they have recently passed authentication by setting a variable time frame.
    # 
    # **Note:** Only Admin users can change this setting
    string authenticationCheck?;
    # Reserved for DocuSign
    string betaSwitchConfiguration?;
    # The number of minutes before user authentication credentials expire
    string idCheckExpireMinutes?;
    # When **true,**
    # the account has the ability to change the
    # [Consumer Disclosure](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=aqg1583277336549.html)
    # setting
    string allowConsumerDisclosureOverride?;
    # 
    string bulkSendActionResendLimit?;
    SettingsMetadata phoneAuthRecipientMayProvidePhoneNumberMetadata?;
    # 
    string allowSigningInsights?;
    SettingsMetadata allowSendToIntermediaryMetadata?;
    SettingsMetadata emailTemplateVersionMetadata?;
    # When **true,** account administrators can reserve a web domain and users. Domains are organization-specific reserved internet domains, such as `@exampledomain.com`. You can define policy settings for users of each reserved domain within your organization, export lists of domain users for audit purposes, and manage domain users.
    # 
    # - Domains may be claimed by an organization.
    # - When a domain is claimed by an organization, all users within that domain are added to the organization, even if they have trial or free accounts.
    # - You can set domain controls for all users of the domain.
    # - You can export information about your organization’s users that are associated with your reserved domains.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string enableReservedDomain?;
    # When **true,** signers cannot view certificates of completion
    string disableSignerCertView?;
    # 
    string enableIDFxPhoneAuthentication?;
};

# A tab that displays the recipient's email as entered in the
# recipient information
public type EmailAddress record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located.
    # For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # **Note:** Email Address tabs never display this tooltip in the signing interface.
    # 
    # Although you can technically set a value via the API for this tab,
    # it will not be displayed to the recipient
    string tooltip?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign-generated custom tab ID for the custom tab to be applied. This property can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# Represents the Queries record for the operation: BCCEmailArchive_GetBCCEmailArchiveHistoryList
public type BCCEmailArchiveGetBCCEmailArchiveHistoryListQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of items to skip
    string count?;
};

# Represents the Queries record for the operation: NotaryJournals_GetNotaryJournals
public type NotaryJournalsGetNotaryJournalsQueries record {
    # The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image
    @http:Query {name: "start_position"}
    string startPosition?;
    # The maximum number of results to return
    string count?;
    # Use this parameter to search for specific text
    @http:Query {name: "search_text"}
    string searchText?;
};

# Sets custom email subject and email body for individual
# recipients. **Note:** You must explicitly set `supportedLanguage`
# if you use this feature
public type RecipientEmailNotification record {
    # The body of the email message
    string emailBody?;
    PropertyMetadata emailBodyMetadata?;
    PropertyMetadata supportedLanguageMetadata?;
    # The language to use for the standard email format and signing view for a recipient.
    # 
    # For example, this setting determines the language of the recipient's email notification message. It also determines the language used for buttons and tabs in both the email notification and the signing experience.
    # 
    # **Note:** This setting affects only DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated, and appears exactly as you enter it.
    # 
    # To retrieve the possible values, use the [Accounts::listSupportedLanguages][ListLang] method.
    # 
    # [ListLang]: /docs/esign-rest-api/reference/accounts/accounts/listsupportedlanguages/
    string supportedLanguage?;
    PropertyMetadata emailSubjectMetadata?;
    # The subject line for the email notification
    string emailSubject?;
};

# Provides properties that describe user authorization to a workspace
public type WorkspaceUserAuthorization record {
    # When **true,** the workspace user can move the items in the workspace
    string canMove?;
    # When **true,** the workspace user can view the items in the workspace
    string canView?;
    # The ID of the user who last modified the workspace user authorization
    string modifiedById?;
    # When **true,** the workspace user can create transactions from the workspace
    string canTransact?;
    # The UTC DateTime when the workspace user authorization was created
    string created?;
    # The UTC DateTime when the workspace user authorization was last modified
    string modified?;
    # When **true,** the workspace user can delete items from the workspace
    string canDelete?;
    # The ID of the workspace user
    string workspaceUserId?;
    WorkspaceUser workspaceUserInformation?;
    # The ID of the user who created the workspace user authorization. 
    string createdById?;
    ErrorDetails errorDetails?;
};

# 
public type BulkSendBatchRequest record {
    # The new name of the bulk send batch.
    # 
    # This property is required. The maximum length of the string is 500 characters
    string batchName?;
};

# Represents the Queries record for the operation: ConsumerDisclosure_GetConsumerDisclosureEnvelopeIdRecipientIdLangCode
public type ConsumerDisclosureGetConsumerDisclosureEnvelopeIdRecipientIdLangCodeQueries record {
    # (Optional) The code for the signer language version of the disclosure that you want to retrieve, as a query parameter. The following languages are supported:
    # 
    # - Arabic (`ar`)
    # - Bulgarian (`bg`)
    # - Czech (`cs`)
    # - Chinese Simplified (`zh_CN`)
    # - Chinese Traditional (`zh_TW`)
    # - Croatian (`hr`)
    # - Danish (`da`)
    # - Dutch (`nl`)
    # - English US (`en`)
    # - English UK (`en_GB`)
    # - Estonian (`et`)
    # - Farsi (`fa`)
    # - Finnish (`fi`)
    # - French (`fr`)
    # - French Canadian (`fr_CA`)
    # - German (`de`)
    # - Greek (`el`)
    # - Hebrew (`he`)
    # - Hindi (`hi`)
    # - Hungarian (`hu`)
    # - Bahasa Indonesian (`id`)
    # - Italian (`it`)
    # - Japanese (`ja`)
    # - Korean (`ko`)
    # - Latvian (`lv`)
    # - Lithuanian (`lt`)
    # - Bahasa Melayu (`ms`)
    # - Norwegian (`no`)
    # - Polish (`pl`)
    # - Portuguese (`pt`)
    # - Portuguese Brazil (`pt_BR`)
    # - Romanian (`ro`)
    # - Russian (`ru`)
    # - Serbian (`sr`)
    # - Slovak (`sk`)
    # - Slovenian (`sl`)
    # - Spanish (`es`)
    # - Spanish Latin America (`es_MX`)
    # - Swedish (`sv`)
    # - Thai (`th`)
    # - Turkish (`tr`)
    # - Ukrainian (`uk`) 
    # - Vietnamese (`vi`)
    # 
    # Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`
    string langCode?;
};

# A tab that displays the envelope ID.
# 
# **Note:**  The eSignature API uses the name `envelopeId` two ways:
# 
# - As a _property_ of type `string` used to identify an envelope  by its GUID.
# - As an _object_ used to represent an envelope tab that displays
#   the envelope's GUID
public type EnvelopeId record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located.
    # For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# A tab that allows the recipient to add a free-form drawing to the document
public type Draw record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # 
    string useBackgroundAsCanvas?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** the recipient can upload an image to use as the background of the drawing field. The default value is **false.**
    string allowSignerUpload?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    PropertyMetadata lockedMetadata?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: SharedAccess_PutSharedAccess
public type SharedAccessPutSharedAccessQueries record {
    # When **true,** preserve the existing shared access settings
    @http:Query {name: "preserve_existing_shared_access"}
    string preserveExistingSharedAccess?;
    # Specifies the type of shared item being set:
    # - `envelopes`: Set envelope sharing between users.
    # - `templates`: Set information about template sharing among users and groups.
    # - `folders`: Get information about folder sharing among users and groups
    @http:Query {name: "item_type"}
    string itemType?;
    # A comma-separated list of IDs for users whose shared item access is being set
    @http:Query {name: "user_ids"}
    string userIds?;
};

# A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent. 
# 
# When the emailSettings information is used for an envelope, it only applies to that envelope. 
# 
# **IMPORTANT:** The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings. 
# 
# EmailSettings consists of: 
# 
# * replyEmailAddressOverride - The Reply To email used for the envelope. DocuSign will verify that a correct email format is used, but does not verify that the email is active. Maximum Length: 100 characters.
# * replyEmailNameOverride - The name associated with the Reply To email address. Maximum Length: 100 characters.
# * bccEmailAddresses - An array of up to five email addresses to which the envelope is sent to as a BCC email. Only users with canManageAccount setting set to true can use this option. 
# DocuSign verifies that the email format is correct, but does not verify that the email is active. Using this overrides the BCC for Email Archive information setting for this envelope. Maximum Length: 100 characters.
# *Example*: if your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address
public type EmailSettings record {
    # The Reply To email address to use for email replies, instead of the one that is configured at the account level. DocuSign verifies that the email address is in a correct format, but does not verify that it is active. Maximum Length: 100 characters
    string replyEmailAddressOverride?;
    # The name to associate with the Reply To email address, instead of the name that is configured at the account level. Maximum Length: 100 characters
    string replyEmailNameOverride?;
    # An array containing the email address that should receive a copy of all email communications related to an envelope for archiving purposes. Maximum Length: 100 characters.
    # 
    # While this property is an array, note that it takes only a single email address.
    # 
    # **Note:** Only users with the `canManageAccount` setting set to **true** can use this option. 
    # 
    # DocuSign verifies that the email format is correct, but does not verify that the email address is active. You can use this for archiving purposes. However, using this property overrides the BCC for Email Archive information setting for this envelope. 
    # 
    # **Example:** if your account has BCC for Email Archive set up for the email address archive@mycompany.com and you send an envelope using the BCC Email Override to send a BCC email to salesarchive@mycompany.com, then a copy of the envelope is only sent to the salesarchive@mycompany.com email address
    BccEmailAddress[] bccEmailAddresses?;
};

# A Commission Number tab displays a notary's commission number. The tab is populated with the notary's commission information, but the recipient can also edit the value when notarizing. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
# 
# [notary]: /docs/notary-api/
public type CommissionNumber record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # 
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# Information about the shared item
public type SharedItem record {
    # How the item is shared. One of:
    # 
    # - `not_shared`
    # - `shared_to`
    # - `shared_from`
    # - `shared_to_and_from`
    string shared?;
    UserInfo user?;
    ErrorDetails errorDetails?;
};

# This object contains details about a folder
public type Folder record {
    UserInfo owner?;
    # A collection of folder objects returned in a response
    Folder[] folders?;
    # The ID of the parent folder, or the special value `root` for the root folder
    string parentFolderId?;
    # When **true,** the current user has access to the folder
    string hasAccess?;
    # The type of folder. Possible values include:
    # 
    # - `draft`
    # - `inbox`
    # - `normal` (a system-generated folder)
    # - `recyclebin`
    # - `sentitems`
    # - `custom` (a custom folder created by a user)
    string 'type?;
    # The URI for the folder
    string uri?;
    # The ID of the folder
    string folderId?;
    # The number of items in the folder
    string itemCount?;
    Filter filter?;
    # When **true,** the folder has subfolders
    string hasSubFolders?;
    # The URI of the parent folder
    string parentFolderUri?;
    # A list of envelopes and templates that the folder contains
    FolderItemV2[] folderItems?;
    # The name of the folder
    string name?;
    # The number of subfolders
    string subFolderCount?;
    ErrorDetails errorDetails?;
};

# Represents the Queries record for the operation: ConsumerDisclosure_PutConsumerDisclosure
public type ConsumerDisclosurePutConsumerDisclosureQueries record {
    # (Optional) When true, the response includes metadata indicating which properties are editable
    @http:Query {name: "include_metadata"}
    string includeMetadata?;
};

# Represents the Queries record for the operation: UserAgentAuthorizations_GetAgentUserAuthorizations
public type UserAgentAuthorizationsGetAgentUserAuthorizationsQueries record {
    # The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image
    @http:Query {name: "start_position"}
    string startPosition?;
    # Filters returned user records by full email address or a substring of email address
    @http:Query {name: "email_substring"}
    string emailSubstring?;
    # When **true,** only active users are returned. The default value is **false.**
    @http:Query {name: "active_only"}
    string activeOnly?;
    string permissions?;
    # The maximum number of results to return
    string count?;
    # When **true,** returns active and scheduled authorizations of closed users. The default value is **true.** This value is only applied when `active_only` is **false.**
    @http:Query {name: "include_closed_users"}
    string includeClosedUsers?;
    # Filters results based on a full or partial user name.
    # 
    # **Note:** When you enter a partial user name, you do not use a wildcard character
    @http:Query {name: "user_name_substring"}
    string userNameSubstring?;
};

# Represents the Queries record for the operation: BulkSendV2Batch_GetBulkSendBatches
public type BulkSendV2BatchGetBulkSendBatchesQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # The start date for a date range in UTC DateTime format.
    # 
    # **Note:** If this property is null, no date filtering is applied
    @http:Query {name: "from_date"}
    string fromDate?;
    # The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.
    # 
    # **Note:** If this property is null, the value defaults to the current date
    @http:Query {name: "to_date"}
    string toDate?;
    @http:Query {name: "user_id"}
    string userId?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Valid values: `1` to `100`<br>
    # Default: `100`
    string count?;
    # A comma-separated list of batch IDs to query
    @http:Query {name: "batch_ids"}
    string batchIds?;
    # Use this parameter to search for specific text
    @http:Query {name: "search_text"}
    string searchText?;
    # The kind of results to collect. Must be one of:
    # 
    # - all
    # - failed
    # - sent
    # - queued
    string status?;
};

# Brands use resource files to style the following experiences: 
# 
# - Email
# - Sending
# - Signing
# - Captive (embedded) signing 
# 
# You can modify these resource files to customize these experiences
public type BrandResourceUrls record {
    # The URI for the captive (embedded) signing resource file that the brand uses
    string signingCaptive?;
    # The URI for the sending resource file that the brand uses
    string sending?;
    # The URI for the signing resource file that the brand uses
    string signing?;
    # The URI for the email resource file that the brand uses
    string email?;
};

# This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates
public type PolyLineOverlay record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # An array of `polyLine` objects that contain x- and y-coordinates representing the locations of the lines
    PolyLine[] polyLines?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    PropertyMetadata lockedMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # When **true,** indicates that the tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata overlayTypeMetadata?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    GraphicsContext graphicsContext?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    # The type of overlay to use. The API currently supports only the `outline` overlay type
    string overlayType?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: CloudStorageFolder_GetCloudStorageFolderAll
public type CloudStorageFolderGetCloudStorageFolderAllQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # A comma separated list of folder IDs included in the request. 
    @http:Query {name: "cloud_storage_folder_path"}
    string cloudStorageFolderPath?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Default: `25`
    string count?;
    # The file attribute to use to sort the results.
    # 
    # Valid values are: 
    # 
    # * `modified`
    # * `name`
    @http:Query {name: "order_by"}
    string orderBy?;
    # The order in which to sort the results.
    # 
    # Valid values are: 
    # 
    # 
    # * `asc`: Ascending order.
    # * `desc`: Descending order. 
    string 'order?;
    # Use this parameter to search for specific text
    @http:Query {name: "search_text"}
    string searchText?;
};

# 
public type EnvelopeCustomMetadata record {
    # 
    NameValue[] envelopeCustomMetadataDetails?;
};

# Represents the Queries record for the operation: Documents_GetTemplateDocuments
public type DocumentsGetTemplateDocumentsQueries record {
    # Reserved for DocuSign
    @http:Query {name: "include_tabs"}
    string includeTabs?;
};

# A tab that alerts notary recipients that
# they must take action on the page.
# Only one notarize tab can appear on a page
public type Notarize record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    PropertyMetadata lockedMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: ConsumerDisclosure_GetConsumerDisclosure
public type ConsumerDisclosureGetConsumerDisclosureQueries record {
    # The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:
    # 
    # - Arabic (`ar`)
    # - Bulgarian (`bg`)
    # - Czech (`cs`)
    # - Chinese Simplified (`zh_CN`)
    # - Chinese Traditional (`zh_TW`)
    # - Croatian (`hr`)
    # - Danish (`da`)
    # - Dutch (`nl`)
    # - English US (`en`)
    # - English UK (`en_GB`)
    # - Estonian (`et`)
    # - Farsi (`fa`)
    # - Finnish (`fi`)
    # - French (`fr`)
    # - French Canadian (`fr_CA`)
    # - German (`de`)
    # - Greek (`el`)
    # - Hebrew (`he`)
    # - Hindi (`hi`)
    # - Hungarian (`hu`)
    # - Bahasa Indonesian (`id`)
    # - Italian (`it`)
    # - Japanese (`ja`)
    # - Korean (`ko`)
    # - Latvian (`lv`)
    # - Lithuanian (`lt`)
    # - Bahasa Melayu (`ms`)
    # - Norwegian (`no`)
    # - Polish (`pl`)
    # - Portuguese (`pt`)
    # - Portuguese Brazil (`pt_BR`)
    # - Romanian (`ro`)
    # - Russian (`ru`)
    # - Serbian (`sr`)
    # - Slovak (`sk`)
    # - Slovenian (`sl`)
    # - Spanish (`es`)
    # - Spanish Latin America (`es_MX`)
    # - Swedish (`sv`)
    # - Thai (`th`)
    # - Turkish (`tr`)
    # - Ukrainian (`uk`)
    # - Vietnamese (`vi`)
    # 
    # Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`
    string langCode?;
};

# Represents the Queries record for the operation: UserProfileImage_GetUserProfileImage
public type UserProfileImageGetUserProfileImageQueries record {
    # Reserved for DocuSign
    string encoding?;
};

# Represents the Queries record for the operation: Brands_GetBrands
public type BrandsGetBrandsQueries record {
    # When **true,** returns the logos associated with the brand
    @http:Query {name: "include_logos"}
    string includeLogos?;
    # When **true,** excludes distributor brand information from the response set
    @http:Query {name: "exclude_distributor_brand"}
    string excludeDistributorBrand?;
};

# This is the request object for uploading a chunked upload
public type ChunkedUploadRequest record {
    # The ID of the chunked upload.
    # 
    # **Note:** This property is ignored in requests, and overridden with an auto-generated value in responses
    string chunkedUploadId?;
    # A base64-encoded representation of the content that is used to upload the file. 
    # 
    # Maximum size: 50 MB. However, data is also subject to REST API limits regarding request sizes, and Internet Information Systems (IIS) might place further constraints on file size
    string data?;
};

# A tab that displays the date that the recipient signed the
# document
public type DateSigned record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located.
    # For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # **Note:** Date Signed tabs never display this tooltip in the signing interface.
    # 
    # Although you can technically set a value via the API for this tab,
    # it will not be displayed to the recipient
    string tooltip?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# This object contains the details for the bulk send list
public type BulkSendingList record {
    # The GUID of the bulk send list
    string listId?;
    # An array of `bulkCopy` objects. Each object represents an instance or copy of an envelope and contains details such as the recipient, custom fields, tabs, and other information
    BulkSendingCopy[] bulkCopies?;
    # The name of the bulk send list
    string name?;
};

# Creating, updating, and deleting notary jurisdiction objects
public type NotaryJurisdiction1 record {
    # 
    string commissionId?;
    # 
    string registeredName?;
    # 
    string commissionExpiration?;
    Jurisdiction jurisdiction?;
    # 
    string county?;
    # 
    string sealType?;
    ErrorDetails errorDetails?;
};

# Represents the Queries record for the operation: UserSignatures_PutUserSignatureById
public type UserSignaturesPutUserSignatureByIdQueries record {
    # When **true,** closes the current signature
    @http:Query {name: "close_existing_signature"}
    string closeExistingSignature?;
};

# A tab that allows the recipient to enter any type of text
public type Text record {
    # The unique identifier for the tab
    string tabId?;
    # A regular expression used to validate input for the tab
    string validationPattern?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata formulaMetadata?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata validationPatternMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The value of the text tab.
    # 
    # Maximum length: 4000 bytes
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata validationMessageMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Contains the formula
    # for calculating the value of
    # this tab.
    # 
    # Use a tab's `tabLabel`,
    # enclosed in brackets,
    # to refer to it.
    # 
    # For example,
    # you want to present the total cost
    # of two items, tax included.
    # 
    # The cost of each item is stored
    # in number tabs labeled Item1 and Item2.
    # The tax rate is in a number tab
    # labeled TaxRate.
    # 
    # The formula string for this property
    # would be:
    # `([Item1] + [Item2]) * (1 + [TaxRate])`
    # 
    # See [Calculated Fields][calculatedfields]
    # in the DocuSign Support Center
    # to learn more about formulas.
    # 
    # Maximum Length: 2000 characters
    # 
    # [calculatedfields]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html
    string formula?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# Contains details about a specific cloud storage provider
public type CloudStorageProvider record {
    # The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
    # 
    # The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains
    string redirectUrl?;
    # The service name for the cloud storage provider
    string 'service?;
    # The authentication URL used for the cloud storage provider. This information is only included in the response if the user has not passed authentication for the cloud storage provider. If the redirectUrl query string is provided, the returnUrl is appended to the authenticationUrl. 
    string authenticationUrl?;
    # The DocuSign-generated ID for the cloud storage provider
    string serviceId?;
    ErrorDetails errorDetails?;
};

# Represents the Queries record for the operation: Pages_GetTemplatePageImages
public type PagesGetTemplatePageImagesQueries record {
    # Sets the maximum width of the returned images in pixels
    @http:Query {name: "max_width"}
    string maxWidth?;
    # The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image
    @http:Query {name: "start_position"}
    string startPosition?;
    # The maximum number of results to return
    string count?;
    # When **true,** using cache is disabled and image information is retrieved from a database. **True** is the default value. 
    string nocache?;
    # When **true,** changes display in the user interface
    @http:Query {name: "show_changes"}
    string showChanges?;
    # Sets the maximum height of the returned images in pixels
    @http:Query {name: "max_height"}
    string maxHeight?;
    # The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94
    string dpi?;
};

# **Note:** For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`
public type PowerFormRecipient record {
    # When **true,** the recipient must enter the `accessCode` to access the PowerForm
    string accessCodeRequired?;
    # When **true,** the recipient's email address is locked and cannot be edited
    string emailLocked?;
    # When **true,** the `userName` property for the recipient is locked and cannot be edited
    string userNameLocked?;
    # When **true,** the template used to create the PowerForm requires ID lookup for the recipient
    string templateRequiresIdLookup?;
    # When **true,** the `accessCode` property is locked and cannot be edited
    string accessCodeLocked?;
    # Indicates if authentication is configured for the account. Valid values are:
    # 
    # - `always`: Authentication checks are performed on every envelope. 
    # - `never`: Authentication checks are not performed on any envelopes. 
    # - `optional:` Authentication is configurable per envelope
    string idCheckRequired?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # (Optional) The access code that the recipient must enter to access the PowerForm.
    # 
    # Maximum Length: 50 characters. The code must also conform to the account's access code format setting.
    # 
    # If blank but the signer accessCode property is set in the envelope, then that value is used.
    # 
    # If blank and the signer accessCode property is not set, then the access code is not required
    string accessCode?;
    # The name of the PowerForm recipient.
    # 
    # **Note:** For self-service documents where you do not know who the recipients are in advance, you can leave this property blank
    string name?;
    # The role associated with the recipient (for example, `Member`).
    # 
    # This property is required when you are working with template recipients and PowerForm recipients
    string roleName?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    # The email address of the recipient.
    # 
    # **Note:** For self-service documents where you do not know who the recipients are in advance, you can leave this property blank
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
};

# Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
# - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
# - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
# - `options`: The values supported for this setting (not all settings have this element)
public type UserSettingsInformation record {
    # When **true,** the API returns suggested tabs for documents for this user
    string allowAutoTagging?;
    # 
    string canCreateTransaction?;
    SettingsMetadata modifiedDateMetadata?;
    SettingsMetadata canDeleteDocumentsInTransactionMetadata?;
    SettingsMetadata templateAutoMatchingMetadata?;
    # When **true,** this user is an administrator for the account
    string canManageAccount?;
    # Reserved for DocuSign
    string transactionPointUserName?;
    # When **true,** this user can export authoritative copy for the account
    string apiCanExportAC?;
    # When **true** and this user is an administrator, they can view all of the envelopes generated from PowerForms. The default value is **false.**
    string allowPowerFormsAdminToAccessAllPowerFormEnvelope?;
    SettingsMetadata enableSignerAttachmentsMetadata?;
    # When **true,** this user can access the **Other Actions** menu
    string disableOtherActions?;
    # When true, daylight savings time is in effect for this user's time zone
    string timezoneDST?;
    # The timezone offset for the user. Valid values:
    # - `tz_01_afghanistan`
    # - `tz_02_alaskan`
    # - `tz_03_arab`
    # - `tz_04_arabian`
    # - `tz_05_arabic`
    # - `tz_06_argentina`
    # - `tz_07_atlantic`
    # - `tz_08_aus_central`
    # - `tz_09_aus_eastern`
    # - `tz_10_azerbaijan`
    # - `tz_11_azores`
    # - `tz_12_bangladesh`
    # - `tz_13_canada_central`
    # - `tz_14_cape_verde`
    # - `tz_15_caucasus`
    # - `tz_16_central_australia`
    # - `tz_17_central_america`
    # - `tz_18_central_asia`
    # - `tz_19_central_brazilian`
    # - `tz_20_central_europe`
    # - `tz_21_central_european`
    # - `tz_22_central_pacific`
    # - `tz_23_central`
    # - `tz_24_central_mexico`
    # - `tz_25_china`
    # - `tz_26_dateline`
    # - `tz_27_east_africa`
    # - `tz_28_east_australia`
    # - `tz_29_east_europe`
    # - `tz_30_east_south_america`
    # - `tz_31_eastern`
    # - `tz_32_egypt`
    # - `tz_33_ekaterinburg`
    # - `tz_34_fiji`
    # - `tz_35_fli`
    # - `tz_36_georgian`
    # - `tz_37_gmt`
    # - `tz_38_greenland`
    # - `tz_39_greenwich`
    # - `tz_40_gtb`
    # - `tz_41_hawaiian`
    # - `tz_42_india`
    # - `tz_43_iran`
    # - `tz_44_israel`
    # - `tz_45_jordan`
    # - `tz_46_kaliningrad`
    # - `tz_47_kamchatka`
    # - `tz_48_korea`
    # - `tz_49_magadan`
    # - `tz_50_mauritius`
    # - `tz_51_mid_atlantic`
    # - `tz_52_middle_east`
    # - `tz_53_montevideo`
    # - `tz_54_morocco`
    # - `tz_55_mountain`
    # - `tz_56_mountain_mexico`
    # - `tz_57_myanmar`
    # - `tz_58_north_central_asia`
    # - `tz_59_namibia`
    # - `tz_60_nepal`
    # - `tz_61_new_zealand`
    # - `tz_62_new_foundland`
    # - `tz_63_north_asia_east`
    # - `tz_64_north_asia`
    # - `tz_65_pacific_sa`
    # - `tz_66_pacific`
    # - `tz_67_pacific_mexico`
    # - `tz_68_pakistan`
    # - `tz_69_paraguay`
    # - `tz_70_romance`
    # - `tz_71_russian`
    # - `tz_72_sa_eastern`
    # - `tz_73_sa_pacific`
    # - `tz_74_sa_western`
    # - `tz_75_samoa`
    # - `tz_76_se_asia`
    # - `tz_77_singapore`
    # - `tz_78_south_africa`
    # - `tz_79_sriLanka`
    # - `tz_80_syria`
    # - `tz_81_taipei`
    # - `tz_82_tasmania`
    # - `tz_83_tokyo`
    # - `tz_84_tonga`
    # - `tz_85_turkey`
    # - `tz_86_ulaanbaatar`
    # - `tz_87_us_eastern`
    # - `tz_88_us_mountain`
    # - `tz_89_venezuela`
    # - `tz_90_vladivostok`
    # - `tz_91_west_australia`
    # - `tz_92_west_central_africa`
    # - `tz_93_west_europe`
    # - `tz_94_west_asia`
    # - `tz_95_west_pacific`
    # - `tz_96_yakutsk`
    string timezoneOffset?;
    # Reserved for DocuSign
    string canManageDistributor?;
    SettingsMetadata localeMetadata?;
    # Reserved for DocuSign
    string canUseSmartContracts?;
    SettingsMetadata templateMatchingSensitivityMetadata?;
    SettingsMetadata supplementalDocumentsMustReadMetadata?;
    # Reserved for DocuSign
    string enableTransactionPoint?;
    # When **true,** the system notifies this user before applying a matching template
    string templateApplyNotify?;
    # 
    string canDeleteDocumentsInTransaction?;
    SettingsMetadata enableSignOnPaperOverrideMetadata?;
    # Information about the seals associated with this user
    SealIdentifier[] sealIdentifiers?;
    SettingsMetadata timezoneOffsetMetadata?;
    UserAccountManagementGranularInformation accountManagementGranular?;
    SettingsMetadata canUseSmartContractsMetadata?;
    SettingsMetadata enableDSProMetadata?;
    LocalePolicy localePolicy?;
    SettingsMetadata allowEnvelopeTransferToMetadata?;
    SettingsMetadata canUseScratchpadMetadata?;
    # Reserved for DocuSign
    string anchorTagVersionedPlacementEnabled?;
    SettingsMetadata recipientViewedNotificationMetadata?;
    # When **true,** Vaulting is enabled for the account
    string enableVaulting?;
    SettingsMetadata timezoneDSTMetadata?;
    # Sets how self-signed documents are presented to the email recipients.
    # Valid values are:
    # 
    # - `include_pdf`: A PDF of the completed document is attached to the email.
    # - `include_link`: A secure link to the self-signed documents is included
    #    in the email.
    # 
    # **Note:** Only Admin users can change this setting
    string selfSignedRecipientEmailDocument?;
    SettingsMetadata disableOtherActionsMetadata?;
    SettingsMetadata allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata?;
    SettingsMetadata canManageDistributorMetadata?;
    # Note referencing the page that modified this user record
    string modifiedPage?;
    SignerEmailNotifications signerEmailNotifications?;
    SettingsMetadata allowSendOnBehalfOfMetadata?;
    # 
    string canDeleteTransaction?;
    SettingsMetadata supplementalDocumentsMustAcceptMetadata?;
    # When **true,** users see template matching functionality
    string templatePageLevelMatching?;
    SettingsMetadata enableSequentialSigningUIMetadata?;
    # When **true,** this user gets supplemental documents when downloading documents
    string supplementalDocumentIncludeInDownload?;
    # The user ID (GUID) of the user who last modified this user record. This property is read-only
    string modifiedBy?;
    # When **true,** indicates that this user can send envelope-specific API requests on the account
    string apiAccountWideAccess?;
    SettingsMetadata timezoneMaskMetadata?;
    SettingsMetadata canChargeAccountMetadata?;
    # When **true,** this user can send envelopes on the account
    string canSendEnvelope?;
    SettingsMetadata canDeleteTransactionMetadata?;
    SettingsMetadata transactionPointUserNameMetadata?;
    # When **true,** the account can define the routing
    # order of recipients for envelopes sent by using the eSignature API.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string enableSequentialSigningAPI?;
    # When **true,** a new template is created each time the user sends an envelope
    string templateActiveCreation?;
    # Reserved for DocuSign
    string transactionPointSiteNameURL?;
    SettingsMetadata vaultingModeMetadata?;
    # Reserved for DocuSign
    string canLockEnvelopes?;
    # 
    string canSendEnvelopesViaSMS?;
    # Reserved for DocuSign
    string newSendUI?;
    # 
    string enableKeyTermsSuggestionsByDocumentType?;
    SettingsMetadata allowRecipientLanguageSelectionMetadata?;
    # When **true,** this user can use the bulk send feature for the account
    string bulkSend?;
    # When **true,** this user can send envelopes "on behalf of" other users through the API
    string allowSendOnBehalfOf?;
    # Indicates the Power Form mode setting for the user:
    # - `none`
    # - `admin`
    # - `user`
    string powerFormMode?;
    # When **true,** this user can set the language used in the standard email format for a recipient when creating an envelope
    string allowRecipientLanguageSelection?;
    # Reserved for DocuSign
    string timezoneSigningPref?;
    SettingsMetadata transactionPointSiteNameURLMetadata?;
    SettingsMetadata webFormsMetadata?;
    SettingsMetadata canSignEnvelopeMetadata?;
    SettingsMetadata apiAccountWideAccessMetadata?;
    # When **true,** this user can use a scratchpad to edit information
    string canUseScratchpad?;
    SettingsMetadata newSendUIMetadata?;
    SettingsMetadata adminOnlyMetadata?;
    # When **true,** this user can include supplemental documents
    string allowSupplementalDocuments?;
    SettingsMetadata bulkSendMetadata?;
    SettingsMetadata canLockEnvelopesMetadata?;
    SettingsMetadata timezoneSendingPrefMetadata?;
    SettingsMetadata manageClickwrapsModeMetadata?;
    # The custom DateTime format setting for this user
    string timezoneMask?;
    # When **true,** this user must view supplemental documents
    string supplementalDocumentsMustView?;
    SettingsMetadata powerFormModeMetadata?;
    # When **true,** the system automatically applies a matching template to a document if only one template matches. If there are multiple matches, it displays a list of matches to select from
    string templateAutoMatching?;
    # Reserved for DocuSign
    string timezoneSendingPref?;
    SettingsMetadata allowSupplementalDocumentsMetadata?;
    SettingsMetadata canSendEnvelopeMetadata?;
    SettingsMetadata enableKeyTermsSuggestionsByDocumentTypeMetadata?;
    SettingsMetadata canSendEnvelopesViaSMSMetadata?;
    SettingsMetadata timezoneSigningPrefMetadata?;
    SettingsMetadata enableVaultingMetadata?;
    SettingsMetadata supplementalDocumentsMustViewMetadata?;
    # When true, this user can edit the shared address book for the account
    string canEditSharedAddressbook?;
    # When **true,** this user must both view and accept supplemental documents
    string supplementalDocumentsMustRead?;
    # Reserved for DocuSign
    string enableDSPro?;
    SettingsMetadata apiCanExportACMetadata?;
    SettingsMetadata canSendAPIRequestsMetadata?;
    # When **true,** the account can define the routing order
    # of recipients for envelopes sent by using the DocuSign application.
    # 
    # **Note:** Only SysAdmin users can change this setting
    string enableSequentialSigningUI?;
    # When **true,** this user can participate in envelope transfers on the account
    string allowEnvelopeTransferTo?;
    # The date on which this user record was last modified
    string modifiedDate?;
    SettingsMetadata canManageAccountMetadata?;
    SettingsMetadata modifiedPageMetadata?;
    # When **true,** a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign documents on paper as an option to signing electronically.
    # 
    # **Note:** Only Admin users can change this setting
    string enableSignOnPaperOverride?;
    SettingsMetadata templateApplyNotifyMetadata?;
    SettingsMetadata canEditSharedAddressbookMetadata?;
    SettingsMetadata templateActiveCreationMetadata?;
    # When **true,** this user is prohibited from uploading documents during sending
    string disableDocumentUpload?;
    SettingsMetadata templatePageLevelMatchingMetadata?;
    SettingsMetadata canManageTemplatesMetadata?;
    # Indicates the specified Vaulting mode:
    # - `none`
    # - `estored`
    # - `electronic_original`
    string vaultingMode?;
    SettingsMetadata canCreateTransactionMetadata?;
    # When **true,** this user can manage templates for the account
    string canManageTemplates?;
    # The user's locale code. Valid values are:
    # - `zh_CN`
    # - `zh_TW`
    # - `nl`
    # - `en`
    # - `fr`
    # - `de`
    # - `it`
    # - `ja`
    # - `ko`
    # - `pt`
    # - `pt_BR`
    # - `ru`
    # - `es`
    string locale?;
    SettingsMetadata disableDocumentUploadMetadata?;
    # Reserved for DocuSign
    string adminOnly?;
    SettingsMetadata allowEsealRecipientsMetadata?;
    SettingsMetadata allowTransactionsMetadata?;
    SettingsMetadata enableSequentialSigningAPIMetadata?;
    # 
    string allowedOrchestrationAccess?;
    # When **true,** this user must accept supplemental documents
    string supplementalDocumentsMustAccept?;
    # Percentage used when matching templates
    string templateMatchingSensitivity?;
    # When **true,** this user can send API requests on the account
    string canSendAPIRequests?;
    SettingsMetadata modifiedByMetadata?;
    # When **true,** this user can sign envelopes
    string canSignEnvelope?;
    SettingsMetadata selfSignedRecipientEmailDocumentMetadata?;
    SenderEmailNotifications senderEmailNotifications?;
    SettingsMetadata allowedOrchestrationAccessMetadata?;
    # When **true,** this user can use the signing attachments feature
    string enableSignerAttachments?;
    # When **true,** this user can create [electronic seal recipients][eseal].
    # 
    # [eseal]: /docs/esign-rest-api/reference/envelopes/enveloperecipients/#seal-recipient
    string allowEsealRecipients?;
    # When **true,** this user can create and manage [Clickwraps](/docs/click-api/)
    string manageClickwrapsMode?;
    # 
    string allowTransactions?;
    # 
    string webForms?;
    # When **true,** this user receives notifications when envelopes are viewed
    string recipientViewedNotification?;
    SettingsMetadata enableTransactionPointMetadata?;
    # When **false,** this user can apply tabs to documents during the sending experience
    string expressSendOnly?;
    # Reserved for DocuSign
    string canChargeAccount?;
};

# 
public type NewUsersDefinition record {
    # A list of one or more new users
    UserInformation[] newUsers?;
};

# Describes which account management capabilities a user has
public type UserAccountManagementGranularInformation record {
    # **True** if the user can manage users
    string canManageUsers?;
    SettingsMetadata canManageUsersMetadata?;
    SettingsMetadata canManageGroupsButNotUsersMetadata?;
    # 
    string canManageGroupsButNotUsers?;
    SettingsMetadata canManageReportingMetadata?;
    SettingsMetadata canManageDocumentRetentionMetadata?;
    # 
    string canManageJointAgreements?;
    SettingsMetadata canManageConnectMetadata?;
    # 
    string canManageEnvelopeTransfer?;
    # 
    string canManageDocumentRetention?;
    SettingsMetadata canManageAccountSecuritySettingsMetadata?;
    SettingsMetadata canManageEnvelopeTransferMetadata?;
    SettingsMetadata canManageJointAgreementsMetadata?;
    # 
    string canManageStamps?;
    # 
    string canManageConnect?;
    # **True** if the user can manage reporting
    string canManageReporting?;
    # **True** if the user can manage administrators
    string canManageAdmins?;
    # **True** if the user can manage account settings
    string canManageAccountSettings?;
    SettingsMetadata canManageAdminsMetadata?;
    SettingsMetadata canManageSharingMetadata?;
    # **True** if the user can manage signing groups
    string canManageSigningGroups?;
    # **True** if the user can manage account security settings
    string canManageAccountSecuritySettings?;
    SettingsMetadata canManageStampsMetadata?;
    SettingsMetadata canManageAccountSettingsMetadata?;
    # **True** if the user can manage sharing
    string canManageSharing?;
    # 
    string canViewUsers?;
    SettingsMetadata canManageSigningGroupsMetadata?;
};

# Represents the Queries record for the operation: SharedAccess_GetSharedAccess
public type SharedAccessGetSharedAccessQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # A comma-separated list of sharing filters that specifies which users appear in the response. 
    # 
    # - `not_shared`: The response lists users who do not share items of `item_type` with the current user.
    # 
    # - `shared_to`: The response lists users in `user_list` who are sharing items to current user.
    # 
    # - `shared_from`: The response lists users in `user_list` who are sharing items from the current user.
    # 
    # - `shared_to_and_from`: The response lists users in `user_list` who are sharing items to and from the current user.
    # 
    # If the current user does not have administrative privileges, only the `shared_to` option is valid
    string shared?;
    # Specifies the type of shared item being requested. Valid values:
    # 
    # - `envelopes`: Get information about envelope sharing between users.
    # - `templates`: Get information about template sharing among users and groups.
    # - `folders`: Get information about folder sharing among users and groups
    @http:Query {name: "item_type"}
    string itemType?;
    # A comma-separated list of user IDs for whom the shared item information is being requested
    @http:Query {name: "user_ids"}
    string userIds?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Default: `1000`
    string count?;
    # This query parameter works in conjunction with `user_ids`. When you specify one of the following user statuses, the query limits the results to only users that match the specified status:
    # - `ActivationRequired`: Membership Activation required
    # - `ActivationSent`: Membership activation sent to user
    # - `Active`: User Membership is active
    # - `Closed`: User Membership is closed
    # - `Disabled`: User Membership is disabled
    @http:Query {name: "envelopes_not_shared_user_status"}
    string envelopesNotSharedUserStatus?;
    # A comma-separated list of folder IDs for which to return shared item information. If `item_type` is set to `folders`, at least one folder ID is required
    @http:Query {name: "folder_ids"}
    string folderIds?;
    # Filter user names based on the specified string. The wild-card '*' (asterisk) can be used in the string
    @http:Query {name: "search_text"}
    string searchText?;
};

# Contains information about the signature provider associated with the Identity Verification workflow.
# If empty, then this specific workflow is not intended for signers
public type AccountSignatureProvider record {
    # The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details, see [the current provider list](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/). You can also retrieve the list by using the [AccountSignatureProviders: List](/docs/esign-rest-api/reference/accounts/accountsignatureproviders/list/) method.
    # 
    # Example: `universalsignaturepen_default`
    string signatureProviderName?;
    # Reserved for DocuSign
    string isRequired?;
    # Reserved for DocuSign
    string signatureProviderId?;
    # Reserved for DocuSign
    AccountSignatureProviderOption[] signatureProviderOptionsMetadata?;
    # Reserved for DocuSign
    string priority?;
    # Reserved for DocuSign
    SignatureProviderRequiredOption[] signatureProviderRequiredOptions?;
    # Reserved for DocuSign
    string signatureProviderDisplayName?;
};

# Details about one or more brands
public type BrandsRequest record {
    # A list of brands
    BrandRequest[] brands?;
};

# 
public type ConsentDetails record {
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # 
    string signerConsentStatus?;
    # 
    string consentKey?;
};

# Contains information about add ons
public type AddOn record {
    # Reserved for DocuSign
    string name?;
    # Reserved for DocuSign
    string active?;
    # A unique ID for the Salesforce object
    string id?;
    # Reserved for DocuSign
    string addOnId?;
};

# Information about a shared item
public type UserSharedItem record {
    # How the item is shared. One of:
    # 
    # - `not_shared`
    # - `shared_to`
    # - `shared_from`
    # - `shared_to_and_from`
    string shared?;
    UserInfo user?;
    ErrorDetails errorDetails?;
};

# Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents. 
public type CarbonCopy record {
    # Not applicable for Carbon Copy recipients
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    PropertyMetadata requireIdLookupMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    # Optional element. When **true,** the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account
    string agentCanEditEmail?;
    # Optional element. When **true,** the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account
    string agentCanEditName?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The recipient's first name. Maximum Length: 50 characters
    string firstName?;
    # 
    string linkedAccountConfigurationId?;
    RecipientPhoneNumber phoneNumber?;
    # The full legal name of the recipient. Maximum Length: 100 characters.
    # 
    # **Note:** You must always set a value for this property in requests, even if `firstName` and `lastName` are set
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    # 
    # When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent
    string[] excludedDocuments?;
    PropertyMetadata routingOrderMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # The recipient's status. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only
    string statusCode?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The recipient's last name
    string lastName?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    EnvelopeRecipientTabs tabs?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    RecipientProofFile proofFile?;
    RecipientSMSAuthentication smsAuthentication?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The recipient's email address. Notification of the document to sign is sent to this email address. 
    # 
    # Maximum length: 100 characters. 
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    PropertyMetadata firstNameMetadata?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # 
    string emailRecipientPostSigningURL?;
};

# Describes a single step in a workflow
public type WorkflowStep record {
    # The timestamp of when the workflow step transitioned to `in_progress` status.
    # 
    # This property is read-only
    string triggeredDate?;
    # The type of item that triggers this workflow step. Valid values:
    # 
    # * `routing_order`
    string triggerOnItem?;
    # The unique ID of the item being triggered
    string itemId?;
    # Indicates the action to perform. Valid values:
    # 
    # - `pause_before`: The workflow should pause before the trigger described by `triggerOnItem` is reached
    string action?;
    RecipientRouting recipientRouting?;
    DelayedRouting delayedRouting?;
    # The timestamp of when the workflow step transitioned to `completed` status.
    # 
    # This property is read-only
    string completedDate?;
    # The status of the step. Valid values:
    # 
    # - `inactive`
    # - `in_progress`
    # - `paused`
    # - `pending`
    # - `completed`
    # 
    # This property is read-only
    string status?;
    # A unique identifier for this workflow step.
    # 
    # This property is read-only
    string workflowStepId?;
};

# 
public type PowerFormsRequest record {
    # An array of PowerForm objects
    PowerForm[] powerForms?;
};

# Represents the Queries record for the operation: Templates_GetDocumentTemplates
public type TemplatesGetDocumentTemplatesQueries record {
    # A comma-separated list that limits the results.
    # Valid values are:
    # 
    # * `applied`
    # * `matched`
    string include?;
};

# Represents the Queries record for the operation: EnvelopeTransferRules_GetEnvelopeTransferRules
public type EnvelopeTransferRulesGetEnvelopeTransferRulesQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip
    string count?;
};

# 
public type AccountSignature record {
    # The realtor's last name
    string nrdsLastName?;
    # The ID of the user's signature image
    string signature150ImageId?;
    # The date and time that the item was last modified
    string lastModifiedDateTime?;
    # The phonetic spelling of the `signatureName`
    string phoneticName?;
    # The type of stamp. Valid values are:
    # 
    # - `signature`: A signature image. This is the default value.
    # - `stamp`: A stamp image.
    # - null
    string stampType?;
    # The UTC DateTime when the item was created
    string createdDateTime?;
    # Optionally specify an external identifier for the user's signature
    string externalID?;
    # Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID
    string signatureId?;
    # The format of a stamp. Valid values are:
    # 
    # - `NameHanko`: The stamp represents only the signer's name.
    # - `NameDateHanko`: The stamp represents the signer's name and the date. 
    string stampFormat?;
    # 
    SignatureUser[] signatureUsers?;
    # 
    string imageBase64?;
    # The UTC date and time when the user adopted the signature
    string adoptedDateTime?;
    # The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.
    # 
    # - `"1_DocuSign"`
    # - `"2_DocuSign"`
    # - `"3_DocuSign"`
    # - `"4_DocuSign"`
    # - `"5_DocuSign"`
    # - `"6_DocuSign"`
    # - `"7_DocuSign"`
    # - `"8_DocuSign"`
    # - `"Mistral"`
    # - `"Rage Italic"`
    string signatureFont?;
    # Specifies the user's signature name
    string signatureName?;
    # An endpoint URI that you can use to retrieve the user's signature image
    string signatureImageUri?;
    # Specificies the type of image. Valid values:
    # 
    # - `stamp_image`
    # - `signature_image`
    # - `initials_image`
    string imageType?;
    # The URI for retrieving the image of the user's stamp
    string stampImageUri?;
    # The National Association of Realtors (NAR) membership ID for a user who is a realtor
    string nrdsId?;
    # 
    SignatureGroup[] signatureGroups?;
    # The rights that the user has to the signature. Valid values are:
    # 
    # - `none`
    # - `read`
    # - `admin`
    string signatureRights?;
    # The ID of the user's initials image
    string initials150ImageId?;
    # Specifies the type of signature
    string signatureType?;
    # The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents
    string stampSizeMM?;
    # 
    string customField?;
    # The URI for retrieving the image of the user's initials
    string initialsImageUri?;
    # Boolean that specifies whether the signature is the default signature for the user
    string isDefault?;
    # When **true,** users may not resize the stamp
    string disallowUserResizeStamp?;
    # The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:
    # 
    # - `Active`
    # - `Inactive`
    # - `Terminate`
    # - `Provisional`
    # - `Deceased`
    # - `Suspend`
    # - `Unknown`
    string nrdsStatus?;
    DateStampProperties dateStampProperties?;
    # Specifies the user's signature in initials format
    string signatureInitials?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
};

# Contains information about an APP store receipt
public type AppStoreReceipt record {
    # The Product ID from the AppStore
    string productId?;
    # 
    string isDowngradeCancellation?;
    # 
    string downgradeProductId?;
    # Reserved for DocuSign
    string receiptData?;
};

# 
public type DocumentHtmlDisplayAnchor record {
    DocumentHtmlDisplaySettings displaySettings?;
    # Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.
    # 
    # **Note:** A start anchor, an end anchor, or both are required
    string startAnchor?;
    # When **true,** the start or end anchor strings must match the strings specified by the start and end anchor settings in case as well as in content
    boolean caseSensitive?;
    # Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.
    # 
    # **Note:** A start anchor, an end anchor, or both are required
    string endAnchor?;
    # When **true,** removes the end anchor string for the Smart Section from the HTML, preventing it from displaying
    boolean removeEndAnchor?;
    # When **true,** removes the start anchor string for the Smart Section from the HTML, preventing it from displaying
    boolean removeStartAnchor?;
};

# 
public type AccountSignaturesInformation record {
    # 
    AccountSignature[] accountSignatures?;
};

# Envelope locks let you lock an envelope to prevent any changes while you are updating an envelope
public type EnvelopeLocks record {
    # The date and time that the lock expires
    string lockedUntilDateTime?;
    # When **true,** a scratchpad is used to edit information.
    #  
    string useScratchPad?;
    # A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock
    string lockToken?;
    # The type of lock.  Currently `edit` is the only supported type
    string lockType?;
    # 
    # The number of seconds until the lock expires when there is no activity on the envelope.
    # 
    # The default value is 300 seconds. The maximum value is 1,800 seconds.
    # 
    # The lock duration can be extended
    string lockDurationInSeconds?;
    # The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur
    string lockedByApp?;
    ErrorDetails errorDetails?;
    UserInfo lockedByUser?;
};

# 
public type TemplateRecipients1 record {
    # A list of notary recipients on the envelope
    NotaryRecipient[] notaries?;
    # The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient, but he or she has not completed the required actions
    string currentRoutingOrder?;
    # Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected
    InPersonSigner[] inPersonSigners?;
    # A list of agent recipients assigned to the documents
    Agent[] agents?;
    # A list of signers on the envelope
    Signer[] signers?;
    # The list of recipient event statuses that will trigger Connect to send updates to the url. It can be a two-part list with:
    # 
    # * recipientEventStatusCode - The recipient status, this can be Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
    # * includeDocuments - When **true,** the envelope time zone information is included in the message
    string recipientCount?;
    # Specifies one or more electronic seals to apply on documents. For more information on Electronic Seals , see https://support.docusign.com/s/document-item?bundleId=xcm1643837555908&topicId=isl1578456577247.html
    SealSign[] seals?;
    # A list of carbon copy recipients assigned to the documents
    CarbonCopy[] carbonCopies?;
    # Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added)
    Intermediary[] intermediaries?;
    # A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents
    CertifiedDelivery[] certifiedDeliveries?;
    # A list of users who can edit the envelope
    Editor[] editors?;
    ErrorDetails errorDetails?;
    # 
    Participant[] participants?;
    # A list of signers who act as witnesses on the envelope
    Witness[] witnesses?;
};

# Represents the Queries record for the operation: Recipients_GetRecipientSignatureImage
public type RecipientsGetRecipientSignatureImageQueries record {
    # When **true,** the response includes the chromed version of the signature image
    @http:Query {name: "include_chrome"}
    string includeChrome?;
};

# 
public type RecipientRules record {
    # 
    ConditionalRecipientRule[] conditionalRecipients?;
};

# Represents the Queries record for the operation: CloudStorageFolder_GetCloudStorageFolder
public type CloudStorageFolderGetCloudStorageFolderQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # The file path to a cloud storage folder
    @http:Query {name: "cloud_storage_folder_path"}
    string cloudStorageFolderPath?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Default: `25`
    string count?;
    # The file attribute to use to sort the results.
    # 
    # Valid values are: 
    # 
    # * `modified`
    # * `name`
    @http:Query {name: "order_by"}
    string orderBy?;
    # A plain-text folder ID that you can use as an alternative to the existing folder id. This property is mainly used for rooms. Enter multiple folder IDs as a comma-separated list
    @http:Query {name: "cloud_storage_folderid_plain"}
    string cloudStorageFolderidPlain?;
    # The order in which to sort the results.
    # 
    # Valid values are: 
    # 
    # 
    # * `asc`: Ascending order.
    # * `desc`: Descending order. 
    string 'order?;
    # Use this parameter to search for specific text
    @http:Query {name: "search_text"}
    string searchText?;
};

# Represents the Queries record for the operation: Tabs_GetDocumentTabs
public type TabsGetDocumentTabsQueries record {
    # Filters for tabs that occur on the pages that you specify. Enter as a comma-separated list of page GUIDs.
    # 
    # Example: `page_numbers=2,6`
    # 
    # Note: You can only enter individual page numbers, and not a page range
    @http:Query {name: "page_numbers"}
    string pageNumbers?;
    # When **true,** the response includes metadata indicating which properties are editable
    @http:Query {name: "include_metadata"}
    string includeMetadata?;
};

# Represents the Queries record for the operation: Documents_PutTemplateDocument
public type DocumentsPutTemplateDocumentQueries record {
    @http:Query {name: "is_envelope_definition"}
    string isEnvelopeDefinition?;
};

# 
public type UserSignature record {
    # The realtor's last name
    string nrdsLastName?;
    # The ID of the user's signature image
    string signature150ImageId?;
    # The date and time that the item was last modified
    string lastModifiedDateTime?;
    # The phonetic spelling of the `signatureName`
    string phoneticName?;
    # The type of stamp. Valid values are:
    # 
    # - `signature`: A signature image. This is the default value.
    # - `stamp`: A stamp image.
    # - null
    string stampType?;
    # The UTC DateTime when the item was created
    string createdDateTime?;
    # Optionally specify an external identifier for the user's signature
    string externalID?;
    # Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID
    string signatureId?;
    # The format of a stamp. Valid values are:
    # 
    # - `NameHanko`: The stamp represents only the signer's name.
    # - `NameDateHanko`: The stamp represents the signer's name and the date. 
    string stampFormat?;
    # A Base64-encoded representation of the signature image
    string imageBase64?;
    # The date and time the user adopted their signature
    string adoptedDateTime?;
    # The font type for the signature, if the signature is not drawn. The supported font types are:
    # 
    # "7_DocuSign", "1_DocuSign", "6_DocuSign", "8_DocuSign", "3_DocuSign", "Mistral", "4_DocuSign", "2_DocuSign", "5_DocuSign", "Rage Italic"
    string signatureFont?;
    # Specifies the user's signature name
    string signatureName?;
    # An endpoint URI that you can use to retrieve the user's signature image
    string signatureImageUri?;
    # Specificies the type of image. Valid values:
    # 
    # - `stamp_image`
    # - `signature_image`
    # - `initials_image`
    string imageType?;
    # The URI for retrieving the image of the user's stamp
    string stampImageUri?;
    # The National Association of Realtors (NAR) membership ID for a user who is a realtor
    string nrdsId?;
    # The rights that the user has to the signature. Valid values are:
    # 
    # - `none`
    # - `read`
    # - `admin`
    string signatureRights?;
    # The ID of the user's initials image
    string initials150ImageId?;
    # Specifies the type of signature
    string signatureType?;
    # The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents
    string stampSizeMM?;
    # 
    string customField?;
    # The URI for retrieving the image of the user's initials
    string initialsImageUri?;
    # Boolean that specifies whether the signature is the default signature for the user
    string isDefault?;
    # When **true,** users may not resize the stamp
    string disallowUserResizeStamp?;
    # The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:
    # 
    # - `Active`
    # - `Inactive`
    # - `Terminate`
    # - `Provisional`
    # - `Deceased`
    # - `Suspend`
    # - `Unknown`
    string nrdsStatus?;
    DateStampProperties dateStampProperties?;
    #  The initials associated with the signature
    string signatureInitials?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
};

# These properties define how a Smart Section displays. A Smart Section is a type of display section
public type SmartSectionDisplaySettings record {
    # The label to add to this display section in the signing page
    string displayLabel?;
    # Enables you to add descriptive text that appears before a collapsed section or continue button
    string preLabel?;
    # The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value of the `display` property is `collapsed`
    string labelWhenOpened?;
    # Indicates the display type. Must be one of the following enum values:
    # 
    # - **inline:** Leaves the HTML where it is in the document. This allows for adding a label or presenting on a separate page.
    # - **collapsible:** The HTML in the section may be expanded or collapsed. By default, the section is expanded.
    # - **collapsed:** The HTML in the section may be expanded or collapsed. By default, the section is collapsed.
    # - **responsive_table:** Converts the section into a responsive table. Note that this style is applied only on HTML tables that fall within the `startAnchor` and `endAnchor` positions.
    # - **responsive_table_single_column:** Converts the section into a responsive, single-column table. Note that this style is applied only on HTML tables that fall within the `startAnchor` and `endAnchor` positions. The table is converted to a single column in which each column becomes a row and is stacked.
    # - **print_only:** Prevents this portion of the HTML from displaying in the responsive signing view
    string display?;
    # Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`
    string inlineOuterStyle?;
    # The position on the page where the display section appears
    int:Signed32 displayOrder?;
    # Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is `responsive_table` or `responsive_table_single_column`
    string tableStyle?;
    # When **true** and the section is expanded,
    # the position of the section-close control
    # scrolls to the top of the screen. This property is only valid when the value of the `display` property is `collapsed`
    boolean scrollToTopWhenOpened?;
    SmartSectionCollapsibleDisplaySettings collapsibleSettings?;
    # Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types
    string cellStyle?;
    # The number of the page on which the display section appears
    int:Signed32 displayPageNumber?;
    # When **true,** the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible. This property is valid only when the value of the `display` property is `collapsed`
    boolean hideLabelWhenOpened?;
};

# 
public type AccountPasswordLockoutDurationType record {
    # An array of option strings supported by this setting
    string[] options?;
};

# 
public type ConditionalRecipientRuleCondition record {
    # An identifier for the recipient. After assigning this value in a `recipient` object, you can reference it in the `conditions` object to set the recipient as a conditional recipient. For an example, see [How to use conditional recipients](/docs/esign-rest-api/how-to/use-conditional-recipients/)
    string recipientLabel?;
    # 
    ConditionalRecipientRuleFilter[] filters?;
    # An integer that specifies the order in which rules are processed.
    # Lower values are processed before higher values
    string 'order?;
};

# Represents the Queries record for the operation: Envelopes_PutEnvelope
public type EnvelopesPutEnvelopeQueries record {
    # When **true,**
    # sends the specified envelope again
    @http:Query {name: "resend_envelope"}
    string resendEnvelope?;
    # When **true,** allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes
    @http:Query {name: "advanced_update"}
    string advancedUpdate?;
};

# An object that describes the user authorizations to create or update
public type UserAuthorizationsRequest record {
    # The list of user authorizations to create and/or update
    UserAuthorizationCreateRequestWithId[] authorizations?;
};

# Reserved for DocuSign
public type OfflineAttributes record {
    # Reserved for DocuSign
    string gpsLongitude?;
    # Reserved for DocuSign
    string accountEsignId?;
    # Reserved for DocuSign
    string offlineSigningHash?;
    # Reserved for DocuSign
    string deviceModel?;
    # Reserved for DocuSign
    string deviceName?;
    # Reserved for DocuSign
    string gpsLatitude?;
};

# Represents the Queries record for the operation: Recipients_PostRecipients
public type RecipientsPostRecipientsQueries record {
    # When **true,**
    # forces the envelope to be resent
    # if it would not be resent otherwise.
    # 
    # Ordinarily, if the recipient's routing order
    # is before or the same as the envelope's next recipient,
    # the envelope is not resent.
    # 
    # Setting this query parameter
    # to **false** has no effect and is the same as omitting
    # it altogether
    @http:Query {name: "resend_envelope"}
    string resendEnvelope?;
};

# The request object to create a user authorization
public type UserAuthorizationCreateRequest record {
    # The UTC DateTime to end the authorization. The default value is the max UTC value (`9999-12-31T23:59:59.0000000+00:00`)
    string endDate?;
    # The permission level to grant the agent. Valid values:
    # * `Send`
    # * `Manage`
    # * `Sign`
    # 
    # This property is required
    string permission?;
    AuthorizationUser agentUser?;
    # The UTC DateTime to initiate the authorization. The default value is the current date and time
    string startDate?;
};

# Object specifying the format of the string provided to a recipient in order to access an envelope
public type AccessCodeFormat record {
    SettingsMetadata numberRequiredMetadata?;
    SettingsMetadata specialCharacterRequiredMetadata?;
    # Boolean specifying whether alphabetical characters are required in the access code string
    string letterRequired?;
    # Minimum length of the access code string
    string minimumLength?;
    # Boolean specifying whether numerical characters (0-9) are required in the access code string
    string numberRequired?;
    SettingsMetadata minimumLengthMetadata?;
    SettingsMetadata letterRequiredMetadata?;
    # Boolean specifying whether this format configuration is required
    string formatRequired?;
    # Boolean specifying whether special characters are required in the access code string. The string cannot contain the special characters '<', '>', '&', or '#'
    string specialCharacterRequired?;
    SettingsMetadata formatRequiredMetadata?;
};

# A complex element consisting of: 
# 
# * lastSentDateTime - the date and time the user last sent an envelope. 
# * lastSignedDateTime - the date and time the user last signed an envelope.
# * sentCount - the number of envelopes the user has sent.
# * signedCount - the number of envelopes the user has signed
public type UsageHistory record {
    # The date and time the user last signed an envelope
    string lastSignedDateTime?;
    # The number of envelopes the user has signed. 
    string signedCount?;
    # The date and time the user last sent an envelope. 
    string lastSentDateTime?;
    # The number of envelopes the user has sent. 
    string sentCount?;
};

# Represents the Queries record for the operation: Groups_GetGroupUsers
public type GroupsGetGroupUsersQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Valid values: `1` to `100`
    string count?;
};

# Represents the Queries record for the operation: Users_DeleteUsers
public type UsersDeleteUsersQueries record {
    # A list of groups to remove the user from.
    # A comma-separated list of the following:
    # 
    # - `Groups`
    # - `PermissionSet`
    # - `SigningGroupsEmail`
    string delete?;
};

# Holds the properties that define how to generate the responsive-formatted HTML for the document.
# See [Responsive signing](/docs/esign-rest-api/esign101/concepts/responsive/)
# in the [eSignature concepts guide](/docs/esign-rest-api/esign101/concepts/)
public type DocumentHtmlDefinition record {
    # Header text or an HTML tag to place above the responsive HTML block
    string headerLabel?;
    # The position on the page where the display section appears
    string displayOrder?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    # If set, the responsive HTML version of the signing document will only display on screens with the specified pixel width or less. If the screen is larger than the value that you specify, the default PDF version of the content displays instead.
    # 
    # This setting can also be configured at the account level
    string maxScreenWidth?;
    # Contains text that all display anchors must start with. Using at least four characters will improve anchor processing performance
    string displayAnchorPrefix?;
    # Holds a comma-separated list of HTML tags to remove if they have no text within their node (including child nodes)
    string removeEmptyTags?;
    # Specifies the type of responsive signing that will be used with the document.
    # 
    # If the value of this property is valid HTML,
    # and the [smart sections feature][] is enabled,
    # the HTML code is used to display the signing page:
    # 
    # ```
    # source: "<html> ... <body><p>hello world</p></body></html>"
    # ```
    # 
    # If the value of this property is the string `document`,
    # the HTML signing page is generated from the provided document.
    # 
    # ```
    # source: "document"
    # ```
    # 
    # **Related topics**
    # 
    # - [How to create a signable HTML document](/docs/esign-rest-api/how-to/creating-signable-html/)
    # - [How to convert a PDF file into a signable HTML document](/docs/esign-rest-api/how-to/converting-pdf/)
    # - [Responsive signing](/docs/esign-rest-api/esign101/concepts/responsive/)
    # 
    # 
    # [smart sections feature]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=qlx1578456478178.html
    string 'source?;
    # An object that defines how to handle a section of the HTML in signing. This property enables an incoming request to make a section of the HTML collapsible and expandable or hidden from view.
    # 
    # A start anchor, end anchor, or both are required.
    # If the anchors are not found, the display anchor will be ignored.
    # 
    # For a list of the available types, see the
    # [`display` property](/docs/esign-rest-api/reference/envelopes/envelopes/create/#schema__envelopedefinition_documents_htmldefinition_displayanchors_displaysettings_display)
    # of the
    # [`displaySettings` object.](/docs/esign-rest-api/reference/envelopes/envelopes/create/#schema__envelopedefinition_documents_htmldefinition_displayanchors_displaysettings)
    DocumentHtmlDisplayAnchor[] displayAnchors?;
    # The number of the page on which the display section appears
    string displayPageNumber?;
    # The GUID of the document
    string documentGuid?;
    # When **true** (the default), the **Mobile-Friendly** toggle displays at the top of the screen on the user's mobile device. When **false,** the toggle will not be displayed.
    # 
    # the **Mobile-Friendly** toggle lets the user switch between the mobile-friendly and the PDF versions of a document. For example, the recipient can use this toggle to review the document using the PDF view before they finish signing
    string showMobileOptimizedToggle?;
};

# 
public type AccountPasswordStrengthTypeOption record {
    # When **true,** passwords must include an uppercase letter. The default value is `false`
    string passwordIncludeUpperCase?;
    # Minimum length of the access code string
    string minimumLength?;
    # When **true,** passwords must include either a digit or a special character. The default value is `false`.
    # 
    # **Note:** Passwords cannot include angle brackets (`<` `>`) or spaces
    string passwordIncludeDigitOrSpecialCharacter?;
    # When **true,** passwords must include a lowercase letter. The default value is `false`
    string passwordIncludeLowerCase?;
    # 
    string name?;
    # When **true,** passwords must include a digit. The default value is `false`
    string passwordIncludeDigit?;
    # When **true,** passwords must include a special character. The default value is `false`.
    # 
    # **Note:** Passwords cannot include angle brackets (`<` `>`) or spaces
    string passwordIncludeSpecialCharacter?;
};

# Metadata that indicates whether a property is editable and describes setting-specific options
public type SettingsMetadata record {
    # When **true,** indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES)
    string is21CFRPart11?;
    # Indicates whether the property is editable. Valid values are:
    # 
    # - `editable`
    # - `read_only`
    string rights?;
    # An array of option strings supported by this setting
    string[] options?;
    # Reserved for DocuSign
    string uiType?;
    # Reserved for DocuSign
    string uiHint?;
    # Reserved for DocuSign
    string uiOrder?;
};

# Describes document generation errors
public type DocGenSyntaxError record {
    # A code associated with the error condition
    string errorCode?;
    # The error message
    string message?;
    # The tag that caused the syntax error.
    # See [Document Generation Syntax](https://support.docusign.com/s/document-item?bundleId=als1679428547895&topicId=ftc1679700030026.html)
    # to learn more about document generation syntax rules
    string tagIdentifier?;
};

# 
public type SenderCompany record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # 
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# 
public type UserProfile record {
    AddressInformation address?;
    # Indicates the authentication methods that the user uses. These properties cannot be modified by the PUT operation. 
    AuthenticationMethod[] authenticationMethods?;
    # The name of the user's company
    string companyName?;
    # When **true,** the user's address and phone number display on the ID card
    string displayPersonalInfo?;
    #  When **true,** the user's company and title information display on the ID card. 
    string displayOrganizationInfo?;
    # When **true,** the user's usage information displays on the ID card
    string displayUsageHistory?;
    # The URL for retrieving the user's profile image
    string profileImageUri?;
    UsageHistory usageHistory?;
    # When **true,** the user's ID card can be viewed from signed documents and envelope history
    string displayProfile?;
    # The title of the user
    string title?;
    UserInformation userDetails?;
    # The date and time that the user's profile was last modified
    string userProfileLastModifiedDate?;
};

# Represents the Queries record for the operation: PowerForms_GetPowerFormsList
public type PowerFormsGetPowerFormsListQueries record {
    # The start date for a date range.
    # 
    # **Note:** If no value is provided, no date filtering is applied
    @http:Query {name: "from_date"}
    string fromDate?;
    # A comma-separated list of additional properties to include in a search.
    # 
    # - `sender`: Include sender name and email in the search.
    # - `recipients`: Include recipient names and emails in the search.
    # - `envelope`: Include envelope information in the search
    @http:Query {name: "search_fields"}
    string searchFields?;
    # The end date for a date range.
    # 
    # **Note:** If no value is provided, this property defaults to the current date
    @http:Query {name: "to_date"}
    string toDate?;
    # The file attribute to use to sort the results.
    # 
    # Valid values are:
    # 
    # - `sender`
    # - `auth`
    # - `used`
    # - `remaining`
    # - `lastused`
    # - `status`
    # - `type`
    # - `templatename`
    # - `created`
    @http:Query {name: "order_by"}
    string orderBy?;
    # The order in which to sort the results.
    # 
    # Valid values are: 
    # 
    # 
    # * `asc`: Ascending order.
    # * `desc`: Descending order. 
    string 'order?;
    # Use this parameter to search for specific text
    @http:Query {name: "search_text"}
    string searchText?;
};

# Represents the Queries record for the operation: BillingPlan_GetBillingPlan
public type BillingPlanGetBillingPlanQueries record {
    @http:Query {name: "include_tax_exempt_id"}
    string includeTaxExemptId?;
    # When **true,** excludes successor information from the response
    @http:Query {name: "include_successor_plans"}
    string includeSuccessorPlans?;
    # When **true,** payment information including credit card information will show in the return
    @http:Query {name: "include_credit_card_information"}
    string includeCreditCardInformation?;
    # When **true,** the `canUpgrade` and `renewalStatus` properties are included the response and an array of `supportedCountries` is added to the `billingAddress` information. 
    @http:Query {name: "include_metadata"}
    string includeMetadata?;
    @http:Query {name: "include_downgrade_information"}
    string includeDowngradeInformation?;
};

# A complex object specifying the external document sources
public type ExternalDocumentSources record {
    # The account is enabled to allow external documents to be attached from Google Drive
    string googleDriveEnabled?;
    SettingsMetadata boxnetMetadata?;
    # The account is enabled to allow external documents to be attached from DropBox
    string dropboxEnabled?;
    SettingsMetadata dropboxMetadata?;
    SettingsMetadata oneDriveMetadata?;
    SettingsMetadata salesforceMetadata?;
    # The account is enabled to allow external documents to be attached from BoxNet
    string boxnetEnabled?;
    # The account is enabled to allow external documents to be attached from Salesforce
    string salesforceEnabled?;
    SettingsMetadata googleDriveMetadata?;
    # The account is enabled to allow external documents to be attached from OneDrive
    string oneDriveEnabled?;
};

# Represents the Queries record for the operation: ConsumerDisclosure_GetConsumerDisclosureEnvelopeIdRecipientId
public type ConsumerDisclosureGetConsumerDisclosureEnvelopeIdRecipientIdQueries record {
    # (Optional) The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:
    # 
    # - Arabic (`ar`)
    # - Bulgarian (`bg`)
    # - Czech (`cs`)
    # - Chinese Simplified (`zh_CN`)
    # - Chinese Traditional (`zh_TW`)
    # - Croatian (`hr`)
    # - Danish (`da`)
    # - Dutch (`nl`)
    # - English US (`en`)
    # - English UK (`en_GB`)
    # - Estonian (`et`)
    # - Farsi (`fa`)
    # - Finnish (`fi`)
    # - French (`fr`)
    # - French Canadian (`fr_CA`)
    # - German (`de`)
    # - Greek (`el`)
    # - Hebrew (`he`)
    # - Hindi (`hi`)
    # - Hungarian (`hu`)
    # - Bahasa Indonesian (`id`)
    # - Italian (`it`)
    # - Japanese (`ja`)
    # - Korean (`ko`)
    # - Latvian (`lv`)
    # - Lithuanian (`lt`)
    # - Bahasa Melayu (`ms`)
    # - Norwegian (`no`)
    # - Polish (`pl`)
    # - Portuguese (`pt`)
    # - Portuguese Brazil (`pt_BR`)
    # - Romanian (`ro`)
    # - Russian (`ru`)
    # - Serbian (`sr`)
    # - Slovak (`sk`)
    # - Slovenian (`sl`)
    # - Spanish (`es`)
    # - Spanish Latin America (`es_MX`)
    # - Swedish (`sv`)
    # - Thai (`th`)
    # - Turkish (`tr`)
    # - Ukrainian (`uk`) 
    # - Vietnamese (`vi`)
    # 
    # Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`
    string langCode?;
};

# 
public type DocumentTemplateList record {
    # 
    DocumentTemplate[] documentTemplates?;
};

# The request body for the [EnvelopeViews: createCorrect](/docs/esign-rest-api/reference/envelopes/envelopeviews/createcorrect/) method
public type CorrectViewRequest record {
    # 
    string beginOnTagger?;
    # Specifies whether the window is displayed with or without dressing
    string suppressNavigation?;
    # 
    string viewUrl?;
    # (Required) The URL to which the user should be redirected after
    # the view session has ended.
    # 
    # Maximum Length: 470 characters. If the `returnUrl` exceeds this
    # limit, the user is redirected to a truncated URL
    # Be sure to include `https://` in the URL
    # or redirecting might fail on some browsers.
    # 
    # When DocuSign redirects to
    # this URL, it will include an `event` query parameter that your app can use:
    # 
    # * `send`: User corrected and sent the envelope.
    # * `save`: User saved the envelope.
    # * `cancel`: User canceled the transaction.
    # * `error`: There was an error when performing the correct or send.
    # * `sessionEnd`: The session ended before the user completed a different action
    string returnUrl?;
};

# Represents the Queries record for the operation: Recipients_GetTemplateRecipients
public type RecipientsGetTemplateRecipientsQueries record {
    #  When **true** and `include_tabs` is set to **true,** all tabs with anchor tab properties are included in the response. 
    @http:Query {name: "include_anchor_tab_locations"}
    string includeAnchorTabLocations?;
    #  When **true,** the extended properties are included in the response. 
    @http:Query {name: "include_extended"}
    string includeExtended?;
    # When **true,** the tab information associated with the recipient is included in the response
    @http:Query {name: "include_tabs"}
    string includeTabs?;
};

# This object maps the document generation fields to their values
public type DocGenFormFieldRequest record {
    # A list of `docGenFormFields` objects
    DocGenFormFields[] docGenFormFields?;
};

# Represents the Queries record for the operation: Pages_GetTemplatePageImage
public type PagesGetTemplatePageImageQueries record {
    # Sets the maximum width of the returned images in pixels
    @http:Query {name: "max_width"}
    string maxWidth?;
    @http:Query {name: "show_changes"}
    string showChanges?;
    # Sets the maximum height of the returned images in pixels
    @http:Query {name: "max_height"}
    string maxHeight?;
    # The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94
    string dpi?;
};

# 
public type SignatureUser record {
    # Boolean that specifies whether the signature is the default signature for the user
    string isDefault?;
    # Indicates whether the property is editable. Valid values are:
    # 
    # - `editable`
    # - `read_only`
    string rights?;
    # The name of the user
    string userName?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
};

# This object defines the account permissions for a profile that you can apply to a group of users
public type PermissionProfile record {
    AccountRoleSettings settings?;
    # The total number of users in the group associated with the account permission profile
    string userCount?;
    # The username of the user who last modified the permission profile
    string modifiedByUsername?;
    # The date and time when the permission profile was last modified
    string modifiedDateTime?;
    # The ID of the permission profile.
    # 
    # Use [AccountPermissionProfiles: list](/docs/esign-rest-api/reference/accounts/accountpermissionprofiles/list/)
    # to get a list of permission profiles and their IDs.
    # 
    # You can also download a CSV file of all permission profiles
    # and their IDs from the **Settings > Permission Profiles** page
    # of your eSignature account page
    string permissionProfileId?;
    # The name of the account permission profile. 
    # 
    # Example: `Account Administrator`
    string permissionProfileName?;
    # A list of user objects containing information about the users who are associated with the account permission profile
    UserInformation[] users?;
};

# A tab that allows the recipient to initial the document. May
# be optional
public type InitialHere record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (+2, -7)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the recipient does not need to complete this tab to complete the signing process
    string optional?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata optionalMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (+2, -7)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata scaleValueMetadata?;
    PropertyMetadata yPositionMetadata?;
    # Reserved for DocuSign
    string handDrawRequired?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    #  Sets the size for the InitialHere tab. It can be value from 0.5 to 1.0, where 1.0 represents full size and 0.5 is 50% size
    string scaleValue?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
};

# Use DocuSign eNotary to notarize documents digitally.
# Check the [DocuSign eNotary support documentation](https://support.docusign.com/s/document-item?bundleId=gko1642535666104&topicId=jiv1635359045452.html)
# to see which jurisdictions are supported
public type Notary1 record {
    UserInformation userInfo?;
    # The creation date of the account in UTC timedate format
    string createdDate?;
    # 
    string enabled?;
    # 
    string searchable?;
};

# This object represents the workspace user. This property is only returned in response to user specific GET call. 
public type WorkspaceUser record {
    # The name of the account that the workspace user belongs to
    string accountName?;
    # The URI for accessing the workspace user
    string workspaceUserUri?;
    # The UTC DateTime when the workspace user was created
    string created?;
    # The URL for accessing the workspace user
    string workspaceUserBaseUrl?;
    # The text of the workspace invitation email message sent to the user
    string invitationEmailBlurb?;
    # Type of the user. Valid values: type_owner, type_participant
    string 'type?;
    # The name of workspace user
    string userName?;
    # The ID of the workspace user
    string userId?;
    # The account ID associated with the workspace user
    string accountId?;
    # The UTC DateTime when the user joined the workspace
    string activeSince?;
    # The subject line of the workspace invitation email message sent to the user
    string invitationEmailSubject?;
    # The ID of the user who last modified the workspace user
    string lastModifiedById?;
    # The UTC DateTime that the workspace user was last modified
    string lastModified?;
    # The ID of the workspace user
    string workspaceUserId?;
    # The ID of the user who created this workspace user
    string createdById?;
    # The workspace user's email address
    string email?;
    ErrorDetails errorDetails?;
    # Filters the results by user status.
    # You can specify a comma-separated
    # list of the following statuses:
    # 
    # * ActivationRequired 
    # * ActivationSent 
    # * Active
    # * Closed 
    # * Disabled
    string status?;
    # The ID of the workspace
    string workspaceId?;
};

# 
public type Comment record {
    # The unique identifier for the tab that represents the comment thread
    string tabId?;
    # When **true,** indicates that the comment was read
    boolean read?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    # The ID of the signing group that can view the comment or that created the comment
    string signingGroupId?;
    # The subject of the envelope
    string subject?;
    # The initials of the user who created the comment
    string sentByInitials?;
    # The unique identifier for the comment thread
    string threadId?;
    # The userId of the user who created the thread
    string threadOriginatorId?;
    # The Guid of the envelope the comment thread belongs to
    string envelopeId?;
    # Reserved for DocuSign
    string hmac?;
    # An array of userIds that are mentioned directly in the body of a comment
    string[] mentions?;
    # The email address of the user who created the comment
    string sentByEmail?;
    # The full name of the user who created the comment
    string sentByFullName?;
    # Reserved for DocuSign
    string sentByImageId?;
    # The user IDs of the users that the comment is visible to
    string[] visibleTo?;
    # The unique identifier for the comment
    string id?;
    # The content of the comment, as UTF-8 text. 
    # 
    # Maximum Length: 500 characters.
    # 
    # **Note:** The maximum size allowed for the entire message body is 32 KB. 
    string text?;
    # The recipient ID of the user who created the comment
    string sentByRecipientId?;
    # The user ID of the user who created the comment
    string sentByUserId?;
    # The time the comment was created, formatted according to the format of the user who created the comment
    string timeStampFormatted?;
    # The time the comment was created
    string timestamp?;
};

# Represents the Queries record for the operation: Documents_GetTemplateDocument
public type DocumentsGetTemplateDocumentQueries record {
    # When **true,** the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. You can decrypt the documents by using the Key Manager DecryptDocument API method. For more information about Key Manager, see the DocuSign Security Appliance Installation Guide that your organization received from DocuSign
    string encrypt?;
    @http:Query {name: "file_type"}
    string fileType?;
    # When **true,** any document fields that a recipient changed are highlighted in yellow in the returned PDF document, and optional signatures or initials are outlined in red
    @http:Query {name: "show_changes"}
    string showChanges?;
};

# 
public type SignatureGroup record {
    # The name of the group. The search_text provided in the call automatically performs a wild card search on group_name
    string groupName?;
    # The ID of the group being accessed
    string groupId?;
    # Indicates whether the property is editable. Valid values are:
    # 
    # - `editable`
    # - `read_only`
    string rights?;
};

# 
public type UserInfoList record {
    # An array of `userInfo` objects containing information about the users in the group
    UserInfo[] users?;
};

# A one-line field that allows the recipient to enter a Social
# Security Number. The SSN can be typed with or without
# dashes. It uses the same parameters as a Text tab, with the
# validation message and pattern set for SSN information
public type Ssn record {
    # The unique identifier for the tab
    string tabId?;
    # A regular expression used to validate input for the tab
    string validationPattern?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata validationPatternMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata validationMessageMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# A name-value pair that describes an item and provides a value for the item
public type NameValue record {
    # The name of the item
    string name?;
    # The initial value of the item
    string originalValue?;
    # The current value of the item
    string value?;
    ErrorDetails errorDetails?;
};

# A tab that allows the recipient the option of declining an
# envelope. If the recipient clicks the tab during the signing
# process, the envelope is voided
public type Decline record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located.
    # For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # **Note:** Decline tabs never display this tooltip in the signing interface.
    # 
    # Although you can technically set a value via the API for this tab,
    # it will not be displayed to the recipient
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    #  Specifies the decline text displayed in the tab
    string buttonText?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    PropertyMetadata declineReasonMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata buttonTextMetadata?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # The reason the recipient declined the document
    string declineReason?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# 
public type RecipientAttachment record {
    # A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size
    string data?;
    # Specifies the type of the attachment for the recipient. Possible values are:
    # 
    # - `.htm`
    # - `.xml`
    string attachmentType?;
    # The name of the attachment
    string name?;
    # The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads
    string remoteUrl?;
    # The unique identifier for the attachment
    string attachmentId?;
    # An optional label for the attachment
    string label?;
};

# Represents the Queries record for the operation: PermissionProfiles_DeletePermissionProfiles
public type PermissionProfilesDeletePermissionProfilesQueries record {
    @http:Query {name: "move_users_to"}
    string moveUsersTo?;
};

# 
public type BulksendingCopyDocGenFormField record {
    # 
    string name?;
    # Specifies the value of the tab. 
    string value?;
};

# Represents the Queries record for the operation: Envelopes_PostEnvelopes
public type EnvelopesPostEnvelopesQueries record {
    # When **true,** template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the `status` field is set to `created`.)
    # 
    # **Note:** DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates
    @http:Query {name: "merge_roles_on_draft"}
    string mergeRolesOnDraft?;
    # When true, users can define the routing order of recipients while sending documents for signature
    @http:Query {name: "change_routing_order"}
    string changeRoutingOrder?;
    # Reserved for DocuSign
    @http:Query {name: "completed_documents_only"}
    string completedDocumentsOnly?;
    # Reserved for DocuSign
    @http:Query {name: "cdse_mode"}
    string cdseMode?;
};

# Represents the Queries record for the operation: DocGenFormFields_PutEnvelopeDocGenFormFields
public type DocGenFormFieldsPutEnvelopeDocGenFormFieldsQueries record {
    # When **true,** only the form fields are updated.
    # When **false** or omitted,
    # the documents are updated as well
    @http:Query {name: "update_docgen_formfields_only"}
    string updateDocgenFormfieldsOnly?;
};

# The request object containing the new information for the contacts
public type ContactModRequest record {
    # A list of contacts
    Contact[] contactList?;
};

# Represents the Queries record for the operation: Users_GetUsers
public type UsersGetUsersQueries record {
    # When **true,** the response includes the `userSettings` object data in CSV format
    @http:Query {name: "include_usersettings_for_csv"}
    string includeUsersettingsForCsv?;
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    @http:Query {name: "alternate_admins_only"}
    string alternateAdminsOnly?;
    @http:Query {name: "domain_users_only"}
    string domainUsersOnly?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Valid values: `1` to `100`
    string count?;
    # Filters the user records returned by the user name or a sub-string of user name
    @http:Query {name: "user_name_substring"}
    string userNameSubstring?;
    # When **true,** the response includes the login status of each user
    @http:Query {name: "login_status"}
    string loginStatus?;
    # Filters results based on a fragment of an email address. For example, you could enter `gmail` to return all users who have Gmail addresses.
    # 
    # **Note:** You do not use a wildcard character with this parameter. You can use either this parameter or the `email` parameter, but not both. 
    @http:Query {name: "email_substring"}
    string emailSubstring?;
    # When **true,** the custom settings information is returned for each user in the account. If this parameter is omitted, the default behavior is **false.**
    @http:Query {name: "additional_info"}
    string additionalInfo?;
    # Filters results based on one or more group IDs
    @http:Query {name: "group_id"}
    string groupId?;
    # Filters results based on the email address associated with the user that you want to return.
    # 
    # **Note:** You can use either this parameter or the `email_substring` parameter, but not both. For older accounts, this parameter might return multiple users who are associated with a single email address. 
    string email?;
    # Return user records excluding the specified group IDs
    @http:Query {name: "not_group_id"}
    string notGroupId?;
    # Filters results by user account status.
    # A comma-separated list of any of the following:
    # 
    # * `ActivationRequired`
    # * `ActivationSent`
    # * `Active`
    # * `Closed`
    # * `Disabled`
    string status?;
};

# A DocuSign workspace is a collaboration area for sharing files and data
public type Workspace record {
    WorkspaceSettings settings?;
    # The relative URI for accessing the workspace
    string workspaceUri?;
    # The ID of the account to bill
    string billableAccountId?;
    WorkspaceUser callerInformation?;
    # The UTC DateTime when the workspace user authorization was created
    string created?;
    WorkspaceUser createdByInformation?;
    # Text describing the purpose of the workspace
    string workspaceDescription?;
    WorkspaceUser lastModifiedByInformation?;
    # The relative URL for accessing the workspace
    string workspaceBaseUrl?;
    # The name of the workspace
    string workspaceName?;
    # Utc date and time the comment was last updated (can only be done by creator.)
    string lastModified?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # The ID of the workspace, always populated
    string workspaceId?;
};

# Represents the Queries record for the operation: WorkspaceFolder_GetWorkspaceFolder
public type WorkspaceFolderGetWorkspaceFolderQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # When **true,** the response includes information about the sub-folders of the current folder. The default is **false.**
    @http:Query {name: "include_sub_folders"}
    string includeSubFolders?;
    # When **true,** the response returns thumbnails.  The default is **false.**
    @http:Query {name: "include_thumbnails"}
    string includeThumbnails?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip
    string count?;
    # When **true,** the response includes extended details about the user. The default is **false.**
    @http:Query {name: "include_user_detail"}
    string includeUserDetail?;
    # When **true,** the response includes file information (in addition to folder information). The default is **false.**
    @http:Query {name: "include_files"}
    string includeFiles?;
    # If set, the response only includes results associated with the `userId` that you specify
    @http:Query {name: "workspace_user_id"}
    string workspaceUserId?;
};

# Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
# 
# Used only with recipient types In Person Signers and Signers
public type RecipientSignatureInformation record {
    # Specifies the user's signature name
    string signatureName?;
    # The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.
    # 
    # - `"1_DocuSign"`
    # - `"2_DocuSign"`
    # - `"3_DocuSign"`
    # - `"4_DocuSign"`
    # - `"5_DocuSign"`
    # - `"6_DocuSign"`
    # - `"7_DocuSign"`
    # - `"8_DocuSign"`
    # - `"Mistral"`
    # - `"Rage Italic"`
    string fontStyle?;
    # Specifies the user's signature in initials format
    string signatureInitials?;
};

# Represents the Queries record for the operation: PermissionProfiles_GetPermissionProfile
public type PermissionProfilesGetPermissionProfileQueries record {
    # A comma-separated list of additional properties to return in the response. The only valid value for this request is `metadata`, which returns metadata indicating whether the properties associated with the account permission profile are editable
    string include?;
};

# 
public type IdCheckSecurityStep record {
    # Type of authorization used for the security check
    string authType?;
};

# 
public type SmartContractInformation record {
    # Reserved for DocuSign
    string code?;
    # Reserved for DocuSign
    string uri?;
};

# This group tab is used to place radio buttons on a document.
# The `radios` property
# contains a list of
# [`radio`](/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/)
# objects  associated with the group. Only one radio button can
# be selected in a group
public type RadioGroup record {
    # When **true,** this custom tab is shared
    string shared?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata tooltipMetadata?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata groupNameMetadata?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata templateRequiredMetadata?;
    # Specifies the locations and status for radio buttons that are grouped together
    Radio[] radios?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata templateLockedMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    # Specifies the value of the tab. 
    string value?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # The initial value of the tab. 
    string originalValue?;
    # Reserved for DocuSign
    string shareToRecipients?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    # The name of the group. The search_text provided in the call automatically performs a wild card search on group_name
    string groupName?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata documentIdMetadata?;
};

# Envelope recipients
public type EnvelopeRecipients record {
    # A list of notary recipients on the envelope
    NotaryRecipient[] notaries?;
    # The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient, but he or she has not completed the required actions
    string currentRoutingOrder?;
    # Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected
    InPersonSigner[] inPersonSigners?;
    # A list of agent recipients assigned to the documents
    Agent[] agents?;
    # A list of signers on the envelope
    Signer[] signers?;
    # The number of recipients in the envelope
    string recipientCount?;
    # A list of electronic seals to apply to documents
    SealSign[] seals?;
    # A list of carbon copy recipients assigned to the documents
    CarbonCopy[] carbonCopies?;
    # Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added)
    Intermediary[] intermediaries?;
    # A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents
    CertifiedDelivery[] certifiedDeliveries?;
    # A list of users who can edit the envelope
    Editor[] editors?;
    ErrorDetails errorDetails?;
    # 
    Participant[] participants?;
    # A list of signers who act as witnesses on the envelope
    Witness[] witnesses?;
};

# Describes the recipient routing rules
public type RecipientRouting record {
    RecipientRules rules?;
};

# This object represents a free text custom field where envelope creators and senders can enter custom data
public type TextCustomField record {
    # The name of the custom field
    string name?;
    # When **true,** the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope
    string show?;
    # If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`
    string configurationType?;
    # The value of the custom field. The user who creates or sends the envelope provides this value. Maximum length: 100 characters
    string value?;
    # When **true,** senders are required to enter or select information for the field before they can send the envelope
    string required?;
    ErrorDetails errorDetails?;
    # The ID of the custom field
    string fieldId?;
};

# Reserved for DocuSign
public type AccountSignatureProviderOption record {
    # Reserved for DocuSign
    string signatureProviderOptionId?;
    # Reserved for DocuSign
    string signatureProviderOptionDisplayName?;
    # Reserved for DocuSign
    string signatureProviderOptionName?;
};

# A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.
# 
# For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information
public type BulkSendingCopyTab record {
    # The label associated with the recipient tab. In a bulk send request, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    # The initial value that you want to assign to the tab
    string initialValue?;
};

# Represents the Queries record for the operation: Connect_GetConnectUsers
public type ConnectGetConnectUsersQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # Filters returned user records by full email address or a substring of email address
    @http:Query {name: "email_substring"}
    string emailSubstring?;
    @http:Query {name: "list_included_users"}
    string listIncludedUsers?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    string count?;
    # Filters results based on a full or partial user name.
    # 
    # **Note:** When you enter a partial user name, you do not use a wildcard character
    @http:Query {name: "user_name_substring"}
    string userNameSubstring?;
    # Filters the results by user status.
    # You can specify a comma-separated
    # list of the following statuses:
    # 
    # * ActivationRequired 
    # * ActivationSent 
    # * Active
    # * Closed 
    # * Disabled
    string status?;
};

# A document object
public type Document record {
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # 
    string assignTabsToRecipientId?;
    # When **true,**
    # the document is included in the combined document download (`documentsCombinedUri`). 
    # The default value is **true.**
    string includeInDownload?;
    EnvelopeRecipientTabs tabs?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The user's encrypted password hash
    string password?;
    # The number of pages in the document. This property is read-only
    string pages?;
    # Sets how the signer interacts with the supplemental document.
    # Valid values:
    # 
    # * `no_interaction`<br>
    #   No recipient action is required.
    # 
    # * `view`<br>
    #   The recipient is required to view the document.
    # 
    # * `accept`<br>
    #   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.
    # 
    # * `view_accept`<br>
    #   The recipient is required to view and accept the document.
    string signerMustAcknowledge?;
    # When **true,** the document has been encrypted by the sender for use with the DocuSign Key Manager Security Appliance.
    #  
    string encryptedWithKeyManager?;
    # The file extension type of the document. Non-PDF documents are converted to PDF.
    # 
    # If the document is not a PDF, `fileExtension` is required.
    # 
    # If you try to upload a non-PDF document without a `fileExtension`, you will receive an "unable to load document" error message.  
    #  
    string fileExtension?;
    # When **true,** this document is considered an authoritative copy.
    # 
    # If this property is not set, it gets its value from the envelope's `authoritativeCopyDefault` property if it's set, or the envelope's `authoritativeCopy` property.
    # 
    # When **false,** this document is not an authoritative copy regardless of the envelope's `authoritativeCopyDefault` or `authoritativeCopy` property
    boolean authoritativeCopy?;
    # The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements: 
    # 
    # * `name`: A string that can be a maximum of 50 characters. 
    # * `value`: A string that can be a maximum of 200 characters.
    # 
    # If you are using XML, the name/value pair is contained in a `nameValue` element. 
    NameValue[] documentFields?;
    # The file ID from the cloud storage service where
    # the document is located. This information is
    # returned using
    # [CloudStorage: listFolders](/docs/esign-rest-api/reference/cloudstorage/cloudstorage/listfolders/) or
    # [CloudStorage: list](/docs/esign-rest-api/reference/cloudstorage/cloudstorage/list/)
    string remoteUrl?;
    # 
    string fileFormatHint?;
    # The order in which to sort the results.
    # 
    # Valid values are: 
    # 
    # 
    # * `asc`: Ascending order.
    # * `desc`: Descending order. 
    string 'order?;
    # Matchboxes define areas in a document for document matching when you are creating envelopes.
    # They are only used when you upload and edit a template.
    MatchBox[] matchBoxes?;
    # This string sets the display and behavior properties of
    # the document during signing. Valid values:
    # 
    # * `modal`<br>
    #   The document is shown as a supplement action strip
    #   and can be viewed, downloaded, or printed in a modal window.
    #   This is the recommended value for supplemental documents. 
    # 
    # * `inline`<br>
    #   The document is shown in the normal signing window.
    #   This value is not used with supplemental documents,
    #   but is the default value for all other documents
    string display?;
    # 
    string isDocGenDocument?;
    # Reserved for DocuSign
    string applyAnchorTabs?;
    DocumentHtmlDefinition htmlDefinition?;
    # A URI containing the user ID
    string uri?;
    # 
    string pdfFormFieldOption?;
    # When **true,** the account default setting for the required recipient option is used. If this property is set, `signerMustAcknowledge` cannot be set (and vice versa)
    boolean signerMustAcknowledgeUseAccountDefault?;
    # 
    DocGenFormField[] docGenFormFields?;
    # The name of the document
    string name?;
    # The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding
    string documentBase64?;
    # Specifies the document ID of this document. This value is used by tabs to determine which document they appear in
    string documentId?;
    # When **true,** PDF form field data is transformed into document tab values when the PDF form field name matches the DocuSign custom tab tabLabel. The resulting PDF form data is also returned in the PDF meta data when requesting the document PDF
    string transformPdfFields?;
};

# An object that defines the options that are available to non-administrators in the UI
public type AccountUISettings record {
    # 
    string shouldRedactAccessCode?;
    SettingsMetadata clickwrapSchemaVersionMetadata?;
    # 
    string clickwrapSchemaVersion?;
    SettingsMetadata removeEnvelopeForwardingMetadata?;
    SettingsMetadata uploadNewImageToSignOrInitialMetadata?;
    # 
    string enableEasySignCanUseMultiTemplateApply?;
    SettingsMetadata enableEasySignTemplateUploadMetadata?;
    # 
    string hasExternalLinkedAccounts?;
    SettingsMetadata enableEasySignCanUseMultiTemplateApplyMetadata?;
    # 
    string enableLegacySendflowLink?;
    # 
    string allowUsersToEditSharedAccess?;
    # 
    string enableEnvelopeCopyWithData?;
    SettingsMetadata hideSendAnEnvelopeMetadata?;
    AdminMessage adminMessage?;
    SettingsMetadata hasExternalLinkedAccountsMetadata?;
    SettingsMetadata enableLegacySendflowLinkMetadata?;
    # 
    string removeEnvelopeForwarding?;
    # 
    string enableEasySignTemplateUpload?;
    # 
    string enableAdminMessage?;
    SettingsMetadata enableEnvelopeCopyWithDataMetadata?;
    SettingsMetadata orderBasedRecipientIdGenerationMetadata?;
    # When **true,** the **Templates** menu is hidden from account users who are not Admins. The default value is **false.**
    string hideUseATemplate?;
    # 
    string orderBasedRecipientIdGeneration?;
    # 
    string hideSendAnEnvelope?;
    AskAnAdmin askAnAdmin?;
    SettingsMetadata shouldRedactAccessCodeMetadata?;
    SettingsMetadata allowUsersToEditSharedAccessMetadata?;
    SettingsMetadata hideUseATemplateMetadata?;
    # 
    string hideUseATemplateInPrepare?;
    # 
    string uploadNewImageToSignOrInitial?;
    SettingsMetadata enableAdminMessageMetadata?;
    SettingsMetadata hideUseATemplateInPrepareMetadata?;
};

# Describes the recipient phone number
public type RecipientPhoneNumber record {
    PropertyMetadata countryCodeMetadata?;
    # The telephone number. Use only the digits `0`-`9`. Remove any non-numeric characters.
    # 
    # Do not include the `countryCode`. For US, Canada, and other
    # [North American Numbering Plan](https://en.wikipedia.org/wiki/North_American_Numbering_Plan) countries, do not include a leading `1` or `0`
    string number?;
    PropertyMetadata numberMetadata?;
    # The numeric country calling code for `number`. For example, the country calling code for the US and Canada is `1`, for the UK: `44`,
    # 
    # Do not include the `+` symbol
    string countryCode?;
};

# Contains the settings for the email notifications that senders receive about the envelopes that they send
public type SenderEmailNotifications record {
    # When **true,** the user receives an email notification if offline signing failed
    string offlineSigningFailed?;
    # When **true,** the sender receives an email notification if envelope delivery fails
    string deliveryFailed?;
    # When **true,** the user receives an email notification if consent is withdrawn
    string withdrawnConsent?;
    # When **true,** the sender receives notification that the envelope was declined
    string senderEnvelopeDeclined?;
    # When **true,** the user receives an email notification when the envelope has been completed
    string envelopeComplete?;
    # When **true,** the user receives only comments that mention their own user name
    string commentsOnlyPrivateAndMention?;
    # 
    string clickwrapResponsesLimitNotificationEmail?;
    # When **true,** the sender receives notification that a recipient viewed the envelope
    string recipientViewed?;
    # When **true,** the sender receives an email notification if the signer changes
    string changedSigner?;
    # 
    string powerformResponsesLimitNotificationEmail?;
    # When **true,** the user receives all comments
    string commentsReceiveAll?;
    # When **true,** the user receives an email notification when a document purge occurs
    string purgeDocuments?;
};

# Represents the Queries record for the operation: PermissionProfiles_PostPermissionProfiles
public type PermissionProfilesPostPermissionProfilesQueries record {
    # A comma-separated list of additional properties to return in the response. The only valid value for this request is `metadata`, which returns metadata indicating whether the properties associated with the account permission profile are editable
    string include?;
};

# Represents the Queries record for the operation: ChunkedUploads_PutChunkedUploads
public type ChunkedUploadsPutChunkedUploadsQueries record {
    # (Required) You must use this query parameter with the value `commit`, which affirms the request to validate and prepare the chunked upload for use with other API calls
    string action?;
};

# Represents the Queries record for the operation: Brand_PutBrand
public type BrandPutBrandQueries record {
    # When **true,** replaces the brand instead of updating it. The only unchanged value is the brand ID. The request body must be XML. The default value is **false.**
    @http:Query {name: "replace_brand"}
    string replaceBrand?;
};

# Represents the Queries record for the operation: Templates_GetTemplates
public type TemplatesGetTemplatesQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # A comma-separated list
    # of additional template attributes
    # to include in the response.
    # Valid values are:
    # 
    # - `powerforms`: Includes details about the PowerForms associated with the templates.
    # - `documents`: Includes information about template documents.
    # - `folders`: Includes information about the folder that holds the template.
    # - `favorite_template_status`: Includes the template `favoritedByMe` property. **Note:** You can mark a template as a favorite only in eSignature v2.1.
    # - `advanced_templates`: Includes information about advanced templates.
    # - `recipients`: Includes information about template recipients.
    # - `custom_fields`: Includes information about template custom fields.
    # - `notifications`: Includes information about the notification settings for templates
    string include?;
    # Lists templates modified on or after this date
    @http:Query {name: "modified_from_date"}
    string modifiedFromDate?;
    # Lists templates modified before this date
    @http:Query {name: "modified_to_date"}
    string modifiedToDate?;
    # Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created
    @http:Query {name: "from_date"}
    string fromDate?;
    # A comma-separated list of additional template properties to search.
    # 
    # 
    # - `sender`: Include sender name and email in the search.
    # - `recipients`: Include recipient names and emails in the search.
    # - `envelope`: Not used in template searches
    @http:Query {name: "search_fields"}
    string searchFields?;
    # When **true,** the response only includes templates shared by the user. When **false,** the response only returns template not shared by the user. If not specified, templates are returned whether or not they have been shared by the user
    @http:Query {name: "shared_by_me"}
    string sharedByMe?;
    # End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date
    @http:Query {name: "used_to_date"}
    string usedToDate?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip
    string count?;
    # When **true,** retrieves templates that have been permanently deleted. The default is **false.**
    # 
    # **Note:** After you delete a template, you can see it in the `Deleted` bin in the UI for 24 hours. After 24 hours, the template is permanently deleted
    @http:Query {name: "is_deleted_template_only"}
    string isDeletedTemplateOnly?;
    # A comma-separated list of template IDs to download. This value is valid only when `is_download` is **true.**
    @http:Query {name: "template_ids"}
    string templateIds?;
    # Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used
    @http:Query {name: "used_from_date"}
    string usedFromDate?;
    # A comma-separated list of folder ID GUIDs
    @http:Query {name: "folder_ids"}
    string folderIds?;
    # Filters the templates in the response. Valid values are: 
    # 
    # - `owned_by_me`: Results include only templates owned by the user.
    # - `shared_with_me`: Results include only templates shared with the user.  
    # - `all`:  Results include all templates owned or shared with the user
    @http:Query {name: "user_filter"}
    string userFilter?;
    # Lists templates modified before this date
    @http:Query {name: "created_to_date"}
    string createdToDate?;
    # The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.
    # 
    # **Note:** If this property is null, the value defaults to the current date
    @http:Query {name: "to_date"}
    string toDate?;
    # The type of folder to return templates for. Possible values are:
    # 
    # - `templates`: Templates in the **My Templates** folder.
    #   Templates in the **Shared Templates**  and **All Template** folders (if the request ID from and Admin) are excluded.
    # - `templates_root`: Templates in the root level of the **My Templates** folder, but not in an actual folder. Note that the **My Templates** folder is not a real folder.
    # - `recylebin`: Templates that have been deleted
    @http:Query {name: "folder_types"}
    string folderTypes?;
    # The ID of the user
    @http:Query {name: "user_id"}
    string userId?;
    # When **true,** downloads the templates listed in `template_ids` as a collection of JSON definitions in a single zip file.
    # 
    # The `Content-Disposition` header is set in the response. The value of the header provides the filename of the file.
    # 
    # The default is **false.**
    # 
    # **Note:** This parameter only works when you specify a list of templates in the `template_ids` parameter
    @http:Query {name: "is_download"}
    string isDownload?;
    # Specifies how the search results are listed.
    # Valid values are:
    # 
    # - `name`: template name
    # - `modified`: date/time template was last modified
    # - `used`: date/time the template was last used
    @http:Query {name: "order_by"}
    string orderBy?;
    # Lists templates created on or after this date
    @http:Query {name: "created_from_date"}
    string createdFromDate?;
    # Specifies the sort order of the search results.
    # Valid values are:
    # 
    # - `asc`: Ascending (A to Z)
    # - `desc`: Descending (Z to A)
    string 'order?;
    # The text to use to search the names of templates.
    # 
    # Limit: 48 characters
    @http:Query {name: "search_text"}
    string searchText?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Represents the Queries record for the operation: ConnectFailures_GetConnectLogs
public type ConnectFailuresGetConnectLogsQueries record {
    # The start date for a date range in UTC DateTime format.
    # 
    # **Note:** If this property is null, no date filtering is applied
    @http:Query {name: "from_date"}
    string fromDate?;
    # The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.
    # 
    # **Note:** If this property is null, the value defaults to the current date
    @http:Query {name: "to_date"}
    string toDate?;
};

# Contains information about an in-person recipient. This is a DocuSign user,
# acting as a Signing Host,
# who is in the same physical location as the signer.
# To learn about the fields used
# for the eNotary feature,
# see the [EnvelopeRecipients resource][resource].
# 
# [resource]: /docs/esign-rest-api/reference/envelopes/enveloperecipients/#in-person-signer-recipient
public type InPersonSigner record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    PropertyMetadata requireIdLookupMetadata?;
    PropertyMetadata signerLastNameMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # When **true,**
    # this is the default recipient for the envelope.
    # This option is used when creating an envelope from a template
    string defaultRecipient?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # Required. The full legal name of a signer for the envelope. 
    # 
    # Maximum Length: 100 characters.
    string signerName?;
    # Specifies whether the envelope uses the eNotary feature.
    # Valid values:
    # 
    # * `inPersonSigner`: The envelope uses the normal in-person signing flow.
    # * `notary`: The envelope uses the eNotary in-person signing flow
    string inPersonSigningType?;
    # The in-person signer's email address.
    # 
    # Required when `inPersonSigningType` is `inPersonSigner`.
    # For eNotary flow, use `email` instead.
    # 
    # Maximum Length: 100 characters.
    string signerEmail?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    OfflineAttributes offlineAttributes?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # The email address of the signing host.
    # This is the DocuSign user that is hosting the in-person signing session.
    # 
    # Required when `inPersonSigningType` is `inPersonSigner`.
    # For eNotary flow, use `email` instead.
    # 
    # Maximum Length: 100 characters
    string hostEmail?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    # When **true,** the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account
    string requireUploadSignature?;
    # When **true,** specifies that the recipient creates the tabs
    string recipientSuppliesTabs?;
    # 
    string notaryId?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # When **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once)
    string signInEachLocation?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion. 
    # 
    # If this number is greater than `0` for a signing group, only the user who previously completed may sign again
    string completedCount?;
    # Not applicable
    UserInfo[] signingGroupUsers?;
    NotaryHost notaryHost?;
    IdCheckInformationInput idCheckInformationInput?;
    # The signer's first name
    string signerFirstName?;
    RecipientSignatureInformation signatureInfo?;
    # The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
    RecipientSignatureProvider[] recipientSignatureProviders?;
    # The signer's full legal name in an eNotary flow.
    # 
    # Required when `inPersonSigningType` is `notary`.
    # For a regular in-person-signer flow, use `signerName` instead.
    # 
    # Maximum Length: 100 characters
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # When **true,** the signer must print, sign, and upload or fax the signed documents to DocuSign
    string requireSignOnPaper?;
    # By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.
    # 
    # This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. 
    # 
    # Set this parameter to `safe` to use a SAFE-BioPharma certificate.
    # 
    # The signer must be enrolled in the SAFE program to sign with a SAFE certificate
    string requireSignerCertificate?;
    PropertyMetadata signerEmailMetadata?;
    # Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    # 
    # When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent
    string[] excludedDocuments?;
    PropertyMetadata routingOrderMetadata?;
    PropertyMetadata signerNameMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # The recipient's status. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only
    string statusCode?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The name of the signing host.
    # This is the DocuSign user that is hosting the in-person signing session.
    # 
    # Required when `inPersonSigningType` is `inPersonSigner`.
    # For eNotary flow, use `name` instead.
    # 
    # Maximum Length: 100 characters
    string hostName?;
    # A note sent to the in-person signer in the signing email.
    # This note is visible only to this recipient.
    # 
    # Maximum Length: 1000 characters
    string note?;
    PropertyMetadata signInEachLocationMetadata?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # Not applicable. You cannot use a signing group for an in-person signer
    string signingGroupId?;
    # When **true,** autonavigation is set for the recipient
    string autoNavigation?;
    EnvelopeRecipientTabs tabs?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    # When **true,** specifies that the signer can perform the signing ceremony offline
    string canSignOffline?;
    PropertyMetadata hostEmailMetadata?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata signerFirstNameMetadata?;
    PropertyMetadata hostNameMetadata?;
    RecipientSMSAuthentication smsAuthentication?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The signer's email address in an eNotary flow.
    # 
    # Use only when `inPersonSigningType` is `notary`.
    # For regular in-person-signer flow, use `signerEmail` instead
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # The signer's last name
    string signerLastName?;
    # Not applicable
    string signingGroupName?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    PropertyMetadata emailMetadata?;
    # The reason why the recipient was created (for example, `sender`). This property is read-only
    string creationReason?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata inPersonSigningTypeMetadata?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
};

# Represents the Queries record for the operation: Recipients_PostTemplateRecipients
public type RecipientsPostTemplateRecipientsQueries record {
    # When **true,**
    # resends the envelope to the recipients
    # that you specify in the request body.
    # Use this parameter to resend the envelope
    # to a recipient
    # who deleted the original email notification.
    # 
    # **Note:** Correcting an envelope is a different process.
    # DocuSign always resends an envelope when you correct it,
    # regardless of the value that you enter here
    @http:Query {name: "resend_envelope"}
    string resendEnvelope?;
};

# Envelope document fields
public type EnvelopeDocumentFields record {
    # The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements: 
    # 
    # * name - A string that can be a maximum of 50 characters. 
    # * value - A string that can be a maximum of 200 characters.
    # 
    # *IMPORTANT*: If you are using xml, the name/value pair is contained in a nameValue element. 
    NameValue[] documentFields?;
};

# This request object contains the information necessary to create a recipient preview
public type RecipientPreviewRequest record {
    # A sender-generated value that indicates the date and time that the signer was authenticated
    string authenticationInstant?;
    # The domain in which the user authenticated
    string securityDomain?;
    # A unique identifier of the authentication event executed by the client application
    string assertionId?;
    # Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer. 
    # 
    # Choose a value from this list: 
    # * Biometric 
    # * Email
    # * HTTPBasicAuth
    # * Kerberos
    # * KnowledgeBasedAuth
    # * None
    # * PaperDocuments
    # * Password
    # * RSASecureID
    # * SingleSignOn_CASiteminder
    # * SingleSignOn_InfoCard
    # * SingleSignOn_MicrosoftActiveDirectory
    # * SingleSignOn_Other
    # * SingleSignOn_Passport
    # * SingleSignOn_SAML
    # * Smartcard
    # * SSLMutualAuth
    # * X509Certificate
    # 
    # This information is included in the Certificate of Completion
    string authenticationMethod?;
    # When the value of `xFrameOptions` is `allow_from`, this property specifies the origin on which the page is allowed to display in a frame. If the value of `xFrameOptions` is `allow_from`, you must include a value for this property
    string xFrameOptionsAllowFromUrl?;
    # The client URL that the DocuSign Signing experience should ping to indicate to the client that Signing is active. An HTTP GET call is executed against the client. The response from the client is ignored. The intent is for the client to reset its session timer when the request is received
    string pingUrl?;
    # Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document
    string recipientId?;
    RecipientTokenClientURLs clientURLs?;
    # Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into unauthorized pages or frames.
    # 
    # Valid values are:
    # 
    # - `deny`: The page cannot be displayed in a frame.
    # - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.
    # - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property
    string xFrameOptions?;
    # Only used if `pingUrl` is specified. This is the interval, in seconds, between pings on the `pingUrl`.  The default is `300` seconds. Valid values are 60-1200 seconds
    string pingFrequency?;
    # This property is not supported
    string returnUrl?;
};

# For which envelope events should your webhook be called?
public type EnvelopeEvent record {
    # An envelope status for which your webhook should be called. Valid values:
    # 
    # * `Sent` 
    # * `Delivered`
    # * `Completed`
    # * `Declined`
    # * `Voided`
    string envelopeEventStatusCode?;
    # When **true,**
    # the Connect webhook messages
    # will include the envelope's PDF documents.
    # Including the PDF documents
    # greatly increases the size of the notification messages.
    # Ensure that your listener can handle
    # incoming messages that are 25MB or larger
    string includeDocuments?;
};

# 
public type Ssn9InformationInput record {
    # The recipient's full Social Security Number (SSN)
    string ssn9?;
    # Specifies the display level for the recipient. Valid values are:
    # * `ReadOnly`
    # * `Editable`
    # * `DoNotDisplay`
    string displayLevelCode?;
};

# Describes the workflow for an envelope
public type Workflow record {
    # An array of workflow steps
    WorkflowStep[] workflowSteps?;
    # The status of the workflow:
    # 
    # - `paused` if the workflow is paused
    # - `in_progress` if the workflow is in progress
    string workflowStatus?;
    # The `workflowStepId` of the current step.
    # This is not an index into the `workflowSteps` array in this object.
    # See the `workflowStep` object
    string currentWorkflowStepId?;
    ScheduledSending scheduledSending?;
    # The ISO 8601 timestamp of when the envelope is scheduled to be sent, if applicable. Its value is the maximum of the `resumeDate` property on `scheduledSending` and the `resumeDate` property on the current `workflowStep`.
    # 
    # This property is read-only
    string resumeDate?;
};

# Represents the Queries record for the operation: AccountSignatures_GetAccountSignatureImage
public type AccountSignaturesGetAccountSignatureImageQueries record {
    # When **true,** the chrome (or frame containing the added line and identifier) is included with the signature image
    @http:Query {name: "include_chrome"}
    string includeChrome?;
};

# Represents the Queries record for the operation: Recipients_PutRecipients
public type RecipientsPutRecipientsQueries record {
    # When **true,**
    # forces the envelope to be resent
    # if it would not be resent otherwise.
    # 
    # Ordinarily, if the recipient's routing order
    # is before or the same as the envelope's next recipient,
    # the envelope is not resent.
    # 
    # Setting this query parameter
    # to **false** has no effect and is the same as omitting
    # it altogether
    @http:Query {name: "resend_envelope"}
    string resendEnvelope?;
    # When **true,** recipients are combined or merged with matching recipients. Recipient matching occurs as part of [template matching](https://support.docusign.com/s/document-item?bundleId=jux1643235969954&topicId=fxo1578456612662.html), and is based on Recipient Role and Routing Order
    @http:Query {name: "combine_same_order_recipients"}
    string combineSameOrderRecipients?;
    # Indicates if offline signing is enabled for the recipient when a network connection is unavailable. 
    @http:Query {name: "offline_signing"}
    string offlineSigning?;
};

# Represents the Queries record for the operation: UserSignatures_PutUserSignatureImage
public type UserSignaturesPutUserSignatureImageQueries record {
    @http:Query {name: "transparent_png"}
    string transparentPng?;
};

# 
public type Participant record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    PropertyMetadata requireIdLookupMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # 
    string participateFor?;
    # 
    string participateForGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The user's first name. 
    # Maximum Length: 50 characters
    string firstName?;
    RecipientPhoneNumber phoneNumber?;
    # 
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    PropertyMetadata routingOrderMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # Reserved for DocuSign
    string statusCode?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The user's last name. 
    # Maximum Length: 50 characters
    string lastName?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    RecipientSMSAuthentication smsAuthentication?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # 
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    PropertyMetadata firstNameMetadata?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # 
    string emailRecipientPostSigningURL?;
};

# Represents the Queries record for the operation: AccountCustomFields_PutAccountCustomFields
public type AccountCustomFieldsPutAccountCustomFieldsQueries record {
    @http:Query {name: "apply_to_templates"}
    string applyToTemplates?;
};

# 
public type PurchasedEnvelopesInformation record {
    # The total amount of the purchase
    string amount?;
    # The quantity of envelopes to add to the account
    string quantity?;
    # The Product ID from the AppStore
    string productId?;
    # The AppName of the client application
    string appName?;
    # The name of the AppStore
    string storeName?;
    # The encrypted Base64 encoded receipt data
    string receiptData?;
    # Specifies the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the purchase
    string currencyCode?;
    # The Platform of the client application
    string platform?;
    # Specifies the Transaction ID from the AppStore
    string transactionId?;
};

# Represents the Queries record for the operation: Groups_GetGroups
public type GroupsGetGroupsQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # When **true,** every group returned in the response includes a `userCount` property that contains the total number of users in the group. The default is **true.**
    @http:Query {name: "include_usercount"}
    string includeUsercount?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Valid values: `1` to `100`
    string count?;
    # The type of group to return. Valid values:
    # 
    # * `AdminGroup`
    # * `CustomGroup`
    # * `EveryoneGroup`
    @http:Query {name: "group_type"}
    string groupType?;
    # Filters the results of a GET request based on the text that you specify
    @http:Query {name: "search_text"}
    string searchText?;
};

# This object contains information about a group
public type Group record {
    # The name of the group
    string groupName?;
    # The group type
    string groupType?;
    # Reserved for DocuSign
    string dsGroupId?;
    # The DocuSign group ID for the group.
    # This is a read-only property
    string groupId?;
    # The ID of the permission profile associated with the group.
    # 
    # Use [AccountPermissionProfiles: list](/docs/esign-rest-api/reference/accounts/accountpermissionprofiles/list/)
    # to get a list of permission profiles and their IDs
    string permissionProfileId?;
    # The total number of users in the group
    string usersCount?;
    # A list of the users in the group. This property is not used by [Groups: list](/docs/esign-rest-api/reference/usergroups/groups/list/). To get a list of users see [GroupUsers: list](/docs/esign-rest-api/reference/usergroups/groupusers/list/)
    UserInfo[] users?;
    ErrorDetails errorDetails?;
};

# Display settings for collapsible section
public type DocumentHtmlCollapsibleDisplaySettings record {
    # A CSS color value (such as `#DCF851`) that indicates the color of the arrow
    string arrowColor?;
    # Indicates the size of the collapsible arrows. Possible values are:
    # 
    # - `small`
    # - `large` (default)
    string arrowSize?;
    # When **true,** only the arrow is clickable to expand or collapse the section.
    # When **false** (the default), both the label and the arrow are clickable.
    # 
    # If no arrow is used, this setting is ignored
    boolean onlyArrowIsClickable?;
    # The location of the arrow relative to the collapsible section's label. Possible values are:
    # 
    # - `right` (default)
    # - `left`
    string arrowLocation?;
    # Indicates the direction of the disclosure arrow
    # when the collapsible section is in the open state.
    # 
    # One of the following:
    # 
    # - `up`: In the open state, the disclosure arrow points up.
    # - `down`: In the open state, the disclosure arrow points down.
    # - `left`: In the open state, the disclosure arrow points left.
    # - `right`: In the open state, the disclosure arrow points right
    string arrowOpen?;
    # The name of the CSS style to be used on collapsible arrow section
    string arrowStyle?;
    # The name of the CSS style to be used for the collapsible container
    string containerStyle?;
    # The name of the CSS style to be used for the collapsible container's label
    string labelStyle?;
    # The name of the CSS style to be used for the collapsible container's outer label and arrow style
    string outerLabelAndArrowStyle?;
    # Indicates the direction of the disclosure arrow
    # when the collapsible section is in the closed state.
    # 
    # One of the following:
    # 
    # - `up`: In the closed state, the disclosure arrow points up.
    # - `down`: In the closed state, the disclosure arrow points down.
    # - `left`: In the closed state, the disclosure arrow points left.
    # - `right`: In the closed state, the disclosure arrow points right
    string arrowClosed?;
};

# Represents the Queries record for the operation: Brand_GetBrand
public type BrandGetBrandQueries record {
    # When **true,** the URIs for the logos associated with the brand are included in the response
    @http:Query {name: "include_logos"}
    string includeLogos?;
    # When **true,** the landing pages and links associated with the brand are included in the response
    @http:Query {name: "include_external_references"}
    string includeExternalReferences?;
};

# Contains address information
public type AddressInformation record {
    # The user's country. Maximum length: 50 characters
    string country?;
    # The user's state or province. Maximum length: 40 characters
    string stateOrProvince?;
    # The second line of the user's address.
    # Maximum length: 100 characters
    string address2?;
    # The user's city. Maximum length: 40 characters
    string city?;
    # A phone number associated with the address
    string phone?;
    # The first line of the user's address.
    # Maximum length: 100 characters
    string address1?;
    # The user's postal code. Maximum length: 20 characters
    string postalCode?;
    # A fax number associated with the address, if one is available
    string fax?;
    # 
    string zipPlus4?;
};

# 
public type RecipientTokenClientURLs record {
    # 
    string onAccessCodeFailed?;
    # 
    string onDecline?;
    # 
    string onSessionTimeout?;
    # 
    string onCancel?;
    # 
    string onIdCheckFailed?;
    # 
    string onTTLExpired?;
    # 
    string onException?;
    # 
    string onViewingComplete?;
    # 
    string onFaxPending?;
    # 
    string onSigningComplete?;
};

# The document fields available for document generation.
# 
# This object is used in reponses (GET) and requests (PUT).
# When used with [DocumentGeneration: updateEnvelopeDocGenFormFields](/docs/esign-rest-api/reference/envelopes/documentgeneration/updateenvelopedocgenformfields/)
# (PUT) the `name` and `value` properties are required,
# and any other values are ignored
public type DocGenFormField record {
    # 
    string predefinedValidation?;
    # The name of the form field. The name must be unique to the document.
    # 
    # Required for PUT requests
    string name?;
    # An array of option strings supported by this setting
    DocGenFormFieldOption[] options?;
    # A sender-defined description of the line item
    string description?;
    # Reserved for DocuSign
    string label?;
    # Always `TextBox`.  You do not need to provide this value
    string 'type?;
    # The value of the form field.
    # 
    # Required for PUT requests
    string value?;
    # When **true,** the field is required. This value comes from the the document
    string required?;
    DocGenFormFieldValidation validation?;
};

# 
public type TemplateNotificationRequest record {
    Expirations expirations?;
    Reminders reminders?;
    # The user's encrypted password hash
    string password?;
    # When **true,** the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When **false,** the reminders and expirations settings specified in this request are used. The default value is **false.**
    string useAccountDefaults?;
};

# This object describes errors that occur. It is only valid for responses and ignored in requests
public type ErrorDetails record {
    # The code associated with the error condition
    string errorCode?;
    # A brief message describing the error condition
    string message?;
};

# 
public type Envelope record {
    # The date and time that the envelope is set to expire. This value is determined by the `InitialSentDateTime` of the envelope and the `expireAfter` property of the `notification` object. (Note that the `expireAfter` property of the envelope itself is not used.)
    string expireDateTime?;
    # The reason the envelope or template was voided.
    # 
    # **Note:** The string is truncated to the first 200 characters
    string voidedReason?;
    # An array of attachment objects that provide information about the attachments that are associated with the envelope
    Attachment[] envelopeAttachments?;
    # When **true,** [Envelope ID Stamping](https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=tfm1578456367923.html) is enabled.
    # After a document or attachment is stamped with an Envelope ID,
    # the ID is seen by all recipients
    # and becomes a permanent part of the document
    # and cannot be removed
    string envelopeIdStamping?;
    # Reserved for DocuSign
    string envelopeLocation?;
    # A list of folder objects
    Folder[] folders?;
    # The date and time that the item was last modified
    string lastModifiedDateTime?;
    # The URI for retrieving notifications
    string notificationUri?;
    EmailSettings emailSettings?;
    # The UTC DateTime when the item was created
    string createdDateTime?;
    # The date and time the envelope was initially sent
    string initialSentDateTime?;
    # When **true,** the recipient can redirect an envelope to a more appropriate recipient
    string allowReassign?;
    Notification notification?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # An array containing information about the documents that are included in the envelope
    EnvelopeDocument[] envelopeDocuments?;
    # When **true,** prevents senders from changing, correcting, or deleting the recipient information for the envelope
    string recipientsLock?;
    # The URI for retrieving the templates
    string templatesUri?;
    # May contain an external identifier for the envelope
    string externalEnvelopeId?;
    # The envelope ID of the envelope status that failed to post
    string envelopeId?;
    EnvelopeMetadata envelopeMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # When **true,** responsive documents are disabled for the envelope
    string disableResponsiveDocument?;
    # Not used. Use the
    # [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations)
    # property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead
    string expireEnabled?;
    # When **true,** the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When **false,** the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 
    # 
    # If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information
    string useDisclosure?;
    # When **true,** recipients can sign on a mobile device.
    # 
    # **Note:** Only Admin users can change this setting
    string signerCanSignOnMobile?;
    # When **true,** prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 
    # 
    # Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 
    # 
    # However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope
    string messageLock?;
    Workflow workflow?;
    # The date that a purge was completed
    string purgeCompletedDate?;
    # The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
    # If this property is not set, each document defaults to the envelope's `authoritativeCopy`
    string authoritativeCopyDefault?;
    # The URI for retrieving all of the documents associated with the envelope as separate files
    string documentsUri?;
    # The date that a purge was requested
    string purgeRequestDate?;
    # Deprecated. This feature has been replaced by signing groups
    string anySigner?;
    #  Used to identify an envelope.
    # 
    #  The ID is a sender-generated value and is valid in the DocuSign system for 7 days.
    #  It is recommended that a transaction ID is used for offline
    #  signing to ensure that an envelope is not sent multiple times.
    #  The `transactionId` property can be used determine an envelope's
    #  status (i.e. was it created or not) in cases where the internet c
    #  onnection was lost before the envelope status was returned
    string transactionId?;
    PowerForm powerForm?;
    # When **true,** indicates that the data collected through form fields on a document has changed
    string hasFormDataChanged?;
    UserInfo sender?;
    EnvelopeRecipients recipients?;
    # Reserved for DocuSign
    string accessControlListBase64?;
    # The ID of the brand
    string brandId?;
    # When **true,** indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES)
    string is21CFRPart11?;
    # When **true,** indicates that the envelope is a dynamic envelope
    string isDynamicEnvelope?;
    # Indicates the envelope status. Valid values are:
    # 
    # * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
    # * `created`: The envelope is created as a draft. It can be modified and sent later.
    # * `declined`: The envelope has been declined by the recipients.
    # * `delivered`: The envelope has been delivered to the recipients.
    # * `sent`: The envelope will be sent to the recipients after the envelope is created.
    # * `signed`: The envelope has been signed by the recipients.
    # * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope
    string status?;
    # When **true,** indicates that a .wav file used for voice authentication is included in the envelope. 
    string hasWavFile?;
    # When **true,** indicates that users have added comments to the envelope
    string hasComments?;
    # When **true,** recipients can view the history of the envelope
    string allowViewHistory?;
    # The URI for retrieving certificate information
    string certificateUri?;
    AccountCustomFields customFields?;
    # When **true,** autonavigation is set for the recipient
    string autoNavigation?;
    # The date and time the envelope or template was voided
    string voidedDateTime?;
    # When **true,** the Document Markup feature is enabled.
    # 
    # **Note:**  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting at the account level
    string allowMarkup?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    # Reserved for DocuSign
    string deletedDateTime?;
    # Specifies the date and time this item was completed
    string completedDateTime?;
    # The subject line of the email message that is sent to all recipients.
    # 
    # For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](/docs/esign-rest-api/reference/templates/templates/create/#template-email-subject-merge-fields).
    # 
    # **Note:** The subject line is limited to 100 characters, including any merged fields.It is not truncated. It is an error if the text is longer than 100 characters
    string emailSubject?;
    # The data and time that the status changed
    string statusChangedDateTime?;
    # 
    string copyRecipientData?;
    # When **true,** the envelope is queued for
    # processing and the value of the `status` property
    # is set to `Processing`. Additionally, GET status
    # calls return `Processing` until completed.
    # 
    # 
    # **Note:** A `transactionId` is required for this
    # call to work correctly. When the envelope is
    # created, the status is `Processing` and an
    # `envelopeId` is not returned in the response. To
    # get the `envelopeId`, use a GET envelope query by
    # using the
    # [transactionId](/docs/esign-rest-api/reference/envelopes/envelopes/create/) or by checking the
    # Connect notification
    string asynchronous?;
    # Shows the current purge state for the envelope. Valid values:
    # 
    # - `unpurged`: There has been no successful request to purge documents.
    # - `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
    # - `documents_dequeued`: The envelope documents have been taken out of the purge queue.
    # - `documents_purged`: The envelope documents have been successfully purged.
    # - `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
    # - `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.
    # - `documents_and_metadata_and_redact_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged, nor has personal information been redacted.
    # - `documents_and_metadata_and_redact_purged`: The envelope documents and metadata have been successfully purged, and personal information has been redacted.
    # 
    # **Related topics**
    # 
    # - [Purging documents (eSingature Concepts)](/docs/esign-rest-api/esign101/concepts/documents/purging/)
    # - [Purging documents in an envelope (blog post)](https://www.docusign.com/blog/developers/purging-documents-envelope)
    string purgeState?;
    # When **true,** indicates that the envelope is a signature-provided envelope
    string isSignatureProviderEnvelope?;
    # The DateTime that the envelope changed status (i.e. was created or sent.)
    string statusDateTime?;
    # Contains a URL for retrieving the attachments that are associated with the envelope
    string attachmentsUri?;
    # When **true,** marks all of the documents in the envelope as authoritative copies.
    # 
    # **Note:** You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false.**
    string authoritativeCopy?;
    # When **true,** the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope
    string brandLock?;
    # 
    string burnDefaultTabData?;
    # This is the same as the email body. If specified it is included in email body for all envelope recipients
    string emailBlurb?;
    # When **true,** the signer is allowed to print the document and sign it on paper
    string enableWetSign?;
    # When **true,** signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.
    # 
    # **Note:** To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true.**
    # 
    # [docviz]: /docs/esign-rest-api/reference/envelopes/envelopedocumentvisibility/
    string enforceSignerVisibility?;
    EnvelopeLocks lockInformation?;
    # The URI for retrieving custom fields
    string customFieldsUri?;
    # Not used. Use the
    # [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations)
    # property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead
    string expireAfter?;
    # Reserved for DocuSign
    string holder?;
    # When **true,** users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document, they can add a comment to the document
    string allowComments?;
    EnvelopeCustomMetadata envelopeCustomMetadata?;
    # The URI for retrieving the envelope or envelopes
    string envelopeUri?;
    # Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`
    string signingLocation?;
    # The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding
    string documentBase64?;
    # Reserved for DocuSign
    string location?;
    # The URI for retrieving all of the documents associated with the envelope as a single PDF file
    string documentsCombinedUri?;
    # Contains a URI for an endpoint that you can use to retrieve the recipients
    string recipientsUri?;
};

# A list of `documentVisibility` objects that specify whether documents are visible to recipients
public type DocumentVisibilityList record {
    # An array of `documentVisibility` objects that specifies which documents are visible to which recipients
    DocumentVisibility[] documentVisibility?;
};

# 
public type CustomSettingsInformation record {
    # The name/value pair information for the user custom setting
    NameValue[] customSettings?;
};

# Represents the Queries record for the operation: SearchFolders_GetSearchFolderContents
public type SearchFoldersGetSearchFolderContentsQueries record {
    # Specifies that all envelopes that match the criteria are returned
    string all?;
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days
    @http:Query {name: "from_date"}
    string fromDate?;
    # Specifies the end of the date range to return
    @http:Query {name: "to_date"}
    string toDate?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    # 
    # Valid values: `1` to `100`
    string count?;
    # When **true,** the recipient information is returned in the response
    @http:Query {name: "include_recipients"}
    string includeRecipients?;
    # Specifies the property used to sort the list. Valid values are: `action_required`, `created`, `completed`, `sent`, `signer_list`, `status`, or `subject`
    @http:Query {name: "order_by"}
    string orderBy?;
    # Specifies the order in which the list is returned. Valid values are: `asc` for ascending order, and `desc` for descending order
    string 'order?;
};

# A template custom field enables you to prepopulate custom metadata for all new envelopes that are created by using a specific template. You can then use the custom data for sorting, organizing, searching, and other downstream processes
public type TemplateCustomFields1 record {
    # An array of text custom fields
    TextCustomField[] textCustomFields?;
    # An array of list custom fields
    ListCustomField[] listCustomFields?;
};

# Represents the Queries record for the operation: Accounts_DeleteAccount
public type AccountsDeleteAccountQueries record {
    @http:Query {name: "redact_user_data"}
    string redactUserData?;
};

# Represents the Queries record for the operation: UserSettings_PutUserSettings
public type UserSettingsPutUserSettingsQueries record {
    @http:Query {name: "allow_all_languages"}
    string allowAllLanguages?;
};

# Represents the Queries record for the operation: APIRequestLog_GetRequestLogs
public type APIRequestLogGetRequestLogsQueries record {
    # Reserved for DocuSign
    string encoding?;
};

# Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added
public type Intermediary record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    PropertyMetadata requireIdLookupMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The recipient's first name. Maximum Length: 50 characters
    string firstName?;
    RecipientPhoneNumber phoneNumber?;
    # The full legal name of the recipient. Maximum Length: 100 characters.
    # 
    # **Note:** You must always set a value for this property in requests, even if `firstName` and `lastName` are set
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    # 
    # When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent
    string[] excludedDocuments?;
    PropertyMetadata routingOrderMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # The recipient's status. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipientÃ¢ÂÂs email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only
    string statusCode?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The recipient's last name
    string lastName?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    RecipientSMSAuthentication smsAuthentication?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The recipient's email address. Notification of the document to sign is sent to this email address. 
    # 
    # Maximum length: 100 characters. 
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    PropertyMetadata firstNameMetadata?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # 
    string emailRecipientPostSigningURL?;
};

# All of the tabs associated with a recipient. Each property is a list of a type of tab
public type EnvelopeRecipientTabs record {
    # A list of
    # [First Name tabs][firstName].
    # 
    # A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.
    # 
    # 
    # [firstName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#parameters_firstname
    FirstName[] firstNameTabs?;
    # A list of numerical tabs.
    # 
    # Numerical  tabs provide robust display and validation features, including formatting for different regions and currencies, and minimum and maximum value validation.                                                                                                                                                                                                                                                                                                                                                                                                                                                             
    # 
    # To learn more about the different forms of number tabs,
    # see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide.
    # For specific information about numerical tabs
    # see [Features of numericalTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numericaltabs)
    Numerical[] numericalTabs?;
    # A list of
    # [Initial Here tabs][initialHere].
    # 
    # This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
    # 
    # [initialHere]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    InitialHere[] initialHereTabs?;
    # An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set
    CommentThread[] commentThreadTabs?;
    # A list of
    # [Title tabs][title].
    # 
    # A Title tab displays the recipient's title.  This value can't be set.
    # 
    # 
    # [title]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Title[] titleTabs?;
    # A list of
    # [View tabs][view].
    # 
    # A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
    # 
    # [view]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    View[] viewTabs?;
    # A list of
    # [Commission County tabs][cc].
    # 
    # 
    # A Commission County tab displays the county of a notary's commission. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionCounty[] commissionCountyTabs?;
    # A list of
    # [Commission State tabs][cc].
    # 
    # 
    # A Commission County tab displays the state in which a notary's commission was granted. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionState[] commissionStateTabs?;
    # An array of List tabs.
    # 
    # A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
    # 
    # Find descriptions of all tab types in
    # the [EnvelopeRecipientTabs Resource][ert].
    # 
    # [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    List[] listTabs?;
    # A list of
    # [Zip tabs][zip].
    # 
    # A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
    # 
    # 
    # [zip]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Zip[] zipTabs?;
    PrefillTabs prefillTabs?;
    # A list of
    # [Decline tabs][decline].
    # 
    # A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.
    # 
    # 
    # [decline]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Decline[] declineTabs?;
    # A list of
    # [Envelope ID tabs][envelopeId].
    # 
    # An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
    # 
    # 
    # [envelopeId]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#response201_envelopeid
    EnvelopeId[] envelopeIdTabs?;
    # A list of
    # [Approve tabs][approve].
    # 
    # An Approve tab enables
    # the recipient to approve documents without
    # placing a signature or initials on the document. If the
    # recipient clicks the tab during the signing process, the
    # recipient is considered to have signed the document. No
    # information is shown on the document of the approval, but it
    # is recorded as a signature in the envelope history.
    # The value of an approve tab can't be set.
    # 
    # [approve]:          /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Approve[] approveTabs?;
    # A list of
    # [Signer Attachment tabs][signerAttachment].
    # 
    # This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
    # 
    # 
    # [signerAttachment]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    SignerAttachment[] signerAttachmentTabs?;
    # An array of `tabGroup` items.
    # 
    # To associate a tab with a tab group, add the tab group's `groupLabel` to the tab's `tabGroupLabels` array
    TabGroup[] tabGroups?;
    # A list of
    # [Sign Here tabs][signHere].
    # 
    # This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
    # 
    # [signHere]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    SignHere[] signHereTabs?;
    # A list of Draw Tabs.
    # 
    # A Draw Tab allows the recipient to add a free-form drawing to the document
    Draw[] drawTabs?;
    # A list of
    # [Email Address tabs][emailAddress].
    # 
    # An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
    # 
    # 
    # [emailAddress]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    EmailAddress[] emailAddressTabs?;
    # A list of
    # [Date tabs][date].
    # 
    # A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but several other date formats are also accepted. The system retains the format that the recipient enters.
    # 
    # **Note:** If you need to enforce a specific date format, DocuSign recommends that you use a Text tab with a validation pattern and validation message.
    # 
    # 
    # [date]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Date[] dateTabs?;
    # A list of [Formula tabs][formulaTab].
    # 
    # The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.
    # 
    # The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
    # 
    # If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].
    # 
    # [calculatedfields]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html
    # [paymentguide]:     https://support.docusign.com/s/document-item?bundleId=juu1573854950452&topicId=fyw1573854935374.html
    # [formulaTab]:       /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    FormulaTab[] formulaTabs?;
    # A list of
    # [Checkbox tabs][checkbox].
    # 
    # 
    # A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
    # 
    # 
    # [checkbox]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Checkbox[] checkboxTabs?;
    # A list of
    # [Email tabs][email].
    # 
    # An Email tab enables the recipient to enter an email address.
    # This is a one-line field that checks that a valid email
    # address is entered. It uses the same parameters as a Text
    # tab, with the validation message and pattern set for email
    # information. This value can be set.
    # 
    # When getting information that includes
    # this tab type, the original value of the tab when the
    # associated envelope was sent is included in the response.
    # 
    # [email]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Email[] emailTabs?;
    # A list of
    # [Commission Number tabs][tabref].
    # 
    # 
    # A Commission Number tab displays a notary's commission number. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [tabref]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionNumber[] commissionNumberTabs?;
    # A list of
    # [Commission Expiration tabs][tabref].
    # 
    # 
    # A Commission Expiration tab displays the expiration date of a notary's commission. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [tabref]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionExpiration[] commissionExpirationTabs?;
    # A list of
    # [Phone Number tabs][cc].
    # 
    # 
    # A Phone Number tab enables a recipient to enter a phone number.
    # 
    # **Note:** This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    PhoneNumber[] phoneNumberTabs?;
    # A list of  [Notarize tabs][notarize].
    # 
    # A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
    # 
    # **Note:** Only one notarize tab can appear on a page.
    # 
    # [notarize]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Notarize[] notarizeTabs?;
    # A list of [Radio Group tabs][radioGroup].
    # 
    # A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
    # buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
    # 
    # 
    # [radioGroup]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    RadioGroup[] radioGroupTabs?;
    # A list of
    # [Date Signed tabs][dateSigned].
    # 
    # 
    # A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
    # 
    # [dateSigned]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    DateSigned[] dateSignedTabs?;
    # A list of
    # Text tabs.
    # 
    # A text tab enables the recipient to enter free text. This value can be set.
    # 
    # Find descriptions of all tab types in
    # the [EnvelopeRecipientTabs Resource][ert].
    # 
    # [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Text[] textTabs?;
    # A list of
    # [Company tabs][company].
    # 
    # A Company tab displays a field for the name of the recipient's company. This value can't be set.
    # 
    # [company]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#parameters_company
    Company[] companyTabs?;
    # A list of
    # [Note tabs][note].
    # 
    # A Note tab displays additional information to the recipient in the form of a note. This value can be set.
    # 
    # [note]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Note[] noteTabs?;
    # A list of
    # [Full Name tabs][fullName].
    # 
    # A Full Name tab displays the recipient's full name. This value can't be set.
    # 
    # 
    # [fullName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    FullName[] fullNameTabs?;
    # A list of
    # [SSN tabs][ssn].
    # 
    # An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
    # dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
    # 
    # 
    # [ssn]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Ssn[] ssnTabs?;
    # A list of Notary Seal tabs.
    # 
    # A Notary Seal tab enables the recipient to notarize a document. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
    # 
    # [notary]: /docs/notary-api/
    NotarySeal[] notarySealTabs?;
    # A list of
    # [Last Name tabs][lastName].
    # 
    # A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.
    # 
    # 
    # [lastName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    LastName[] lastNameTabs?;
    # A list of Number tabs.
    # 
    # Number tabs validate that the entered value is a number.
    # They do not support advanced validation or display options.
    # 
    # To learn more about the different forms of number tabs,
    # see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide.
    # For specific information about number tabs
    # see [Features of numberTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numbertabs).
    # 
    # [number]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Number[] numberTabs?;
    # A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections) tabs.
    # 
    # Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
    # 
    # **Note:** Smart Sections are a premium feature. Responsive signing must also be enabled for your account
    SmartSection[] smartSectionTabs?;
    # This type of tab enables the recipient to strike through document text. This value can't be set
    PolyLineOverlay[] polyLineOverlayTabs?;
};

# 
public type ConnectUserObject record {
    # 
    string hasAccess?;
    # 
    string[] senderSearchableItems?;
    # The type of custom Connect configuration being accessed
    string configurationtype?;
    # The ID of the custom Connect configuration being accessed
    string connectId?;
    # Boolean value that indicates whether the custom Connect configuration is enabled or not
    string enabled?;
};

# A tab that displays the recipient's first name. This tab
# takes the recipient's name as entered in the recipient
# information, splits it into sections based on spaces and
# uses the first section as the first name
public type FirstName record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# Contains shared access information
public type AccountSharedAccess record {
    # The account ID associated with the envelope
    string accountId?;
    # The last index position in the result set. 
    string endPosition?;
    # The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`
    string totalSetSize?;
    # A list of shared access information of envelope and templates for the users specified in the request
    MemberSharedItems[] sharedAccess?;
    # The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`
    string resultSetSize?;
    # The starting index position of the current result set
    string startPosition?;
    # The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. 
    string nextUri?;
    # The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. 
    string previousUri?;
    ErrorDetails errorDetails?;
};

# Represents the Queries record for the operation: BillingPayments_GetPaymentList
public type BillingPaymentsGetPaymentListQueries record {
    # Specifies the date/time of the earliest payment in the account to retrieve
    @http:Query {name: "from_date"}
    string fromDate?;
    # Specifies the date/time of the latest payment in the account to retrieve
    @http:Query {name: "to_date"}
    string toDate?;
};

public type ResourcesresourceContentTypeBody record {
    # Brand resource XML file
    @jsondata:Name {value: "file.xml"}
    record {byte[] fileContent; string fileName;} fileXml;
};

# 
public type JurisdictionSummary record {
    # The ID of the jurisdiction.
    # The following jurisdictions
    # are supported:
    # 
    # -  `5 - California`
    # -  `6 - Colorado`
    # -  `9 - Florida`
    # -  `10 - Georgia`
    # -  `12 - Idaho`
    # -  `13 - Illinois`
    # -  `14 - Indiana`
    # -  `15 - Iowa`
    # -  `17 - Kentucky`
    # -  `23 - Minnesota`
    # -  `25 - Missouri`
    # -  `30 - New Jersey`
    # -  `32 - New York`
    # -  `33 - North Carolina`
    # -  `35 - Ohio`
    # -  `37 - Oregon`
    # -  `38 - Pennsylvania`
    # -  `40 - South Carolina`
    # -  `43 - Texas`
    # -  `44 - Utah`
    # -  `47 - Washington`
    # -  `48 - West Virginia`
    # -  `49 - Wisconsin`
    # -  `62 - Florida Commissioner of Deeds`
    string jurisdictionId?;
    # 
    string jurisdictionName?;
    # 
    string authorizedForRon?;
    # 
    string authorizedForIPen?;
};

# 
public type AdminMessage record {
    # 
    string moreInformation?;
    # 
    string baseMessage?;
};

# This request object contains information about a specific brand
public type BrandRequest record {
    # The ID of the brand used in API calls
    string brandId?;
};

# A Phone Number tab enables a recipient to enter a phone number.
# 
# **Note:** This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
# 
# [notary]: /docs/notary-api/
public type PhoneNumber record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # 
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: SigningGroups_GetSigningGroups
public type SigningGroupsGetSigningGroupsQueries record {
    # When **true,** the response includes the signing group members. 
    @http:Query {name: "include_users"}
    string includeUsers?;
    # Filters by the type of signing group. Valid values:
    # * `sharedSigningGroup`
    # * `privateSigningGroup`
    # * `systemSigningGroup`
    @http:Query {name: "group_type"}
    string groupType?;
};

# Represents the Queries record for the operation: Notary_GetNotary
public type NotaryGetNotaryQueries record {
    # When **true,** the response will include a `jurisdiction` property that contains an array of all supported jurisdictions for the current user
    @http:Query {name: "include_jurisdictions"}
    string includeJurisdictions?;
};

# A tab that allows the recipient to attach supporting
# documents to an envelope
public type SignerAttachment record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (+0, -24)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the recipient does not need to complete this tab to complete the signing process
    string optional?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata optionalMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (+0, -24)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata scaleValueMetadata?;
    PropertyMetadata yPositionMetadata?;
    # Reserved for DocuSign
    string handDrawRequired?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size
    string scaleValue?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    PropertyMetadata captionMetadata?;
};

# Contains details about a PowerForm
public type PowerForm record {
    # The instructions that display on the landing page for the first recipient. These instructions are important if the recipient accesses the PowerForm by a method other than email. If instructions are entered, they display as an introduction after the recipient accesses the PowerForm.  Limit: 2000 characters
    string instructions?;
    # The units associated with the `limitUseInterval`. Valid values are:
    # 
    # - `minutes`
    # - `hours
    # - `days`
    # - `weeks`
    # - `months`
    # 
    # For example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`
    string limitUseIntervalUnits?;
    # The body of the email message sent to the recipients. 
    # 
    # Maximum length: 10000 characters
    string emailBody?;
    # The UTC DateTime when the item was created
    string createdDateTime?;
    # The length of time before the same recipient can sign the same PowerForm. This property is used in combination with the `limitUseIntervalUnits` property
    string limitUseInterval?;
    # When **true,** indicates that the PowerForm is active and can be sent to recipients. This is the default value.
    # 
    # When **false,** the PowerForm cannot be emailed or accessed by a recipient, even if they arrive at the PowerForm URL. 
    # 
    # If a recipient attempts to sign an inactive PowerForm, an error message informs the recipient that the document is not active and suggests that they contact the sender
    string isActive?;
    # The ID of the template used to create the PowerForm
    string templateId?;
    # The subject line of the email message that is sent to all recipients.
    # 
    # For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](/docs/esign-rest-api/reference/templates/templates/create/#template-email-subject-merge-fields).
    # 
    # **Note:** The subject line is limited to 100 characters, including any merged fields.It is not truncated. It is an error if the text is longer than 100 characters
    string emailSubject?;
    # When **true,** the `limitUseInterval` is enabled
    string limitUseIntervalEnabled?;
    # The signing mode to use. Valid values are:
    #  
    # - `email`: Verifies the recipient's identity using email authentication before the recipient can sign a document. The recipient enters their email address and then clicks **Begin Signing** to begin the signing process. The system then sends an email message with a validation code for the PowerForm to the recipient. If the recipient does not provide a valid email address, they cannot open and sign the document.  
    # - `direct`: Does not require any verification. After a recipient enters their email address and clicks **Begin Signing,** a new browser tab opens and the recipient can immediately begin the signing process. Because the recipient's identity is not verified by using email authentication, we strongly recommend that you only use the `direct` signing mode when the PowerForm is accessible behind a secure portal where the recipient's identity is already authenticated, or where another form of authentication is specified for the recipient in the DocuSign template (for example, an access code, phone authentication, or ID check).  
    # 
    # **Note:** In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`
    string signingMode?;
    # The sender's name
    string senderName?;
    # The number of times the PowerForm has been used. 
    string timesUsed?;
    # The URL for the PowerForm
    string powerFormUrl?;
    # The ID of the sender
    string senderUserId?;
    # The URI for the PowerForm
    string uri?;
    # The UTC DateTime when the PowerForm was last used
    string lastUsed?;
    # When **true,** you can set a maximum number of uses for the PowerForm
    string maxUseEnabled?;
    # The ID of the PowerForm
    string powerFormId?;
    # The ID of the user who created the PowerForm
    string createdBy?;
    # The name of the template used to create the PowerForm
    string templateName?;
    # An array of recipient objects that provides details about the recipients of the envelope
    PowerFormRecipient[] recipients?;
    # The name of the PowerForm
    string name?;
    # The number of times the PowerForm can still be used
    string usesRemaining?;
    # 
    Envelope[] envelopes?;
    ErrorDetails errorDetails?;
};

# Information about items shared among groups
public type MemberGroupSharedItem record {
    # How the item is shared. One of:
    # 
    # 
    # - `not_shared`: The item is not shared.
    # 
    # - `shared_to`: The item is shared
    string shared?;
    ErrorDetails errorDetails?;
    Group group?;
};

# A complex object describing a Connect OAuth configuration
public type ConnectOAuthConfig record {
    # The client ID assigned to your app by your authorization server or OAuth service.
    # 
    # This property is required
    string clientId?;
    # The token URL for your authorization server or OAuth service.
    # 
    # This property is required
    string authorizationServerUrl?;
    # The scopes that your app will request from the authorization server.
    # 
    # This property is optional.
    # 
    # **Note:** If you are using Azure, this value is the application ID URI of the secified resource affixed with the `.default`. For example: `api://{{clientId}}/.default`
    string scope?;
    # The secret value provided by your authorization server.
    # 
    # This property is required
    string clientSecret?;
    # 
    string customParameters?;
};

# Description of a page of a document
public type Page record {
    # The sequence of the page in the document, or page number
    string sequence?;
    # The width of the page in pixels.
    # Must be an integer
    string width?;
    # The number of image bytes
    string imageBytes?;
    # The MIME type
    string mimeType?;
    # The number of dots per inch used for the page image
    string dpi?;
    # The ID of the page
    string pageId?;
    ErrorDetails errorDetails?;
    # The height of the page in pixels.
    # Must be an integer
    string height?;
};

# A line item describes details
# about an individual line item
# in a payment request.
public type PaymentLineItem record {
    # This is the sender-defined
    # SKU, inventory number, or other item code
    # for the line item
    string itemCode?;
    # This is a the `tabLabel`
    # that specifies the amount paid
    # for the line items.
    string amountReference?;
    # This is a sender-defined
    # product name, service name,
    # or other designation for the line item
    string name?;
    # A sender-defined description of the line item
    string description?;
};

# 
public type SignatureUserDef record {
    # Boolean that specifies whether the signature is the default signature for the user
    string isDefault?;
    # Indicates whether the property is editable. Valid values are:
    # 
    # - `editable`
    # - `read_only`
    string rights?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
};

# 
public type UserSignaturesInformation record {
    # An array of  `userSignature` objects
    UserSignature[] userSignatures?;
};

# Represents the Queries record for the operation: User_GetUser
public type UserGetUserQueries record {
    # Setting this parameter has no effect in this operation
    @http:Query {name: "additional_info"}
    string additionalInfo?;
    # Setting this parameter has no effect in this operation
    string email?;
};

# An array of email notifications that specifies the email the user receives when they are a recipient. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account email notification settings when the user is created
public type SignerEmailNotifications record {
    # When **true,** the user receives only comments that mention their own user name
    string commentsOnlyPrivateAndMention?;
    # When **true,** the user receives notification that he or she is a member of the signing group
    string whenSigningGroupMember?;
    # When **true,** the user receives notification that the envelope has been declined
    string envelopeDeclined?;
    # When **true,** the user receives notifications of carbon copy deliveries
    string carbonCopyNotification?;
    # When **true,** the user receives notifications of certified deliveries
    string certifiedDeliveryNotification?;
    # When **true,** the user receives notification that the envelope has been activated
    string envelopeActivation?;
    # When **true,** the user receives an email notification if offline signing failed
    string offlineSigningFailed?;
    # When **true,** the user receives notification that the envelope has been reassigned
    string reassignedSigner?;
    # When **true,** the user receives notification that document markup has been activated
    string documentMarkupActivation?;
    # Reserved for DocuSign
    string faxReceived?;
    # When **true,** the user receives an email notification when the envelope has been completed
    string envelopeComplete?;
    # When **true,** the user receives notification that the envelope has been corrected
    string envelopeCorrected?;
    # When **true,** the user receives notification that the envelope has been voided
    string envelopeVoided?;
    # When **true,** the user receives all comments
    string commentsReceiveAll?;
    # When **true,** the user receives agent notification emails
    string agentNotification?;
    # When **true,** the user receives an email notification when a document purge occurs
    string purgeDocuments?;
};

# This object defines account permissions for users who are associated with the account permission profile. 
public type AccountRoleSettings record {
    SettingsMetadata allowedClickwrapsAccessMetadata?;
    SettingsMetadata allowEnvelopeSendingMetadata?;
    SettingsMetadata allowApiAccessToAccountMetadata?;
    SettingsMetadata allowedAddressBookAccessMetadata?;
    #  When **true,** auto-tagging is enabled for the account
    string allowAutoTagging?;
    SettingsMetadata allowDocuSignDesktopClientMetadata?;
    SettingsMetadata allowAutoTaggingMetadata?;
    # 
    string canCreateTransaction?;
    SettingsMetadata canDeleteDocumentsInTransactionMetadata?;
    SettingsMetadata webFormsMetadata?;
    SettingsMetadata useNewDocuSignExperienceInterfaceMetadata?;
    # When **true,** users can add requests for attachments from signers
    string allowSignerAttachments?;
    SettingsMetadata receiveCompletedSelfSignedDocumentsAsEmailLinksMetadata?;
    # When **true,** senders can include supplemental documents
    string allowSupplementalDocuments?;
    # When **true,** the sequential signing user interface is enabled
    string enableSequentialSigningInterface?;
    # Reserved for DocuSign
    string enableTransactionPointIntegration?;
    # When **true,** users can access the **Other Actions** menu
    string disableOtherActions?;
    # When **true,** users can send envelopes on behalf of others
    string allowApiSendingOnBehalfOfOthers?;
    # When **true,** users can be recipients of envelopes transferred to them by administrators of other accounts. 
    string allowedToBeEnvelopeTransferRecipient?;
    # When **true,** users can send envelopes
    string allowEnvelopeSending?;
    # When **true,** users can require recipients to view supplemental documents
    string supplementalDocumentsMustView?;
    # When **true,** PowerForm Administrators can access all of the PowerForm envelopes associated with the account
    string allowPowerFormsAdminToAccessAllPowerFormEnvelopes?;
    # When **true,** API request logging is enabled.
    # 
    # **Note:** Logging limits apply
    string enableApiRequestLogging?;
    SettingsMetadata enableSequentialSigningInterfaceMetadata?;
    # When **true,** senders can set the language of the email that is sent to recipients
    string allowSendersToSetRecipientEmailLanguage?;
    SettingsMetadata allowedToBeEnvelopeTransferRecipientMetadata?;
    # When **true,** users have full administrative access to the account
    string allowAccountManagement?;
    SettingsMetadata allowSupplementalDocumentsMetadata?;
    SettingsMetadata allowWetSigningOverrideMetadata?;
    # When **true,** the tagger palette is visible during the sending and correct flows and users can add tabs to documents
    string allowTaggingInSendAndCorrect?;
    # When **true,** users can override the default account setting that controls whether recipients can sign documents on paper. The option to overrride this setting occurs during the sending process on a per-envelope basis
    string allowWetSigningOverride?;
    SettingsMetadata enableKeyTermsSuggestionsByDocumentTypeMetadata?;
    SettingsMetadata canSendEnvelopesViaSMSMetadata?;
    # When **true,** senders receive emails about completed, self-signed documents that contain links to the completed documents instead of PDF attachments
    string receiveCompletedSelfSignedDocumentsAsEmailLinks?;
    SettingsMetadata supplementalDocumentsMustReadMetadata?;
    SettingsMetadata supplementalDocumentsMustViewMetadata?;
    SettingsMetadata allowedTemplateAccessMetadata?;
    # When **true,** senders can require recipients to read supplemental documents
    string supplementalDocumentsMustRead?;
    # Reserved for DocuSign
    string canCreateWorkspaces?;
    # 
    string canDeleteDocumentsInTransaction?;
    SettingsMetadata allowVaultingMetadata?;
    # When **true,** senders are notified when recipients view the documents that they send
    string enableRecipientViewingNotifications?;
    SettingsMetadata allowApiSendingOnBehalfOfOthersMetadata?;
    # Reserved for DocuSign
    string useNewSendingInterface?;
    # Reserved for DocuSign
    string allowVaulting?;
    # When **true,** users can manage documents by using the API
    string allowApiAccess?;
    SettingsMetadata allowESealRecipientsMetadata?;
    # When **true,** users can access the account by using the eSignature API
    string allowApiAccessToAccount?;
    SettingsMetadata enableTransactionPointIntegrationMetadata?;
    SettingsMetadata allowPowerFormsAdminToAccessAllPowerFormEnvelopesMetadata?;
    # When **true,** users cannot upload documents
    string disableDocumentUpload?;
    # Reserved for DocuSign
    string vaultingMode?;
    SettingsMetadata allowAccountManagementMetadata?;
    # When **true,** users can add electronic seal ([eSeal](https://support.docusign.com/s/document-item?bundleId=xcm1643837555908&topicId=isl1578456577247.html)) recipients
    string allowESealRecipients?;
    SettingsMetadata canCreateWorkspacesMetadata?;
    # When **true,** the DocuSign Desktop Client is enabled for users
    string allowDocuSignDesktopClient?;
    SettingsMetadata disableOtherActionsMetadata?;
    SettingsMetadata canCreateTransactionMetadata?;
    SettingsMetadata allowSendersToSetRecipientEmailLanguageMetadata?;
    # The PowerForms rights associated with the account permission profile. Valid values are:
    # 
    # - `none` 
    # - `user` 
    # - `admin`
    string powerFormRole?;
    SettingsMetadata disableDocumentUploadMetadata?;
    SettingsMetadata allowTransactionsMetadata?;
    # 
    string canDeleteTransaction?;
    SettingsMetadata supplementalDocumentsMustAcceptMetadata?;
    # Specifies the level of access that users have to account templates. Valid values are: 
    # 
    # - `none` 
    # - `use`
    # - `create`
    # - `share`
    string allowedTemplateAccess?;
    SettingsMetadata enableRecipientViewingNotificationsMetadata?;
    # When **true,** bulk sending is enabled for users
    string allowBulkSending?;
    SettingsMetadata allowBulkSendingMetadata?;
    # 
    string allowedOrchestrationAccess?;
    # When **true,** senders can require recipients to accept supplemental documents
    string supplementalDocumentsMustAccept?;
    # Reserved for DocuSign
    string useNewDocuSignExperienceInterface?;
    # When **true,** users may specify sequential signing recipients when they send documents by using the API
    string allowApiSequentialSigning?;
    SettingsMetadata allowApiAccessMetadata?;
    SettingsMetadata allowedOrchestrationAccessMetadata?;
    SettingsMetadata allowApiSequentialSigningMetadata?;
    SettingsMetadata canDeleteTransactionMetadata?;
    SettingsMetadata signingUiVersionMetadata?;
    SettingsMetadata powerFormRoleMetadata?;
    SettingsMetadata vaultingModeMetadata?;
    # 
    string allowTransactions?;
    SettingsMetadata allowTaggingInSendAndCorrectMetadata?;
    # 
    string webForms?;
    SettingsMetadata allowSignerAttachmentsMetadata?;
    # 
    string canSendEnvelopesViaSMS?;
    # 
    string enableKeyTermsSuggestionsByDocumentType?;
    # 
    string allowedClickwrapsAccess?;
    SettingsMetadata useNewSendingInterfaceMetadata?;
    SettingsMetadata enableApiRequestLoggingMetadata?;
    # Specifies the level of access that users have to the account's address book. Valid values are:
    # 
    # - `personal`
    # - `useShared`
    # - `usePersonalAndShared`
    # - `personalAndShared`
    string allowedAddressBookAccess?;
};

# A list of `documentVisibility` objects that specify whether the documents associated with a template are visible to recipients
public type TemplateDocumentVisibilityList record {
    # An array of `documentVisibility` objects that specifies which documents are visible to which recipients
    DocumentVisibility[] documentVisibility?;
};

# This object contains information about a credit card that is associated with an account
public type CreditCardInformation record {
    # The year in which the credit card expires, in 4-digit format
    string expirationYear?;
    # 
    string tokenizedCard?;
    AddressInformation address?;
    # The exact name as it appears on the credit card
    string nameOnCard?;
    # The type of credit card. Valid values are: 
    # 
    # - `visa` 
    # - `mastercard` 
    # - `amex`
    string cardType?;
    # The month that the credit card expires, expressed as a number from 1 to 12
    string expirationMonth?;
    # The 3 or 4-digit card verification value (CVV) number associated with the credit card. CVV numbers are also referred to as card security codes (CSCs)
    string cvNumber?;
    # The credit card number
    string cardNumber?;
    # 
    string cardLastDigits?;
};

# Represents the Queries record for the operation: PowerForms_GetPowerFormFormData
public type PowerFormsGetPowerFormFormDataQueries record {
    # The start date for a date range in UTC DateTime format.
    # 
    # **Note:** If this property is null, no date filtering is applied
    @http:Query {name: "from_date"}
    string fromDate?;
    # The end date of a date range in UTC DateTime format. The default value is `UtcNow`
    @http:Query {name: "to_date"}
    string toDate?;
    # The layout in which to return the PowerForm data. Valid values are:
    # 
    # - `Native`
    # - `Csv_Classic`
    # - `Csv_One_Envelope_Per_Line`
    # - `Xml_Classic`
    @http:Query {name: "data_layout"}
    string dataLayout?;
};

# Envelope object definition
public type EnvelopeDefinition record {
    # Not used. Use the
    # [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations)
    # property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead
    string expireDateTime?;
    # The reason the envelope or template was voided.
    # 
    # **Note:** The string is truncated to the first 200 characters
    string voidedReason?;
    # An array of attachment objects that provide information about the attachments that are associated with the envelope
    Attachment[] envelopeAttachments?;
    # When **true,** [Envelope ID Stamping](https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=tfm1578456367923.html) is enabled.
    # After a document or attachment is stamped with an Envelope ID,
    # the ID is seen by all recipients
    # and becomes a permanent part of the document
    # and cannot be removed
    string envelopeIdStamping?;
    # Reserved for DocuSign
    string envelopeLocation?;
    # An array of folders that the envelope belongs to
    Folder[] folders?;
    # The date and time that the item was last modified
    string lastModifiedDateTime?;
    # Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account.
    # 
    # **Note:** This information is currently generated from the DocuSign web console by setting the reading zones when creating a template, exporting the reading zone string information, and adding it here
    string accessibility?;
    # A complex element that contains details about the documents associated with the envelope
    Document[] documents?;
    # The URI for retrieving notifications
    string notificationUri?;
    EmailSettings emailSettings?;
    # The date and time that the envelope was created
    string createdDateTime?;
    # The date and time that the envelope was first sent
    string initialSentDateTime?;
    # When **true,** the recipient can redirect an envelope to a more appropriate recipient
    string allowReassign?;
    # The ID of the template. If a value is not provided, DocuSign generates a value. 
    string templateId?;
    Notification notification?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # An array containing information about the documents that are included in the envelope
    EnvelopeDocument[] envelopeDocuments?;
    # The user's encrypted password hash
    string password?;
    # When **true,** prevents senders from changing, correcting, or deleting the recipient information for the envelope
    string recipientsLock?;
    # The URI for retrieving any templates associated with the envelope
    string templatesUri?;
    # May contain an external identifier for the envelope
    string externalEnvelopeId?;
    # The envelope ID.
    # 
    # When used as a request body in [Envelopes: create](/docs/esign-rest-api/reference/envelopes/envelopes/create/), this is the ID of the envelope to clone
    string envelopeId?;
    EnvelopeMetadata envelopeMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # When **true,** the responsive document feature is turned off for the envelope
    string disableResponsiveDocument?;
    # Not used. Use the
    # [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations)
    # property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead
    string expireEnabled?;
    # When **true,** the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When **false,** the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 
    # 
    # If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information
    string useDisclosure?;
    # When **true,** recipients can sign on a mobile device.
    # 
    # **Note:** Only Admin users can change this setting
    string signerCanSignOnMobile?;
    # When **true,** prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 
    # 
    # Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 
    # 
    # However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope
    string messageLock?;
    Workflow workflow?;
    # The date that a purge was completed
    string purgeCompletedDate?;
    # The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
    # If this property is not set, each document defaults to the envelope's `authoritativeCopy`
    string authoritativeCopyDefault?;
    # The URI for retrieving all of the documents associated with the envelope as separate files
    string documentsUri?;
    # The date that a purge was requested
    string purgeRequestDate?;
    # Deprecated. This feature has been replaced by signing groups
    string anySigner?;
    #  Used to identify an envelope. The ID is a sender-generated value and is valid in the DocuSign system for 7 days. DocuSign recommends that you use a transaction ID for offline signing to ensure that an envelope is not sent multiple times. You can use the `transactionId` property to determine an envelope's status (i.e. was it created or not) in cases where the Internet connection was lost before the envelope status was returned
    string transactionId?;
    PowerForm powerForm?;
    # When **true,** indicates that the form data associated with the envelope has changed since it was sent. When **false,** this property does not appear in the response
    string hasFormDataChanged?;
    UserInfo sender?;
    EnvelopeRecipients recipients?;
    # Reserved for DocuSign
    string accessControlListBase64?;
    # The ID of the brand, or text and formatting, to use for the envelope. To use brands, account branding must be enabled for the account.
    # 
    # **Note:** When creating an envelope using a branded template, include this value to ensure that the brand is applied
    string brandId?;
    # When **true,** indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES)
    string is21CFRPart11?;
    # When **true,** indicates that the envelope is a dynamic envelope
    string isDynamicEnvelope?;
    # Indicates the envelope status. Valid values when creating an envelope are: 
    # 
    # * `created`: The envelope is created as a draft. It can be modified and sent later.
    # * `sent`: The envelope will be sent to the recipients after the envelope is created.
    # 
    # You can query these additional statuses once the recipients have interacted with the envelope.
    # 
    # * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
    # * `declined`: The envelope has been declined by the recipients.
    # * `delivered`: The envelope has been delivered to the recipients.
    # * `signed`: The envelope has been signed by the recipients.
    # * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope
    string status?;
    # When **true,** indicates that a wave file (voice recording) is part of the envelope
    string hasWavFile?;
    # When **true,** indicates that users have added comments to the envelope
    string hasComments?;
    # An array of attachment objects containing details about any envelope attachments
    Attachment[] attachments?;
    # When **true,** users can view the history of the envelope
    string allowViewHistory?;
    # The URI for retrieving certificate information
    string certificateUri?;
    AccountCustomFields customFields?;
    # When **true,** autonavigation is set for the recipient
    string autoNavigation?;
    # A complex type that can be added to create envelopes from a combination of DocuSign templates and PDF forms. The basic envelope remains the same, while the Composite Template adds new document and template overlays into the envelope. There can be any number of Composite Template structures in the envelope
    CompositeTemplate[] compositeTemplates?;
    # The date and time the envelope or template was voided
    string voidedDateTime?;
    # When **true,** the Document Markup feature is enabled.
    # 
    # **Note:**  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting at the account level
    string allowMarkup?;
    # The date and time that the recipient declined the envelope
    string declinedDateTime?;
    # The date and time that the envelope was deleted
    string deletedDateTime?;
    # The date and time that the envelope was completed
    string completedDateTime?;
    # The subject line of the email message that is sent to all recipients.
    # 
    # For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](/docs/esign-rest-api/reference/templates/templates/create/#template-email-subject-merge-fields).
    # 
    # **Note:** The subject line is limited to 100 characters, including any merged fields.It is not truncated. It is an error if the text is longer than 100 characters
    string emailSubject?;
    # The data and time that the status changed
    string statusChangedDateTime?;
    # This value is only applicable when copying an existing envelope. Provide the ID of the envelope to clone in `envelopeId`.
    # 
    # When **true,** the recipient field values of the existing envelope are included. Only values from data entry fields, like checkboxes and radio buttons, will be copied. Fields that require an action, like signatures and initials, will not be included
    string copyRecipientData?;
    # When **true,** the envelope is queued for
    # processing and the value of the `status` property
    # is set to `Processing`. Additionally, GET status
    # calls return `Processing` until completed.
    # 
    # 
    # **Note:** A `transactionId` is required for this
    # call to work correctly. When the envelope is
    # created, the status is `Processing` and an
    # `envelopeId` is not returned in the response. To
    # get the `envelopeId`, use a GET envelope query by
    # using the
    # [transactionId](/docs/esign-rest-api/reference/envelopes/envelopes/create/) or by checking the
    # Connect notification
    string asynchronous?;
    # Initiates a purge request. Valid values are:
    # 
    # - `documents_queued`: Places envelope documents in the purge queue.
    # - `documents_and_metadata_queued`: Places envelope documents
    #    and metadata in the purge queue.
    # - `documents_and_metadata_and_redact_queued`: Places envelope documents
    #    and metadata in the purge queue and redacts personal information.
    # 
    # **Related topics**
    # 
    # - [Purging documents (eSingature Concepts)](/docs/esign-rest-api/esign101/concepts/documents/purging/)
    # - [Purging documents in an envelope (blog post)](https://www.docusign.com/blog/developers/purging-documents-envelope)
    string purgeState?;
    # When **true,** indicates that the envelope is a signature-provided envelope
    string isSignatureProviderEnvelope?;
    # The DateTime that the envelope changed status (i.e. was created or sent.)
    string statusDateTime?;
    # The URI for retrieving the envelope attachments
    string attachmentsUri?;
    # When **true,** marks all of the documents in the envelope as authoritative copies.
    # 
    # **Note:** You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false.**
    string authoritativeCopy?;
    # When **true,** the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope
    string brandLock?;
    # 
    string burnDefaultTabData?;
    # This optional element holds the body of the email message that is sent to all envelope recipients. 
    # 
    # Maximum Length: 10000 characters
    string emailBlurb?;
    # When **true,** the signer is allowed to print the document and sign it on paper
    string enableWetSign?;
    # When **true,** signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.
    # 
    # **Note:** To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true.**
    # 
    # [docviz]: /docs/esign-rest-api/reference/envelopes/envelopedocumentvisibility/
    string enforceSignerVisibility?;
    EventNotification eventNotification?;
    EnvelopeLocks lockInformation?;
    # The URI for retrieving custom fields
    string customFieldsUri?;
    # This object specifies the template recipients. Each `roleName` in the template must have a recipient assigned to it. This object is comprised of the following elements:
    # 
    # * `email`: The recipient's email address.
    # * `name`: The recipient's name.
    # * `roleName`: The template roleName associated with the recipient.
    # * `clientUserId`: An optional property that specifies whether the recipient is embedded or remote. If the `clientUserId` is not null, then the recipient is embedded. Note that if a `clientUserId` is used and the account settings `signerMustHaveAccount` or `signerMustLoginToSign` are **true,** an error is generated on sending.
    # * `defaultRecipient`: Optional, When **true,** this recipient is the default recipient and any tabs generated by the `transformPdfFields` option are mapped to this recipient.
    # * `routingOrder`: This specifies the routing order of the recipient in the envelope.
    # * `accessCode`: This optional element specifies the access code a recipient has to enter to validate the identity. Maximum Length: 50 characters.
    # * `inPersonSignerName`: Optional. If the template role is an in-person signer, this is the full legal name of the signer. Maximum Length: 100 characters.
    # * `emailNotification`: This is an optional complex element that has a role-specific `emailSubject`, `emailBody`, and `language`. It follows the same format as the `emailNotification` property for recipients.
    # * `tabs`: This property enables the tab values to be specified for matching to tabs in the template
    TemplateRole[] templateRoles?;
    # Not used. Use the
    # [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations)
    # property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead
    string expireAfter?;
    # Reserved for DocuSign
    string holder?;
    # When **true,** this enables the Recursive Recipients feature and allows a recipient to appear more than once in the routing order
    string allowRecipientRecursion?;
    # When **true,** comments are allowed on the envelope
    string allowComments?;
    EnvelopeCustomMetadata envelopeCustomMetadata?;
    RecipientViewRequest recipientViewRequest?;
    # The URI for retrieving the envelope or envelopes
    string envelopeUri?;
    # Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`
    string signingLocation?;
    # The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding
    string documentBase64?;
    # Reserved for DocuSign
    string location?;
    # The URI for retrieving all of the documents associated with the envelope as a single PDF file
    string documentsCombinedUri?;
    # Contains a URI for an endpoint that you can use to retrieve the recipients
    string recipientsUri?;
};

# This object contains information about the type of signature
public type SignatureType record {
    # When **true,** the signature type is the default type
    string isDefault?;
    # The type of signature. Valid values are:
    # 
    # - `electronic`: Indicates an **electronic** signature that is used by common law countries such as the United States, United Kingdom, and Australia. This is the default signature type that DocuSign uses.
    # - `universal`: Indicates a **digital** signature that is accepted by both common law and civil law countries. To use digital signatures, you must use the [DocuSign Signature Appliance](/docs/dsa-api/).
    # 
    # For more information, see [Standards Based Signatures](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
    string 'type?;
};

# Represents the Queries record for the operation: PermissionProfiles_GetPermissionProfiles
public type PermissionProfilesGetPermissionProfilesQueries record {
    # A comma-separated list of additional properties to return in the response. Valid values are:
    # 
    # - `user_count`: The total number of users associated with the permission profile.
    # - `closed_users`: Includes closed users in the `user_count`.
    # - `account_management`: The account management settings.
    # - `metadata`: Metadata indicating whether the properties associated with the account permission profile are editable.
    # 
    # Example: `user_count,closed_users`
    string include?;
};

# 
public type LocalePolicy record {
    # The format for the signature time. Valid values are:
    # 
    # - `none`
    # - `HH:mm`
    # - `h:mm`
    # - `HH:mm:ss`
    # - `h:mm:ss`
    string signTimeFormat?;
    SettingsMetadata timeZoneMetadata?;
    # Specifies the date format. Valid values:
    # 
    # - `default` <br> used the UI's 
    # - `longformat` <br> use the UI's long format
    # - `dd_mm_yy` <br> dd-MM-yy
    # - `dd_mmm_yy` <br> dd-MMM-yy
    # - `dd_mm_yyyy` <br> dd-MM-yyyy
    # - `dd_mmm_yyyy` <br> dd-MMM-yyyy
    # - `ddmmmmyyyy` <br> dd MMMM yyyy
    # - `ddmmyyyy` <br> dd/MM/yyyy
    # - `ddmmyyyy_de` <br> dd.MM.yyyy
    # - `dmyyyy` <br> d/M/yyyy
    # - `d_m_yyyy` <br> d-M-yyyy
    # - `mmmd_yyyy` <br> MMM d, yyyy
    # - `mmm_dd_yyyy` <br> MMM-dd-yyyy
    # - `mmmmd_yyyy` <br> MMMM d, yyyy
    # - `mm_dd_yyyy` <br> MM-dd-yyyy
    # - `mdyyyy` <br> M/d/yyyy
    # - `yyyy_mmm_dd` <br> yyyy-MMM-dd
    # - `yyyy_mm_dd` <br> yyyy-MM-dd
    # - `yyyymmdd` <br> yyyy/MM/dd
    # - `yyyymd` <br> yyyy/M/d
    # - `custom` <br> Customer set own value
    # - `mmddyyyy` <br> MM/dd/yyyy
    # - `mmddyy` <br> MM/dd/yy
    # - `yyyy_mmmm_d` <br> yyyy MMMM d
    string dateFormat?;
    SettingsMetadata dateFormatMetadata?;
    SettingsMetadata addressFormatMetadata?;
    # The two letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code
    string cultureName?;
    SettingsMetadata currencyPositiveFormatMetadata?;
    # 
    string effectiveCurrencyNegativeFormat?;
    # 
    string effectiveTimeFormat?;
    # 
    string customTimeFormat?;
    SettingsMetadata signDateFormatMetadata?;
    # 
    string allowRegion?;
    SettingsMetadata cultureNameMetadata?;
    # 
    string effectiveTimeZone?;
    # 
    string effectiveCurrencyCode?;
    # The format for the signature date. Valid values are:
    # 
    # - `d/M/yyyy`
    # - `dd-MM-yy`
    # - `dd-MMM-yy`
    # - `dd-MM-yyyy`
    # - `dd.MM.yyyy`
    # - `dd-MMM-yyyy`
    # - `dd MMMM yyyy`
    # - `M/d/yyyy`
    # - `MM-dd-yyyy`
    # - `MM/dd/yyyy`
    # - `MM/dd/yy`
    # - `MMM-dd-yyyy`
    # - `MMM d, yyyy`
    # - `MMMM d, yyyy`
    # - `yyyy-MM-dd`
    # - `yyyy-MMM-dd`
    # - `yyyy/MM/dd`
    # - `yyyy MMMM d`
    # 
    # **Note:** Only Admin users can change this setting
    string signDateFormat?;
    # Describes how names are displayed. Valid values:
    # 
    # - `first_middle_last`<br>William Henry Gates
    # - `full`<br>Mr William Henry Gates III
    # - `last_first`<br>Gates William
    # - `lastfirst`<br>GatesWilliam
    # - `last_first_cjk`<br>Gates William only with CJK characters
    # - `lastfirst_cjk`<br>GatesWilliam only with CJK characters
    # 
    # <!-- Web/RestApi/Models/v2_1/localePolicy.cs#L341-L366 -->
    string nameFormat?;
    # 
    string effectiveDateFormat?;
    SettingsMetadata currencyCodeMetadata?;
    # 
    string effectiveCurrencyPositiveFormat?;
    # 
    string effectiveCalendarType?;
    # 
    string effectiveCustomDateFormat?;
    # Determines how negative currency values
    # are displayed.
    # 
    # In most cases, you should not need to change
    # this value. See [Explicitly define formatting](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#explicitly-define-formatting).
    # 
    # Valid values:
    # 
    # - `Default`<br>
    #   `0`
    # - `OPar_CSym_1_Comma_234_Comma_567_Period_89_CPar`<br>
    #   `($1,234,567.89)`
    # - `Minus_CSym_1_Comma_234_Comma_567_Period_89`<br>
    #   `-$1,234,567.89`
    # - `Minus_CSym_Space_1_Period_234_Period_567_Comma_89`<br>
    #   `-$ 1.234.567,89`
    # - `CSym_Space_Minus_1_Period_234_Period_567_Comma_89`<br>
    #   `$ -1.234.567,89`
    # - `Minus_1_Period_234_Period_567_Comma_89_Space_CSym`<br>
    #   `-1.234.567,89 $`
    # - `OPar_1_Space_234_Space_567_Comma_89_Space_CSym_CPar`<br>
    #   `(1 234 567,89 $)`
    # - `Minus_1_Space_234_Space_567_Comma_89_Space_CSym`<br>
    #   `-1 234 567,89 $`
    # - `CSym_Minus_1_Quote_234_Quote_567_Period_89`<br>
    #   `$-1'234'567.89`
    # - `Minus_CSym_1_Period_234_Period_567_Comma_89`<br>
    #   `-$1.234.567,89`
    # - `Minus_CSym_1_Comma_234_Comma_567`<br>
    #   `-$1,234,567`
    # - `Minus_CSym_12_Comma_34_Comma_567_Period_89`<br>
    #   `-$12,34,567.89`
    # - `OPar_CSym_Space_1234_Comma_567_Period_89_CPar`<br>
    #   `($ 1234,567.89)`
    # - `CSym_Space_Minus_12_Comma_34_Comma_567_Period_89`<br>
    #   `$ -12,34,567.89`
    # - `CSym_Minus_12_Comma_34_Comma_567_Period_89`<br>
    #   `$-1,234,567.89`
    # - `CSym_Space_Minus_1_Space_234_Space_567_Comma_89`<br>
    #   `$ -1 234 567,89`
    # - `CSym_Space_Minus_1_Space_234_Space_567_Period_89`<br>
    #   `$ -1 234 567.89`
    # - `Minus_CSym_Space_1_Space_234_Space_567_Comma_89`<br>
    #   `-$ 1 234 567,89`
    # - `Minus_1_Space_234_Space_567_Comma_89_CSym`<br>
    #   `-1 234 567,89$`
    # - `Minus_1_Space_234_Space_567_Period_89_Space_CSym`<br>
    #   `-1 234 567.89 $`
    # - `OPar_CSym_1_Period_234_Period_567_CPar`<br>
    #   `(1.234.567)`
    # - `OPar_CSym_1_Comma_234_Comma_567_CPar`<br>
    #   `($1,234,567)`
    # - `Minus_1_Comma_234_Comma_567_Period_89_Space_CSym`<br>
    #   `-1,234,567.89 $`
    # - `Minus_CSym_Space_1_Comma_234_Comma_567_Period_89`<br>
    #   `-$ 1,234,567.89`
    # - `OPar_CSym_Space_1_Period_234_Period_567_Comma_89_CPar`<br>
    #   `($ 1.234.567,89)`
    # - `OPar_CSym_Space_1_Quote_234_Quote_567_Period_89_CPar`<br>
    #   `($ 1'234'567.89)`
    # - `OPar_CSym_Space_1_Space_234_Space_567_Comma_89_CPar`<br>
    #   `($ 1 234 567,89)`
    # - `OPar_CSym_Space_1_Space_234_Space_567_Period_89_CPar`<br>
    #   `($ 1 234 567.89)`
    # - `OPar_CSym_12_Comma_34_Comma_567_Period_89_CPar`<br>
    #   `($12,34,567.89)`
    # - `OPar_CSym_Space_12_Comma_34_Comma_567_Period_89_CPar`<br>
    #   `($ 12,34,567.89)`
    # - `OPar_1_Comma_234_Comma_567_Period_89_Space_CSym_CPar`<br>
    #   `(1,234,567.89 $)`
    # - `OPar_1_Period_234_Period_567_Comma_89_Space_CSym_CPar`<br>
    #   `(1.234.567,89 $)`
    # - `OPar_1_Space_234_Space_567_Comma_89_CSym_CPar`<br>
    #   `(1 234 567,89$)`
    # - `OPar_1_Space_234_Space_567_Period_89_Space_CSym_CPar`<br>
    #   `(1 234 567.89 $)`
    # - `OPar_CSym_Space_1_Comma_234_Comma_567_Period_89_CPar`<br>
    #   `($ 1,234,567.89)`
    # - `Minus_CSym_1_Period_234_Period_567`<br>
    #   `-$ 1.234.567`
    # - `Minus_CSym_Space_1_Quote_234_Quote_567_Period_89`<br>
    #   `-$ 1'234'567.89`
    # - `Minus_CSym_Space_1_Space_234_Space_567_Period_89`<br>
    #   `-$ 1 234 567.89`
    # - `CSym_Minus_1_Comma_234_Comma_567`<br>
    #   `$-1,234,567`
    # - `CSym_Minus_1_Period_234_Period_567`<br>
    #   `$-1.234.567`
    # - `CSym_Space_Minus_1_Quote_234_Quote_567_Period_89`<br>
    #   `$ -1'234'567.89`
    # - `CSym_Space_Minus_1_Comma_234_Comma_567_Period_89`<br>
    #   `$ -1,234,567.89`
    # - `Minus_CSym_Space_12_Comma_34_Comma_567_Period_89`<br>
    #   `-$ 12,34,567.89`
    # - `Minus_1_Period_234_Period_567_Space_CSym`<br>
    #   `-123.456.789 $`
    # - `CSym_Minus_1_Space_234_Space_567_Comma_89`<br>
    #   `$-123 456 789,00`
    # - `Minus_1_Quote_234_Quote_567_Period_89_Space_CSym`<br>
    #   `-123'456'789.00 $`
    # - `CSym_1_Comma_234_Comma_567_Period_89_Minus`<br>
    #   `$123,456,789.00-`
    # - `CSym_Minus_1_Period_234_Period_567_Comma_89`<br>
    #   `$-123.456.789,00`
    # - `OPar_CSym_1_Period_234_Period_567_Comma_89_CPar`<br>
    #   `($123.456.789,00)`
    # - `Minus_CSym_1234_Comma_567_Period_89`<br>
    #   `-$123456,789.00`
    # - `Minus_CSym_1_Space_234_Space_567_Comma_89`<br>
    #   `-$123 456 789,00`
    string currencyNegativeFormat?;
    SettingsMetadata calendarTypeMetadata?;
    # Specifies the type of calendar. Valid values:
    # 
    # - `gregorian`
    # - `japanese`
    # - `buddhist`
    string calendarType?;
    SettingsMetadata currencyNegativeFormatMetadata?;
    # 
    string effectiveInitialFormat?;
    # Specifies the address format. Valid values:
    # 
    # - `en_us`
    # - `ja_jp`
    # - `zh_cn_tw`
    string addressFormat?;
    # 
    string effectiveCustomTimeFormat?;
    # Specifies the time zone. Valid values:
    # 
    # - `TZ_01_AfghanistanStandardTime`
    # - `TZ_02_AlaskanStandardTime`
    # - `TZ_03_ArabStandardTime`
    # - `TZ_04_ArabianStandardTime`
    # - `TZ_05_ArabicStandardTime`
    # - `TZ_06_ArgentinaStandardTime`
    # - `TZ_07_AtlanticStandardTime`
    # - `TZ_08_AUS_CentralStandardTime`
    # - `TZ_09_AUS_EasternStandardTime`
    # - `TZ_10_AzerbaijanStandardTime`
    # - `TZ_11_AzoresStandardTime`
    # - `TZ_12_BangladeshStandardTime`
    # - `TZ_13_CanadaCentralStandardTime`
    # - `TZ_14_CapeVerdeStandardTime`
    # - `TZ_15_CaucasusStandardTime`
    # - `TZ_16_CentralAustraliaStandardTime`
    # - `TZ_17_CentralAmericaStandardTime`
    # - `TZ_18_CentralAsiaStandardTime`
    # - `TZ_19_CentralBrazilianStandardTime`
    # - `TZ_20_CentralEuropeStandardTime`
    # - `TZ_21_CentralEuropeanStandardTime`
    # - `TZ_22_CentralPacificStandardTime`
    # - `TZ_23_CentralStandardTime`
    # - `TZ_24_CentralStandardTimeMexico`
    # - `TZ_25_ChinaStandardTime`
    # - `TZ_26_DatelineStandardTime`
    # - `TZ_27_E_AfricaStandardTime`
    # - `TZ_28_E_AustraliaStandardTime`
    # - `TZ_29_E_EuropeStandardTime`
    # - `TZ_30_E_SouthAmericaStandardTime`
    # - `TZ_31_EasternStandardTime`
    # - `TZ_32_EgyptStandardTime`
    # - `TZ_33_EkaterinburgStandardTime`
    # - `TZ_34_FijiStandardTime`
    # - `TZ_35_FLE_StandardTime`
    # - `TZ_36_GeorgianStandardTime`
    # - `TZ_37_GMT_StandardTime`
    # - `TZ_38_GreenlandStandardTime`
    # - `TZ_39_GreenwichStandardTime`
    # - `TZ_40_GTB_StandardTime`
    # - `TZ_41_HawaiianStandardTime`
    # - `TZ_42_IndiaStandardTime`
    # - `TZ_43_IranStandardTime`
    # - `TZ_44_IsraelStandardTime`
    # - `TZ_45_JordanStandardTime`
    # - `TZ_46_KaliningradStandardTime`
    # - `TZ_47_KamchatkaStandardTime`
    # - `TZ_48_KoreaStandardTime`
    # - `TZ_49_MagadanStandardTime`
    # - `TZ_50_MauritiusStandardTime`
    # - `TZ_51_MidAtlanticStandardTime`
    # - `TZ_52_MiddleEastStandardTime`
    # - `TZ_53_MontevideoStandardTime`
    # - `TZ_54_MoroccoStandardTime`
    # - `TZ_55_MountainStandardTime`
    # - `TZ_56_MountainStandardTimeMMexico`
    # - `TZ_57_MyanmarStandardTime`
    # - `TZ_58_N_CentralAsiaStandardTime`
    # - `TZ_59_NamibiaStandardTime`
    # - `TZ_60_NepalStandardTime`
    # - `TZ_61_NewZealandStandardTime`
    # - `TZ_62_NewfoundlandStandardTime`
    # - `TZ_63_NorthAsiaEastStandardTime`
    # - `TZ_64_NorthAsiaStandardTime`
    # - `TZ_65_PacificSAStandardTime`
    # - `TZ_66_PacificStandardTime`
    # - `TZ_67_PacificStandardTimeMexico`
    # - `TZ_68_PakistanStandardTime`
    # - `TZ_69_ParaguayStandardTime`
    # - `TZ_70_RomanceStandardTime`
    # - `TZ_71_RussianStandardTime`
    # - `TZ_72_SAEasternStandardTime`
    # - `TZ_73_SAPacificStandardTime`
    # - `TZ_74_SAWesternStandardTime`
    # - `TZ_75_SamoaStandardTime`
    # - `TZ_76_SE_AsiaStandardTime`
    # - `TZ_77_SingaporeStandardTime`
    # - `TZ_78_SouthAfricaStandardTime`
    # - `TZ_79_SriLankaStandardTime`
    # - `TZ_80_SyriaStandardTime`
    # - `TZ_81_TaipeiStandardTime`
    # - `TZ_82_TasmaniaStandardTime`
    # - `TZ_83_TokyoStandardTime`
    # - `TZ_84_TongaStandardTime`
    # - `TZ_85_TurkeyStandardTime`
    # - `TZ_86_UlaanbaatarStandardTime`
    # - `TZ_87_US_EasternStandardTime`
    # - `TZ_88_USMountainStandardTime`
    # - `TZ_89_VenezuelaStandardTime`
    # - `TZ_90_VladivostokStandardTime`
    # - `TZ_91_W_AustraliaStandardTime`
    # - `TZ_92_W_CentralAfricaStandardTime`
    # - `TZ_93_W_EuropeStandardTime`
    # - `TZ_94_WestAsiaStandardTime`
    # - `TZ_95_WestPacificStandardTime`
    # - `TZ_96_YakutskStandardTime`
    string timeZone?;
    # 
    string effectiveAddressFormat?;
    # 
    string customSignDateFormat?;
    # When a user is required to enter their initials,
    # this property
    # specifies how initials are rendered.
    # The examples show the
    # initials for "William Henry Gates".
    # 
    # 
    # - `first1last1`<br> "WG"
    # - `last2`<br> "GA"
    # - `first2`<br> "WI"
    # - `last2_cjk`<br> first two characters from last name in CJK characters.
    # 
    # <!-- Components/BusinessObjects/Models/ConcealedApiRestModels/localePolicyEnums.cs -->
    string initialFormat?;
    # Determines how positive currency values
    # are displayed.
    # 
    # In most cases, you should not need to change
    # this value. See [Explicitly define formatting](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#explicitly-define-formatting).
    # 
    # Valid values:
    # 
    # 
    # - `Default`<br>
    #   Uses the current locale.
    # - `CSym_1_Comma_234_Comma_567_Period_89`<br>
    #   `$1,234,567.89`
    # - `CSym_Space_1_Period_234_Period_567_Comma_89`<br>
    #   `$ 1.234.567,89`
    # - `Leading_1_Period_234_Period_567_Comma_89_Space_CSym`<br>
    #   `1.234.567,89 $`
    # - `Leading_1_Space_234_Space_567_Comma_89_Space_CSym`<br>
    #   `1 234 567,89 $`
    # - `CSym_Space_1_Quote_234_Quote_567_Period_89`<br>
    #   `$ 1'234'567.89`
    # - `CSym_1_Comma_234_Comma_567`<br>
    #   `$1,234,567`
    # - `CSym_Space_12_Comma_34_Comma_567_Period_89`<br>
    #   `$ 12,34,567.89`
    # - `CSym_12_Comma_34_Comma_567_Period_89`<br>
    #   `$12,34,567.89`
    # - `CSym_Space_1234_Comma_567_Period_89`<br>
    #   `$ 1234,567.89`
    # - `Leading_1_Space_234_Space_567_Period_89_Space_CSym`<br>
    #   `1 234 567.89 $`
    # - `CSym_Space_1_Space_234_Space_567_Comma_89`<br>
    #   `$ 1 234 567,89`
    # - `CSym_Space_1_Space_234_Space_567_Period_89`<br>
    #   `$ 1 234 567.89`
    # - `Leading_1_Space_234_Space_567_Comma_89_CSym`<br>
    #   `1 234 567,89$`
    # - `CSym_1_Period_234_Period_567`<br>
    #   `$1.234.567`
    # - `Leading_1_Comma_234_Comma_567_Period_89_Space_CSym`<br>
    #   `1,234,567. $` (New Armenian)
    # - `CSym_Space_1_Comma_234_Comma_567_Period_89`<br>
    #   `$ 1,234,567.89` (Persian)
    # - `CSym_1_Period_234_Period_567_Comma_89`<br>
    #   `$123.456.789,00` (es-CO)
    # - `Leading_1_Quote_234_Quote_567_Period_89_Space_CSym`<br>
    #   `123'456'789.00 $` (fr-ch)
    # - `CSym_1234_Comma_567_Period_89`<br>
    #   `$123456,789.00` (es-PR)
    # - `Leading_1_Period_234_Period_567_Space_CSym`<br>
    #   `123.456.789 $`
    # - `CSym_1_Space_234_Space_567_Comma_89`<br>
    #   `$123 456 789,00` (en-ZA, es-CR)
    string currencyPositiveFormat?;
    SettingsMetadata timeFormatMetadata?;
    SettingsMetadata nameFormatMetadata?;
    # Specifies the time format. Valid values:
    # 
    # - `none`      <br>None
    # - `hh_mm`     <br>hh:mm 
    # - `hhmm`      <br>HH:mm
    # - `hhmmss`    <br>HH:mm:ss
    # - `hhmmsstt`  <br>HH:mm:ss tt
    # - `hhmmtt`    <br> HH:mm tt
    # - `hmm`       <br>h:mm
    # - `hmmss`     <br>h:mm:ss
    # - `hmmsstt`   <br>h:mm:ss tt
    # - `hmmtt`     <br>h:mm tt
    # - `custom`    <br>Customer-set format
    # 
    # <!-- Web/RestApi/Models/v2_1/localePolicy.cs#L501-L546 -->
    string timeFormat?;
    # 
    string customSignTimeFormat?;
    SettingsMetadata signTimeFormatMetadata?;
    # 
    string effectiveNameFormat?;
    # 
    string customDateFormat?;
    # The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
    string currencyCode?;
    SettingsMetadata initialFormatMetadata?;
};

# The URIs for retrieving the logos that are associated with the brand.
# 
# These are read-only properties that provide a URI to logos in use.
# To update a logo use
# [AccountBrands: updateLogo](/docs/esign-rest-api/reference/accounts/accountbrands/updatelogo/)
public type BrandLogos record {
    # The URI for the brand's secondary logo.
    # 
    # This is a read-only property that provides a URI to the logo in use.
    # To update a logo use
    # [AccountBrands: updateLogo](/docs/esign-rest-api/reference/accounts/accountbrands/updatelogo/)
    string secondary?;
    # The URI for the brand's secondary logo.
    # 
    # This is a read-only property that provides a URI to the logo in use.
    # To update a logo use
    # [AccountBrands: updateLogo](/docs/esign-rest-api/reference/accounts/accountbrands/updatelogo/)
    string email?;
    # The URI for the brand's secondary logo.
    # 
    # This is a read-only property that provides a URI to the logo in use.
    # To update a logo use
    # [AccountBrands: updateLogo](/docs/esign-rest-api/reference/accounts/accountbrands/updatelogo/)
    string primary?;
};

# 
public type AccountIdentityInputOption record {
    # 
    boolean isRequired?;
    # 
    string valueType?;
    # 
    string optionName?;
};

# A complex object specifying ID check configuration
public type IdCheckConfiguration record {
    # Boolean that specifies whether the signature is the default signature for the user
    string isDefault?;
    # A list of ID check security steps, each specifying an authorization type
    IdCheckSecurityStep[] authSteps?;
    # The name of the signature
    string name?;
};

# 
public type DowngradeBillingPlanInformation record {
    # 
    string downgradeEventType?;
    PlanInformation planInformation?;
    # Reserved for DocuSign
    string saleDiscountPeriods?;
    # 
    string promoCode?;
    # 
    string saleDiscount?;
    # 
    string saleDiscountType?;
};

# This object lets you choose the data format of your Connect response
public type ConnectEventData record {
    # Reserved for DocuSign
    string format?;
    # A string array of the data to be included.
    # The default is the empty array `[]`.
    # 
    # - `attachments`: Include attachments associated with the envelope.
    # - `custom_fields`: Include the custom fields associated with the envelope.
    # - `documents`: Include the documents associated with the envelope.
    # - `extensions`: Include information about the email settings associated with the envelope.
    # - `folders`: Include the folder where the envelope exists.
    # - `payment_tabs`: Include the payment tabs associated with the envelope.
    # - `powerform`: Include the PowerForms associated with the envelope.
    # - `prefill_tabs`: Include the [pre-filled tabs](/docs/esign-rest-api/esign101/concepts/tabs/prefilled-tabs/) associated with the envelope.
    # - `recipients`: Include the recipients associated with the envelope.
    # - `tabs`: Include the tabs associated with the envelope
    string[] includeData?;
    # Set this property to `restv2.1` to return event data in JSON. If the property is not set, the event data will be returned in XML by default
    string version?;
};

# A Commission Expiration tab displays the expiration date of a notary's commission. The tab is populated with the notary's commission information, but the recipient can also edit the value when notarizing. This tab can only be assigned to a remote notary recipient using [DocuSign Notary](/docs/notary-api/)
public type CommissionExpiration record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # 
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: Folders_GetFolders
public type FoldersGetFoldersQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # This parameter is deprecated as of version 2.1. Use `include` instead
    string template?;
    # A comma-separated list of folder types to include in the response.
    # Valid values are:
    # 
    # - `envelope_folders`: Returns a list of envelope folders. (Default)
    # - `template_folders`: Returns a list of template folders. 
    # - `shared_template_folders`: Returns a list of shared template folders
    string include?;
    # Indicates whether folder items are included in the response. If this parameter is omitted, the default is false
    @http:Query {name: "include_items"}
    string includeItems?;
    # If missing or any value other than `-1`, the returned list contains only the top-level folders.
    # A value of `-1` returns the complete folder hierarchy
    @http:Query {name: "sub_folder_depth"}
    string subFolderDepth?;
    # The maximum number of results to return
    string count?;
    # Narrows down the resulting folder list by the following values:
    # 
    # - `all`: Returns all templates owned or shared with the user. (default)
    # - `owned_by_me`: Returns only  templates the user owns.
    # - `shared_with_me`: Returns only templates that are shared with the user
    @http:Query {name: "user_filter"}
    string userFilter?;
};

# A tab that displays the recipient's last name. This tab
# takes the recipient's name as entered in the recipient
# information, splits it into sections based on spaces and
# uses the last section as the last name
public type LastName record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list, you can customize these properties for each instance
public type BulkSendingCopy record {
    # The email body for this copy of the envelope
    string emailBlurb?;
    # The custom fields for this copy of the envelope.
    # 
    # **Note:** These custom fields must also be included in the original envelope or template that you want to send
    BulkSendingCopyCustomField[] customFields?;
    # Information about the recipients associated with this copy of the envelope
    BulkSendingCopyRecipient[] recipients?;
    # 
    BulksendingCopyDocGenFormField[] docGenFormFields?;
    # The email subject line for this copy of the envelope.
    # 
    # For information about adding merge field information to the email subject,
    # see [Template Email Subject Merge Fields](/docs/esign-rest-api/reference/templates/templates/create/).
    # 
    # **Note:** The subject line is limited to 100 characters, including any merged fields.It is not truncated. It is an error if the text is longer than 100 characters
    string emailSubject?;
};

# 
public type InlineTemplate record {
    # Specifies the order in which templates are overlaid
    string sequence?;
    Envelope envelope?;
    # A complex element that contains details about the documents associated with the envelope
    Document[] documents?;
    AccountCustomFields customFields?;
    EnvelopeRecipients recipients?;
};

# Contains address input information
public type AddressInformationInput record {
    AddressInformation addressInformation?;
    # A Boolean value that specifies whether the information must be returned in the response
    string receiveInResponse?;
    # Specifies the display level for the recipient. Valid values are:
    # * `ReadOnly`
    # * `Editable`
    # * `DoNotDisplay`
    string displayLevelCode?;
};

# 
public type ConditionalRecipientRuleFilter record {
    # The unique identifier for the tab
    string tabId?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    # The scope under which the condition is evaluated. Valid values:
    # 
    # * `tabs`
    string scope?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # A set value to which the tab's actual value is compared
    string value?;
    # How the tab value is compared to the `value` property. Valid values:
    # 
    # * `equals`
    # * `greaterThan`
    # * `greaterThanEquals`
    # * `lessThan`
    # * `lessThanEquals`
    # * `filled`
    # * `selected`
    string operator?;
};

# Represents the Queries record for the operation: RecipientNames_GetRecipientNames
public type RecipientNamesGetRecipientNamesQueries record {
    # (Required) The email address for which you want to retrieve recipient names
    string email?;
};

# Represents the Queries record for the operation: AccountIdentityVerification_GetAccountIdentityVerification
public type AccountIdentityVerificationGetAccountIdentityVerificationQueries record {
    # Filters the workflows returned according to status. Valid values:
    # 
    # - `active`: Only active workflows are returned. This is the default.
    # - `deactivated`: Only deactivated workflows are returned.
    # - `all`: All workflows are returned
    @http:Query {name: "identity_verification_workflow_status"}
    string identityVerificationWorkflowStatus?;
};

# Represents the Queries record for the operation: Templates_GetEnvelopeTemplates
public type TemplatesGetEnvelopeTemplatesQueries record {
    # The possible value is `matching_applied`, which returns template matching information for the template
    string include?;
};

# Represents the Queries record for the operation: Recipients_PutTemplateRecipients
public type RecipientsPutTemplateRecipientsQueries record {
    # When **true,**
    # resends the envelope to the recipients
    # that you specify in the request body.
    # Use this parameter to resend the envelope
    # to a recipient
    # who deleted the original email notification.
    # 
    # **Note:** Correcting an envelope is a different process.
    # DocuSign always resends an envelope when you correct it,
    # regardless of the value that you enter here
    @http:Query {name: "resend_envelope"}
    string resendEnvelope?;
};

# The proof file of the recipient. [ID Evidence](/docs/idevidence-api/) uses proof files to store the identification data that recipients submit when verifying their ID with [ID Verification](/docs/esign-rest-api/esign101/concepts/documents/)
public type RecipientProofFile record {
    # Indicates whether a proof file is available for this recipient
    string isInProofFile?;
    # 
    string hasIdentityAttempts?;
};

# This object contains details about a billing plan
public type BillingPlanInformation record {
    # When **true,** customer support is provided as part of the account plan
    string enableSupport?;
    # (Optional) The user's reason for downgrading their billing plan
    string downgradeReason?;
    # 
    string enablePreAuth?;
    AppStoreReceipt appStoreReceipt?;
    # The number of seats (users) included in the plan
    string includedSeats?;
    CreditCardInformation creditCardInformation?;
    # Reserved for DocuSign
    string saleDiscountSeatPriceOverride?;
    # The renewal status of the account. Possible values are:
    # 
    # - `auto`: The account automatically renews. 
    # - `queued_for_close`: The account will be closed at the billingPeriodEndDate. 
    # - queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`
    string renewalStatus?;
    PlanInformation planInformation?;
    # Reserved for DocuSign
    string saleDiscountPeriods?;
    # 
    string paymentProcessor?;
    PaymentProcessorInformation paymentProcessorInformation?;
    # Reserved for DocuSign
    string saleDiscountFixedAmount?;
    # Reserved for DocuSign
    string incrementalSeats?;
    ReferralInformation referralInformation?;
    # 
    string taxExemptId?;
    DirectDebitProcessorInformation directDebitProcessorInformation?;
    # Reserved for DocuSign
    string saleDiscountAmount?;
    # The payment method used for the billing plan. Valid values are:
    # 
    # - `NotSupported`
    # - `CreditCard`
    # - `PurchaseOrder`
    # - `Premium`
    # - `Freemium`
    # - `FreeTrial`
    # - `AppStore`
    # - `DigitalExternal`
    # - `DirectDebit`
    string paymentMethod?;
    AccountAddress billingAddress?;
    # 
    string processPayment?;
    # Reserved for DocuSign
    string saleDiscountPercent?;
};

# 
public type AccountPasswordLockoutDurationMinutes record {
    # 
    string maximumMinutes?;
    # 
    string minimumMinutes?;
};

# 
public type NewAccountDefinition record {
    SocialAccountInformation socialAccountInformation?;
    # 
    string enablePreAuth?;
    AccountAddress addressInformation?;
    # The account name for the new account
    string accountName?;
    # The password for the `distributorCode`
    string distributorPassword?;
    CreditCardInformation creditCardInformation?;
    PlanInformation planInformation?;
    # The Distributor Code that you received from DocuSign
    string distributorCode?;
    # 
    string paymentProcessor?;
    UserInformation initialUser?;
    PaymentProcessorInformation paymentProcessorInformation?;
    ReferralInformation referralInformation?;
    # 
    string taxExemptId?;
    DirectDebitProcessorInformation directDebitProcessorInformation?;
    # The payment method used for the billing plan. Valid values are:
    # 
    # - `NotSupported`
    # - `CreditCard`
    # - `PurchaseOrder`
    # - `Premium`
    # - `Freemium`
    # - `FreeTrial`
    # - `AppStore`
    # - `DigitalExternal`
    # - `DirectDebit`
    string paymentMethod?;
    # Reserved for DocuSign
    string envelopePartitionId?;
    # 
    string processPayment?;
    AccountSettingsInformation accountSettings?;
};

# 
public type DocumentTemplate record {
    # 
    string documentEndPage?;
    # 
    string documentStartPage?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    # The unique identifier of the template. If this is not provided, DocuSign generates an error and the call fails
    string templateId?;
    ErrorDetails errorDetails?;
};

# This object provides information about the settings for the workspace
public type WorkspaceSettings record {
    # When **true,** commenting on the documents in the workspace is allowed
    string commentsAllowed?;
};

# Represents the Queries record for the operation: Documents_GetDocument
public type DocumentsGetDocumentQueries record {
    # When **true,** the account has the watermark feature enabled, and the envelope is not complete, then the watermark for the account is added to the PDF documents. This option can remove the watermark. 
    string watermark?;
    # When **true,** the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. You can decrypt the documents by using the Key Manager DecryptDocument API method. For more information about Key Manager, see the DocuSign Security Appliance Installation Guide that your organization received from DocuSign
    string encrypt?;
    # The ID of a shared user that you want to impersonate in order to
    # retrieve their view of the list of documents. This parameter is
    # used in the context of a shared inbox (i.e., when you share
    # envelopes from one user to another through the DocuSign Admin console)
    @http:Query {name: "shared_user_id"}
    string sharedUserId?;
    # Used only when the `documentId` parameter is the special keyword `combined`.
    # 
    # When **true,** the certificate of completion is included in the combined PDF file.
    # When **false,** (the default) the certificate of completion is not included in the combined PDF file.
    string certificate?;
    # When **true,** any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red. The account must have the **Highlight Data Changes** feature enabled
    @http:Query {name: "show_changes"}
    string showChanges?;
    # Specifies the language for the Certificate of Completion in the response. The supported languages are: Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es). 
    string language?;
    # When **true,** allows recipients to get documents by their user id. For example, if a user is included in two different routing orders with different visibilities, using this parameter returns all of the documents from both routing orders
    @http:Query {name: "documents_by_userid"}
    string documentsByUserid?;
    # Reserved for DocuSign
    string encoding?;
    # Allows the sender to retrieve the documents as one of the recipients that they control. The `documents_by_userid` parameter must be set to **false** for this functionality to work
    @http:Query {name: "recipient_id"}
    string recipientId?;
};

# 
public type AccountPasswordMinimumPasswordAgeDays record {
    # 
    string minimumAge?;
    # 
    string maximumAge?;
};

# A complex element that contains input information related to a recipient ID check
public type IdCheckInformationInput record {
    Ssn9InformationInput ssn9InformationInput?;
    AddressInformationInput addressInformationInput?;
    DobInformationInput dobInformationInput?;
    Ssn4InformationInput ssn4InformationInput?;
};

# A user-specified object that describes the envelope delay.
# 
# To indicate a relative delay, use `delay`. To indicate the exact datetime the envelope should be sent, use `resumeDate`. Only one of the two properties can be used
public type EnvelopeDelayRule record {
    # A string timespan representing the duration of the sending delay. The timespan is in the format `d.hh:mm:ss` where `d` is the number of days, `hh` is the number of hours (measured on a 24-hour clock), `mm` is minutes, and `ss` is seconds. The maximum delay is 30 days
    string delay?;
    # An ISO 8601 formatted datetime string indicating the date and time that the envelope will be sent. The specified datetime must occur in the future. It must not exceed 30 days from the time that the request is made
    string resumeDate?;
};

# Represents the Queries record for the operation: Documents_GetDocuments
public type DocumentsGetDocumentsQueries record {
    # The ID of a shared user that you want to impersonate in order to
    # retrieve their view of the list of documents. This parameter is
    # used in the context of a shared inbox (i.e., when you share
    # envelopes from one user to another through the DocuSign Admin console)
    @http:Query {name: "shared_user_id"}
    string sharedUserId?;
    # When **true,** allows recipients to get documents by their user id. For example, if a user is included in two different routing orders with different visibilities, using this parameter returns all of the documents from both routing orders
    @http:Query {name: "documents_by_userid"}
    string documentsByUserid?;
    # Reserved for DocuSign
    @http:Query {name: "include_docgen_formfields"}
    string includeDocgenFormfields?;
    # When **true,** the response includes metadata that indicates which properties the sender can edit
    @http:Query {name: "include_metadata"}
    string includeMetadata?;
    # When **true,** information about the tabs, including prefill tabs, associated with the documents are included in the response
    @http:Query {name: "include_tabs"}
    string includeTabs?;
    # Allows the sender to retrieve the documents as one of the recipients that they control. The `documents_by_userid` parameter must be set to **false** for this to work
    @http:Query {name: "recipient_id"}
    string recipientId?;
};

# Represents the Queries record for the operation: WorkspaceFile_GetWorkspaceFile
public type WorkspaceFileGetWorkspaceFileQueries record {
    # When **true,** the `Content-Disposition` header is set in the response. The value of the header provides the filename of the file. The default is **false.**
    @http:Query {name: "is_download"}
    string isDownload?;
    # When **true** the file is returned in PDF format
    @http:Query {name: "pdf_version"}
    string pdfVersion?;
};

# Specifies an Identity Verification workflow
public type AccountIdentityVerificationWorkflow record {
    # 
    string ownerType?;
    # Reserved for DocuSign
    string workflowResourceKey?;
    # 
    AccountIdentityInputOption[] inputOptions?;
    # 
    string workflowLabel?;
    AccountSignatureProvider signatureProvider?;
    # When **true,** the workflow is disabled
    string isDisabled?;
    # The name of the Identity Verification workflow
    string defaultName?;
    # Workflow unique ID</br>This is the ID you must specify when setting ID Verification in an envelope using the `identityVerification`
    # [core recipient parameter](/docs/esign-rest-api/reference/envelopes/enveloperecipients/#core-recipient-parameters)
    string workflowId?;
    # Text describing the purpose of the Identity Verification workflow
    string defaultDescription?;
};

# A tab that displays the recipient's title
public type Title record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: Connect_GetConnectAllUsers
public type ConnectGetConnectAllUsersQueries record {
    # The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image
    @http:Query {name: "start_position"}
    string startPosition?;
    # Filters returned user records by full email address or a substring of email address
    @http:Query {name: "email_substring"}
    string emailSubstring?;
    @http:Query {name: "domain_users_only"}
    string domainUsersOnly?;
    # The maximum number of results to return
    string count?;
    # Filters results based on a full or partial user name.
    # 
    # **Note:** When you enter a partial user name, you do not use a wildcard character
    @http:Query {name: "user_name_substring"}
    string userNameSubstring?;
    # The status of the item
    string status?;
};

# This object represents a list custom field from which envelope creators and senders can select custom data
public type ListCustomField record {
    # An array of strings that represents the options in a list.
    # 
    # Maximum length: 2048 characters, but each individual option string can only be a maximum of 100 characters
    string[] listItems?;
    # The name of the custom field
    string name?;
    # When **true,** the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope
    string show?;
    # If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`
    string configurationType?;
    # The value of the custom field. This is the value that the user who creates or sends the envelope selects from the list
    string value?;
    # When **true,** senders are required to select an option from the list before they can send the envelope
    string required?;
    ErrorDetails errorDetails?;
    # The ID of the custom field
    string fieldId?;
};

# This tab is used with the Approve tab to handle supplemental documents
public type View record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the recipient must click the **View** button for the supporting document prior to completing the signing process
    string required?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    # The text to display on the button
    string buttonText?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata buttonTextMetadata?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # When **true,** the recipient must read through the document
    string requiredRead?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# Information for a folder request
public type FoldersRequest record {
    # Not used
    Folder[] folders?;
    # An array of envelope ID GUIDs
    string[] envelopeIds?;
    #  The ID of the folder that the envelope is being moved from
    string fromFolderId?;
};

# Use this object to create a filtered view of the items in a folder
public type Filter record {
    # The number of days a sent envelope remains active before it expires
    string expires?;
    # A free text search field for searching across the items in a folder. The search looks for the text that you enter in the recipient names and emails, envelope custom fields, sender name, and subject
    string searchText?;
    # The UTC DateTime of the beginning of a date range. If no value is provided, the default search is the previous 30 days
    string fromDateTime?;
    # When **true,** the item is a template
    string isTemplate?;
    # When **true,** the current user needs to take action on the item
    string actionRequired?;
    # The field used to sort the results.
    # 
    # Example: `Created`
    string orderBy?;
    # Filters for any combination of folder IDs and folder types. The possible folder types are:
    # 
    # - `awaiting_my_signature`
    # - `completed`
    # - `draft`
    # - `drafts`
    # - `expiring_soon`
    # - `inbox`
    # - `out_for_signature`
    # - `recyclebin`
    # - `sentitems`
    # - `waiting_for_others`
    string folderIds?;
    # Reserved for DocuSign
    string searchTarget?;
    # The UTC DateTime of the end of a date range. If no value is provided, the default search is to the current date
    string toDateTime?;
    # The order in which to sort the results.
    # 
    # Valid values are: 
    # 
    # 
    # * `asc`: Ascending order.
    # * `desc`: Descending order. 
    string 'order?;
    # The status of the envelope. By default, all statuses are returned.
    # 
    # For details, see [Envelope Status Code Descriptions](/docs/esign-rest-api/esign101/rules-and-limits/responses/)
    string status?;
};

# A tab that displays the recipient's full name
public type FullName record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients
public type Editor record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    PropertyMetadata requireIdLookupMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The recipient's first name. 
    # 
    # Maximum Length: 50 characters
    string firstName?;
    RecipientPhoneNumber phoneNumber?;
    # The full legal name of the recipient. Maximum Length: 100 characters.
    # 
    # **Note:** You must always set a value for this property in requests, even if `firstName` and `lastName` are set
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    PropertyMetadata routingOrderMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # The recipient's status. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only
    string statusCode?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The recipient's last name
    string lastName?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    RecipientSMSAuthentication smsAuthentication?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The recipient's email address. Notification of the document to sign is sent to this email address. 
    # 
    # Maximum length: 100 characters. 
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    PropertyMetadata firstNameMetadata?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # 
    string emailRecipientPostSigningURL?;
};

# Represents the Queries record for the operation: Pages_GetPageImage
public type PagesGetPageImageQueries record {
    # Sets the maximum width for the page image in pixels. The DPI is recalculated based on this setting
    @http:Query {name: "max_width"}
    string maxWidth?;
    # When **true,** changes display in the user interface
    @http:Query {name: "show_changes"}
    string showChanges?;
    # Sets the maximum height for the page image in pixels. The DPI is recalculated based on this setting
    @http:Query {name: "max_height"}
    string maxHeight?;
    # Sets the dots per inch (DPI) for the returned image
    string dpi?;
};

# 
public type Watermark record {
    # The Base64 representation of the watermark image.
    # 
    # This property is read-only
    string imageBase64?;
    # The transparency percentage of the watermark image. Valid values:
    # 
    # * `5`
    # * `10`
    # * `15`
    # * `20`
    # * `25`
    # * `30`
    # * `35`
    # * `40`
    # * `45`
    string transparency?;
    # The watermark's font size. Valid values:
    # 
    # * `30`
    # * `40`
    # * `50`
    # * `60`
    # * `70`
    # * `80`
    # * `90`
    string fontSize?;
    # The ID of the watermark
    string id?;
    # The display angle of the watermark. Valid values:
    # 
    # * 0 (horizontal)
    # * 45 (diagonal)
    # * 90 (vertical)
    string displayAngle?;
    # The text for the watermark
    string watermarkText?;
    # When **true,** the watermark will be applied to documents that are still in progress. When **false,** the watermark will not be applied
    string enabled?;
    # The watermark's font color. Valid values:
    # 
    # * `black`
    # * `blue`
    # * `red`
    # * `gray`
    # * `yellow`
    string fontColor?;
    # The watermark's font. Valid values:
    # 
    # - `courier`
    # - `helvetica`
    # - `timesnewroman`
    string font?;
};

# 
public type BillingPaymentRequest record {
    # The payment amount for the past due invoices. This value must match the pastDueBalance value retrieved using Get Past Due Invoices
    string paymentAmount?;
};

# An object used to identify the features and attributes of the account being created
public type PlanInformation record {
    # 
    RecipientDomain[] recipientDomains?;
    # Reserved for DocuSign
    FeatureSet[] planFeatureSets?;
    # Reserved for DocuSign
    AddOn[] addOns?;
    # Reserved for DocuSign
    string freeTrialDaysOverride?;
    # DocuSign's ID for the account plan
    string planId?;
    # Specifies the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the account
    string currencyCode?;
};

# A tab that allows the recipient to enter a ZIP code. The ZIP
# code can be five digits or nine digits in the ZIP+4 format.
# The zip code can be typed with or without dashes. It uses
# the same parameters as a Text tab, with the validation
# message and pattern set for ZIP code information
public type Zip record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** ZIP+4 format is used
    string useDash4?;
    # A regular expression used to validate input for the tab
    string validationPattern?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    PropertyMetadata useDash4Metadata?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata validationPatternMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata validationMessageMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails)
public type BccEmailArchive record {
    # The ID of the account that owns the BCC email archive configuration
    string accountId?;
    UserInfo createdBy?;
    # The UTC DateTime when the BCC email archive configuration was created
    string created?;
    # The GUID of the activation email message sent to the BCC email address
    string emailNotificationId?;
    # The UTC DateTime when the BCC email archive configuration was last modified
    string modified?;
    # The ID of the BCC email archive configuration
    string bccEmailArchiveId?;
    UserInfo modifiedBy?;
    # The helper URI for retrieving the BCC email archive
    string uri?;
    # The BCC email address to use for archiving DocuSign messages.
    # 
    # Example: customer_bcc@example.com
    string email?;
    # The status of the BCC email address. Possible values are:
    # 
    # - `activation_sent`: An activation link has been sent to the BCC email address.
    # - `active`: The BCC email address is actively used for archiving.
    # - `closed`: The BCC email address is no longer used for archiving
    string status?;
};

# A collection of document generation fields
public type DocGenFormFields record {
    # The status of the document. This is a read-only property.
    # Valid values:
    # 
    # - `mergesuceeded`
    # - `created`
    # - `hassyntaxerror`
    string docGenDocumentStatus?;
    # The GUID of the document
    string documentId?;
    # A list of `docGenSyntaxError` objects
    DocGenSyntaxError[] docGenErrors?;
    # A list of `docGenFormField` objects
    DocGenFormField[] docGenFormFieldList?;
};

# 
public type RecipientEvent record {
    # Send a webhook notification for the following recipient statuses: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded
    string recipientEventStatusCode?;
    # When **true,**
    # the Connect webhook messages
    # will include the envelope's PDF documents.
    # Including the PDF documents
    # greatly increases the size of the notification messages.
    # Ensure that your listener can handle
    # incoming messages that are 25MB or larger
    string includeDocuments?;
};

# 
public type SigningGroupUser record {
    # The name of the group member. 
    # 
    # Maximum Length: 100 characters. 
    string userName?;
    # 
    string email?;
    ErrorDetails errorDetails?;
};

# Lists of envelope and transaction IDs to use in the results.
# 
# If you use this request body with Envelopes: listStatus,
# you must set one or both of the following query parameters
# to the special value `request_body`:
# 
# - `envelope_ids=request_body`
# - `transaction_ids=request_body`
public type EnvelopeIdsRequest record {
    # A comma-separated list of transaction IDs to include in the results. Note that transaction IDs are valid for seven days
    string[] transactionIds?;
    # A comma-separated list of envelope IDs to include in the results
    string[] envelopeIds?;
};

# Information about shared templates
public type TemplateSharedItem record {
    UserInfo owner?;
    # List of users that share the template
    UserSharedItem[] sharedUsers?;
    # How the template is shared. One of:
    # 
    # - `not_shared`
    # - `shared_to`
    string shared?;
    # The user's encrypted password hash
    string password?;
    # List of groups that share the template
    MemberGroupSharedItem[] sharedGroups?;
    # The name of the shared template
    string templateName?;
    # The unique identifier of the template. If this is not provided, DocuSign will generate a value. 
    string templateId?;
    ErrorDetails errorDetails?;
};

# Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.
# 
# This property contains the following information about the central rectangle:
# 
# - `DateAreaX`: The X axis position of the top-left corner.
# - `DateAreaY`: The Y axis position of the top-left corner.
# - `DateAreaWidth`: The width of the rectangle.
# - `DateAreaHeight`: The height of the rectangle
public type DateStampProperties record {
    # The height of the rectangle
    string dateAreaHeight?;
    # The Y axis position of the top-left corner
    string dateAreaY?;
    # The width of the rectangle
    string dateAreaWidth?;
    # The X axis position of the top-left corner
    string dateAreaX?;
};

# A complex element that specifies reminder settings for the envelope
public type Reminders record {
    # When **true,** reminders are enabled. The default value is **false.**
    string reminderEnabled?;
    # An integer specifying the interval in days between reminder emails. The default value is 0
    string reminderFrequency?;
    # An integer specifying the number of days after the recipient receives the envelope that reminder emails are sent to the recipient. The default value is 0
    string reminderDelay?;
};

# Represents the Queries record for the operation: Envelopes_GetEnvelope
public type EnvelopesGetEnvelopeQueries record {
    # Specifies additional information about the envelope to return. Enter a comma-separated list, such as `tabs,recipients`. Valid values are:
    # 
    # - `custom_fields`: The custom fields associated with the envelope.
    # - `documents`: The documents associated with the envelope.
    # - `attachments`: The attachments associated with the envelope.
    # - `extensions`: The email settings associated with the envelope.
    # - `folders`: The folder where the envelope exists.
    # - `recipients`: The recipients associated with the envelope.
    # - `powerform`: The PowerForms associated with the envelope.
    # - `tabs`: The tabs associated with the envelope.
    # - `payment_tabs`: The payment tabs associated with the envelope.
    # - `workflow`: The workflow definition associated with the envelope
    string include?;
    # When **true,** envelope information can be added or modified
    @http:Query {name: "advanced_update"}
    string advancedUpdate?;
};

# 
public type FavoriteTemplatesInfo record {
    # The number of templates successfully updated by the call. This property is read-only
    int:Signed32 templatesUpdatedCount?;
    ErrorDetails errorDetails?;
    # The favorite templates acted upon by the call
    FavoriteTemplatesContentItem[] favoriteTemplates?;
};

# Represents the Queries record for the operation: CloudStorage_GetCloudStorageProviders
public type CloudStorageGetCloudStorageProvidersQueries record {
    #  The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
    # 
    # The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
    #  
    string redirectUrl?;
};

# 
public type SealIdentifier record {
    # The name of a seal
    string sealName?;
    # The user-friendly display name for a seal
    string sealDisplayName?;
};

# Metadata about a property
public type PropertyMetadata record {
    # Indicates whether the property is editable. Valid values are:
    # 
    # - `editable`
    # - `read_only`
    string rights?;
    # An array of option strings supported by this setting
    string[] options?;
};

# This request object contains information about the lock that you want to create or update
public type LockRequest record {
    # When **true,** a scratchpad is used to edit information.
    #  
    string useScratchPad?;
    # The [password for the template](https://support.docusign.com/s/document-item?bundleId=xry1643227563338&topicId=xwo1578456395432.html). If you are using a lock for a template that has a password or an envelope that is based on a template that has a password, you must enter the `templatePassword` to save the changes
    string templatePassword?;
    # The type of lock.  Currently `edit` is the only supported type
    string lockType?;
    # The number of seconds to lock the envelope for editing.  Must be greater than 0 seconds
    string lockDurationInSeconds?;
    # A friendly name of the application used to lock the envelope.  Will be used in error messages to the user when lock conflicts occur
    string lockedByApp?;
};

# Represents the Queries record for the operation: BCCEmailArchive_GetBCCEmailArchiveList
public type BCCEmailArchiveGetBCCEmailArchiveListQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip
    string count?;
};

# 
public type BulkSendBatchActionRequest record {
    Notification notification?;
    # A string explaining why the envelope is voided. This value is shown in a message to the recipients.
    # 
    # This property is required if `action` is `Void`
    string voidReason?;
    # The action to apply. Valid values:
    # 
    # * `Resend`
    # * `Correct`
    # * `Void`
    # 
    # This property is required and case-sensitive. The value must correspond to the `bulkAction` query parameter
    string action?;
};

# Represents the Queries record for the operation: Envelopes_GetEnvelopes
public type EnvelopesGetEnvelopesQueries record {
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    @http:Query {name: "search_mode"}
    string searchMode?;
    # Limit results to envelopes
    # sent by the account user
    # with this user name.
    # 
    # `email` must be given as well,
    # and both `email` and `user_name`
    # must refer to an existing account user
    @http:Query {name: "user_name"}
    string userName?;
    # The time in seconds that the query should run before returning data
    @http:Query {name: "query_budget"}
    string queryBudget?;
    @http:Query {name: "requester_date_format"}
    string requesterDateFormat?;
    # Returns the envelopes from specific folders. Enter as a comma-separated list of either valid folder Guids or the following values: 
    # 
    # - `awaiting_my_signature`
    # - `completed`
    # - `draft`
    # - `drafts`
    # - `expiring_soon`
    # - `inbox`
    # - `out_for_signature`
    # - `recyclebin`
    # - `sentitems`
    # - `waiting_for_others`
    @http:Query {name: "folder_ids"}
    string folderIds?;
    # Reserved for DocuSign
    @http:Query {name: "cdse_mode"}
    string cdseMode?;
    # Reserved for DocuSign
    @http:Query {name: "continuation_token"}
    string continuationToken?;
    # Specifies the date and time
    # to stop looking for status changes.
    # The default is the current date and time.
    # 
    # Although you can use any date format
    # supported by the .NET system library's
    # [`DateTime.Parse()`][msoft] function,
    # DocuSign recommends
    # using [ISO 8601][] format dates
    # with an explicit time zone offset
    # If you do not provide
    # a time zone offset,
    # the method uses the server's time zone.
    # 
    # For example, the following dates and times refer to the same instant:
    # 
    # * `2017-05-02T01:44Z`
    # * `2017-05-01T21:44-04:00`
    # * `2017-05-01T18:44-07:00`
    # 
    # 
    # [msoft]: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.parse?redirectedfrom=MSDN&view=net-5.0#overloads
    # [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601
    @http:Query {name: "to_date"}
    string toDate?;
    # A comma-separated list of folder types you want to retrieve envelopes from. Valid values are: 
    # 
    # - `normal`
    # - `inbox`
    # - `sentitems`
    # - `draft`
    # - `templates`
    @http:Query {name: "folder_types"}
    string folderTypes?;
    # Reserved for DocuSign
    string block?;
    # Excludes information from the response. Enter  as a comma-separated list (e.g., `folders,powerforms`). Valid values are:
    # 
    # - `recipients`
    # - `powerforms`
    # - `folders`
    string exclude?;
    # If included in the query string, this is a comma separated list of envelope `transactionId`s. 
    # 
    # If included in the `request_body`, this is a list of envelope `transactionId`s. 
    # 
    # ###### Note: `transactionId`s are only valid in the DocuSign system for seven days
    @http:Query {name: "transaction_ids"}
    string transactionIds?;
    # Limit results to envelopes
    # sent by the account user
    # with this email address.
    # 
    # `user_name` must be given as well,
    # and both `email` and `user_name`
    # must refer to an existing account user
    string email?;
    # Returns envelopes that were modified prior to the specified date and time. 
    # 
    # Example: `2020-05-09T21:56:12.2500000Z`
    @http:Query {name: "last_queried_date"}
    string lastQueriedDate?;
    # Returns envelopes in either ascending (`asc`) or descending (`desc`) order
    string 'order?;
    # This is the status type checked for in the `from_date`/`to_date` period. If `changed` is specified, then envelopes that changed status during the period are found. If for example, `created` is specified, then envelopes created during the period are found. Default is `changed`. 
    # 
    # Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing
    @http:Query {name: "from_to_status"}
    string fromToStatus?;
    # Optional. Specifies an envelope custom field name and value searched for in the envelopes. Format: `custom_envelope_field_name=desired_value`
    # 
    # Example: If you have an envelope custom field named "Region" and you want to search for all envelopes where the value is "West" you would use set this parameter to `Region=West`. 
    #  
    @http:Query {name: "custom_field"}
    string customField?;
    # Specifies additional information to return  about the envelopes.
    # Use a comma-separated list, such as `folders, recipients` to specify information.
    # Valid values are:
    # 
    # - `custom_fields`: The custom fields associated with the envelope.
    # - `documents`: The documents associated with the envelope.
    # - `attachments`: The attachments associated with the envelope.
    # - `extensions`: Information about the email settings associated with the envelope.
    # - `folders`: The folders where the envelope exists.
    # - `recipients`: The recipients associated with the envelope.
    # - `payment_tabs`: The payment tabs associated with the envelope
    string include?;
    # Specifies the date and time
    # to start looking for status changes.
    # This parameter is required
    # unless `envelopeIds` or `transactionIds`
    # are set.
    # 
    # 
    # Although you can use any date format
    # supported by the .NET system library's
    # [`DateTime.Parse()`][msoft] function,
    # DocuSign recommends
    # using [ISO 8601][] format dates
    # with an explicit time zone offset
    # If you do not provide
    # a time zone offset,
    # the method uses the server's time zone.
    # 
    # For example, the following dates and times refer to the same instant:
    # 
    # * `2017-05-02T01:44Z`
    # * `2017-05-01T21:44-04:00`
    # * `2017-05-01T18:44-07:00`
    # 
    # 
    # [msoft]: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.parse?redirectedfrom=MSDN&view=net-5.0#overloads
    # [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601
    @http:Query {name: "from_date"}
    string fromDate?;
    # A comma-separated list of `PowerFormId` values
    string powerformids?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip
    string count?;
    # Comma separated list of `envelopeId` values
    @http:Query {name: "envelope_ids"}
    string envelopeIds?;
    # Returns envelopes where the current user is the recipient, the sender, or the recipient only. (For example, `user_filter=sender`.) Valid values are:
    # 
    # - `sender`
    # - `recipient`
    # - `recipient_only`
    @http:Query {name: "user_filter"}
    string userFilter?;
    # Specifies the Authoritative Copy Status for the envelopes. Valid values: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed
    @http:Query {name: "ac_status"}
    string acStatus?;
    # When **true,** information about envelopes that have been deleted is included in the response
    @http:Query {name: "include_purge_information"}
    string includePurgeInformation?;
    # The ID of the user who created the envelopes to be retrieved. Note that an account can have multiple users, and any user with account access can retrieve envelopes by user_id from the account
    @http:Query {name: "user_id"}
    string userId?;
    # Sorts results according to a specific property. Valid values are:
    # 
    # - `last_modified`
    # - `action_required`
    # - `created`
    # - `completed`
    # - `envelope_name`
    # - `expire`
    # - `sent`
    # - `signer_list`
    # - `status`
    # - `subject`
    # - `user_name`
    # - `status_changed`
    # - `last_modified`
    @http:Query {name: "order_by"}
    string orderBy?;
    # A comma-separated list of folders that you want want to get envelopes from. Valid values are: 
    # 
    # - `normal`
    # - `inbox`
    # - `sentitems`
    # - `draft`
    # - `templates`
    @http:Query {name: "intersecting_folder_ids"}
    string intersectingFolderIds?;
    # Free text search criteria that you can use to filter the list of envelopes that is returned
    @http:Query {name: "search_text"}
    string searchText?;
    # A comma-separated list of current envelope statuses to included in the response. Possible values are:
    # 
    # * `completed`
    # * `created`
    # * `declined`
    # * `deleted`
    # * `delivered`
    # * `processing`
    # * `sent`
    # * `signed`
    # * `timedout`
    # * `voided`
    # 
    # The `any` value is equivalent to any status
    string status?;
};

# Represents the Queries record for the operation: ConnectLog_GetConnectLogs
public type ConnectLogGetConnectLogsQueries record {
    # The start date for a date range in UTC DateTime format.
    # 
    # **Note:** If this property is null, no date filtering is applied
    @http:Query {name: "from_date"}
    string fromDate?;
    # The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.
    # 
    # **Note:** If this property is null, the value defaults to the current date
    @http:Query {name: "to_date"}
    string toDate?;
};

# Represents the Queries record for the operation: Tabs_GetTabDefinitions
public type TabsGetTabDefinitionsQueries record {
    # When **true,** only custom tabs are returned in the response. 
    @http:Query {name: "custom_tab_only"}
    string customTabOnly?;
};

# 
public type PathExtendedElement record {
    # 
    string name?;
    # 
    string typeName?;
    # The type of this tab. Values are:
    # 
    # - `Approve`
    # - `CheckBox`
    # - `Company`
    # - `Date`
    # - `DateSigned`
    # - `Decline`
    # - `Email`
    # - `EmailAddress`
    # - `EnvelopeId`
    # - `FirstName`
    # - `Formula`
    # - `FullName`
    # - `InitialHere`
    # - `InitialHereOptional`
    # - `LastName`
    # - `List`
    # - `Note`
    # - `Number`
    # - `Radio`
    # - `SignerAttachment`
    # - `SignHere`
    # - `SignHereOptional`
    # - `Ssn`
    # - `Text`
    # - `Title`
    # - `Zip5`
    # - `Zip5Dash4`
    string 'type?;
};

# Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`). 
public type EnvelopePurgeConfiguration record {
    # When **true,** the system also redacts personally identifiable information (PII).
    # 
    # **Note:** To redact PII, you must also set the property `removeTabsAndEnvelopeAttachments` to **true.**
    string redactPII?;
    # When **true,** the system also purges the tabs and attachments associated with the envelopes. 
    string removeTabsAndEnvelopeAttachments?;
    # The number of days to retain envelope documents before purging them. This value must be a number between `0` and `999`
    string retentionDays?;
    # When **true,** purging is enabled
    string purgeEnvelopes?;
};

# Complex type containing:
# 
# * dateOfBirth
# * displayLevelCode
# * receiveInResponse
public type DobInformationInput record {
    # A Boolean value that specifies whether the information must be returned in the response
    string receiveInResponse?;
    # Specifies the recipient's date, month, and year of birth
    string dateOfBirth?;
    # Specifies the display level for the recipient. Valid values are:
    # * `ReadOnly`
    # * `Editable`
    # * `DoNotDisplay`
    string displayLevelCode?;
};

# Contains a list of account users
public type UserInformationList record {
    # The last index position in the result set. 
    string endPosition?;
    # The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`
    string totalSetSize?;
    # The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`
    string resultSetSize?;
    # The starting index position of the current result set
    string startPosition?;
    # The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. 
    string nextUri?;
    # The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. 
    string previousUri?;
    # User management information
    UserInformation[] users?;
};

# A complex type that contains the elements:
# 
# * `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
# * `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
# * `recordVoicePrint`: Reserved for DocuSign.
# * `validateRecipProvidedNumber`: Reserved for DocuSign
public type RecipientPhoneAuthentication record {
    # Reserved for DocuSign
    string recordVoicePrint?;
    # An array containing a list of phone numbers that the recipient can use for SMS text authentication. 
    string[] senderProvidedNumbers?;
    PropertyMetadata validateRecipProvidedNumberMetadata?;
    PropertyMetadata senderProvidedNumbersMetadata?;
    #  Reserved for DocuSign
    string validateRecipProvidedNumber?;
    # Boolean. When **true,** the recipient can supply a phone number their choice
    string recipMayProvideNumber?;
    PropertyMetadata recordVoicePrintMetadata?;
    PropertyMetadata recipMayProvideNumberMetadata?;
};

# 
public type EnvelopeTransferRuleInformation record {
    # The last index position in the result set. 
    string endPosition?;
    # The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`
    string totalSetSize?;
    # Contains information about a specific envelope transfer rule
    EnvelopeTransferRule[] envelopeTransferRules?;
    # The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`
    string resultSetSize?;
    # The starting index position of the current result set
    string startPosition?;
    # The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. 
    string nextUri?;
    # The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. 
    string previousUri?;
};

# 
public type Country record {
    # 
    Province[] provinces?;
    # 
    string provinceValidated?;
    # 
    string isoCode?;
    # 
    string name?;
};

# 
public type NotificationDefaults1 record {
    NotificationDefaultSettings emailNotifications?;
    NotificationDefaultSettings apiEmailNotifications?;
};

# 
public type AccountPasswordExpirePasswordDays record {
    # 
    string minimumDays?;
    # 
    string maximumDays?;
};

# 
public type DelegationInfo record {
    # 
    @jsondata:Name {value: "Email"}
    string email?;
    # 
    @jsondata:Name {value: "UserAuthorizationId"}
    string userAuthorizationId?;
    # 
    @jsondata:Name {value: "UserId"}
    string userId?;
    # 
    @jsondata:Name {value: "Name"}
    string name?;
};

# Describes a group of recipients
public type RecipientGroup record {
    # The name of the group
    string groupName?;
    # An array of recipient objects that provides details about the recipients of the envelope
    RecipientOption[] recipients?;
    # The group message, typically a description of the group
    string groupMessage?;
};

# 
public type RecipientIdentityInputOption record {
    # 
    RecipientIdentityPhoneNumber[] phoneNumberList?;
    # 
    string valueType?;
    # 
    string name?;
};

# 
public type PolyLine record {
    # 
    string y1?;
    # 
    string x1?;
    # 
    string y2?;
    # 
    string x2?;
};

# This object defines how to display the HTML
# between the `startAnchor` and `endAnchor`
public type DocumentHtmlDisplaySettings record {
    # The label to add to this display section in the signing page
    string displayLabel?;
    # Enables you to add descriptive text that appears before a collapsed section or continue button
    string preLabel?;
    # The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value of the `display` property is `collapsed`
    string labelWhenOpened?;
    # Sets the display and behavior properties. Possible  values are:
    # 
    # - `inline`:
    #   Leaves the HTML where it is in the document.
    #   This property lets you add a label or present on a separate page.
    # 
    # - `collapsible`:
    #   The HTML in this section may be expanded or collapsed.
    #   Initially this section is expanded.
    # 
    # - `collapsed`:
    #   The HTML in this section may be expanded or collapsed.
    #   Initially this section is collapsed.
    # 
    # - `continue_button`:
    #   Creates a stop point in the document to draw the reader's
    #   attention before proceeding to the next section.
    # 
    # - `responsive_table`:
    #   Turns this section into a responsive table.
    #   Note that this is only used on HTML tables that fall within the anchor start and end positions.
    # 
    # - `responsive_table_single_column`:
    #   Turns this section into a responsive single-column table.
    #   Note this is only used on HTML tables that fall within the anchor start and end positions.
    #   The table will be converted to one single column where each current column will become a row, then stacked.
    # 
    # - `print_only`:
    #   Do not show this portion of the HTML in the responsive signing view.
    string display?;
    # Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`
    string inlineOuterStyle?;
    # The position on the page where the display section appears
    int:Signed32 displayOrder?;
    # Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is `responsive_table` or `responsive_table_single_column`
    string tableStyle?;
    # When **true** and the section is expanded,
    # the position of the section-close control
    # scrolls to the top of the screen. This property is only valid when the value of the `display` property is `collapsed`
    boolean scrollToTopWhenOpened?;
    DocumentHtmlCollapsibleDisplaySettings collapsibleSettings?;
    # Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types
    string cellStyle?;
    # The number of the page on which the display section appears
    int:Signed32 displayPageNumber?;
    # When **true,** the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible. This property is valid only when the value of the `display` property is `collapsed`
    boolean hideLabelWhenOpened?;
};

# 
public type ServerTemplate record {
    # Specifies the order in which templates are overlaid
    string sequence?;
    # The unique identifier of the template. If this is not provided, DocuSign will generate a value. 
    string templateId?;
};

# 
public type SignatureGroupDef record {
    # The ID of the group being accessed
    string groupId?;
    # Indicates whether the property is editable. Valid values are:
    # 
    # - `editable`
    # - `read_only`
    string rights?;
};

# Represents the Queries record for the operation: Accounts_GetAccount
public type AccountsGetAccountQueries record {
    # When **true,** includes account settings in the response. The default value is **false.**
    @http:Query {name: "include_account_settings"}
    string includeAccountSettings?;
};

# 
public type AccountPasswordRules1 record {
    # The minimum number of characters in the password. This value must be a number between `6` and `15`. The default value is `6`
    string minimumPasswordLength?;
    AccountMinimumPasswordLength minimumPasswordLengthMetadata?;
    AccountPasswordQuestionsRequired questionsRequiredMetadata?;
    # When **true,** passwords must include either a digit or a special character. The default value is `false`.
    # 
    # **Note:** Passwords cannot include angle brackets (`<` `>`) or spaces
    string passwordIncludeDigitOrSpecialCharacter?;
    # The interval associated with the user lockout after a failed login attempt.
    # 
    # Possible values are:
    # 
    # - `minutes` (default)
    # - `hours`
    # - `days`
    string lockoutDurationType?;
    # The type of password strength. Possible values are:
    # 
    # - `basic`: The minimum password length is 6 characters with no other password requirements.
    # - `medium`: The minimum password length is 7 characters. Passwords must also have one uppercase letter, one lowercase letter, and one number or special character.
    # - `strong`: The minimum password length is 9 characters. Passwords must also have one uppercase letter, one lowercase letter, one number, and one special character.
    # - `custom`: This option enables you to customize password requirements, including the following properties:
    # 
    #    - `minimumPasswordLength`
    #    - `minimumPasswordAgeDays`
    #    - `passwordIncludeDigit`
    #    - `passwordIncludeDigitOrSpecialCharacter`
    #    - `passwordIncludeLowerCase`
    #    - `passwordIncludeSpecialCharacter`
    #    - `passwordIncludeUpperCase`
    #    - `questionsRequired`
    string passwordStrengthType?;
    # When **true,** passwords must include a digit. The default value is `false`
    string passwordIncludeDigit?;
    AccountPasswordStrengthType passwordStrengthTypeMetadata?;
    # The number of days before passwords expire. To use this property, the `expirePassword` property must be set to **true.**
    string expirePasswordDays?;
    # When **true,** passwords expire. The default value is `false`
    string expirePassword?;
    AccountPasswordLockoutDurationMinutes lockoutDurationMinutesMetadata?;
    # When **true,** passwords must include an uppercase letter. The default value is `false`
    string passwordIncludeUpperCase?;
    # When **true,** passwords must include a lowercase letter. The default value is `false`
    string passwordIncludeLowerCase?;
    # The number of security questions required to confirm the user’s identity before the user can reset their password. The default value is `0`
    string questionsRequired?;
    # The number of minutes a user is locked out of the system after three failed login attempts. The default value is `2`
    string lockoutDurationMinutes?;
    AccountPasswordLockoutDurationType lockoutDurationTypeMetadata?;
    # The minimum number of days after a password is set before it can be changed. This value can be `0` or more days. The default value is `0`
    string minimumPasswordAgeDays?;
    AccountPasswordMinimumPasswordAgeDays minimumPasswordAgeDaysMetadata?;
    AccountPasswordExpirePasswordDays expirePasswordDaysMetadata?;
    # When **true,** passwords must include a special character. The default value is `false`.
    # 
    # **Note:** Passwords cannot include angle brackets (`<` `>`) or spaces
    string passwordIncludeSpecialCharacter?;
};

# Represents the Queries record for the operation: Contacts_GetContactById
public type ContactsGetContactByIdQueries record {
    # (Optional) The cloud provider from which to retrieve the contacts. Valid values are:
    # 
    # - `rooms`
    # - `docusignCore` (default)
    @http:Query {name: "cloud_provider"}
    string cloudProvider?;
};

# 
public type Stamp record {
    # The URI for retrieving the image of the user's stamp
    string stampImageUri?;
    # The date and time that the item was last modified
    string lastModifiedDateTime?;
    # The phonetic spelling of the `signatureName`
    string phoneticName?;
    # The UTC DateTime when the item was created
    string createdDateTime?;
    # Optionally specify an external identifier for the user's signature
    string externalID?;
    # The format of a stamp. Valid values are:
    # 
    # - `NameHanko`: The stamp represents only the signer's name.
    # - `NameDateHanko`: The stamp represents the signer's name and the date. 
    string stampFormat?;
    # The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents
    string stampSizeMM?;
    # 
    string customField?;
    # 
    string imageBase64?;
    # The UTC date and time when the user adopted the signature
    string adoptedDateTime?;
    # When **true,** users may not resize the stamp
    string disallowUserResizeStamp?;
    # Specifies the user's signature name
    string signatureName?;
    DateStampProperties dateStampProperties?;
    # Specificies the type of image. Valid values:
    # 
    # - `stamp_image`
    # - `signature_image`
    # - `initials_image`
    string imageType?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
};

# One of the selectable radio buttons
# in the `radios` property
# of a [`radioGroup`](/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/) tab
public type Radio record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata selectedMetadata?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located.
    # Must be 1 for supplemental documents
    string pageNumber?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    PropertyMetadata valueMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** the radio button is selected
    string selected?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    PropertyMetadata lockedMetadata?;
    ErrorDetails errorDetails?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata requiredMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata anchorXOffsetMetadata?;
    PropertyMetadata xPositionMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# A list of failed envelope IDs to retry
public type ConnectFailureFilter record {
    # Must be **false.** Setting this property to any other value will result in errors
    string synchronous?;
    # An array of envelope GUIDs.
    # 
    # Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
    string[] envelopeIds?;
};

# 
public type CommentThread record {
    # The unique identifier for the tab
    string tabId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # 
    string caption?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Reserved for DocuSign
    string 'source?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The unique identifier for the comment thread
    string threadId?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the information in the tab is bold
    string bold?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    MergeField mergeField?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    ErrorDetails errorDetails?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    PropertyMetadata italicMetadata?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    PropertyMetadata anchorUnitsMetadata?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    # An array of comment tabs that contain information about users' comments on documents
    Comment[] comments?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# 
public type UserAuthorizationsDeleteRequest record {
    # 
    string[] authorizations?;
};

# A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
# 
# When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see 
# [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/s/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New)
public type ConnectSalesforceObject record {
    # The DocuSign and Salesforce fields that you want to use to match a Salesforce object with DocuSign information. This information tells Connect when to send updates to Salesforce
    ConnectSalesforceField[] selectFields?;
    # When **true,** Salesforce is updated only when the envelope is complete
    string onCompleteOnly?;
    # The DocuSign and Salesforce fields that you want to update. 
    # 
    # **Note:** You can choose to update SalesForce (with information from DocuSign) only, update DocuSign only, or both
    ConnectSalesforceField[] updateFields?;
    # When **true,** the `connectSalesforceObject` is active
    string active?;
    # A description of the `connectSalesforceObject`
    string description?;
    # 
    string insert?;
    # The Salesforce.com object type, such as `case`, `contact`, or `opportunity`
    string sfObject?;
    # The ID of the `connectSalesforceObject`
    string id?;
    # A name for the Salesforce object.
    # 
    # **Note:** You can enter any name for the object. It does not have to match the `sfObject` property
    string sfObjectName?;
};

# A Commission State tab displays the state in which a notary's commission was granted. The tab is populated with the notary's commission information, but the recipient can also edit the value when notarizing. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
# 
# [notary]: /docs/notary-api/
public type CommissionState record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero
    string xPosition?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # Specifies the page number on which the tab is located
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # 
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# A tab that displays the recipient's company name
public type Company record {
    # The unique identifier for the tab
    string tabId?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located.
    # For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# 
public type TabAccountSettings record {
    # When **true,** account users can set a tab order for the signing process.
    # 
    # **Note:** Only Admin users can change this setting
    string allowTabOrder?;
    # Reserved for DocuSign
    string firstLastEmailTabsEnabled?;
    # When **true,** approve and decline tabs are enabled
    string approveDeclineTabsEnabled?;
    SettingsMetadata senderToChangeTabAssignmentsMetadata?;
    # When **true,** list tabs are enabled
    string listTabsEnabled?;
    SettingsMetadata drawTabsMetadata?;
    SettingsMetadata tabLocationMetadata?;
    SettingsMetadata noteTabsMetadata?;
    SettingsMetadata textTabsMetadata?;
    # When **true,** tab locking is enabled.
    # 
    # **Note:** Only Admin users can change this setting
    string tabLockingEnabled?;
    SettingsMetadata dataFieldRegexMetadata?;
    # 
    string drawTabsEnabled?;
    SettingsMetadata checkBoxTabsMetadata?;
    # 
    string numericalTabsEnabled?;
    SettingsMetadata radioTabsMetadata?;
    SettingsMetadata listTabsMetadata?;
    # When **true,** radio button tabs are enabled
    string radioTabsEnabled?;
    SettingsMetadata calculatedFieldsMetadata?;
    SettingsMetadata prefillTabsMetadata?;
    SettingsMetadata tabDataLabelMetadata?;
    # When **true,** text tabs are enabled
    string textTabsEnabled?;
    SettingsMetadata approveDeclineTabsMetadata?;
    SettingsMetadata tabLockingMetadata?;
    SettingsMetadata allowTabOrderMetadata?;
    # When **true,** checkbox tabs are enabled
    string checkboxTabsEnabled?;
    SettingsMetadata numericalTabsMetadata?;
    # Reserved for DocuSign
    string senderToChangeTabAssignmentsEnabled?;
    # When **true,** regular expressions are enabled for tabs that contain data fields
    string dataFieldRegexEnabled?;
    # When **true,** text formatting (such as font type, font size,
    # font color, bold, italic, and underline) is enabled for tabs that
    # support formatting.
    # 
    # **Note:** Only Admin users can change this setting
    string tabTextFormattingEnabled?;
    SettingsMetadata firstLastEmailTabsMetadata?;
    SettingsMetadata dataFieldSizeMetadata?;
    SettingsMetadata sharedCustomTabsMetadata?;
    # Reserved for DocuSign
    string tabScaleEnabled?;
    # When **true,** [calculated fields](https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html) are enabled for tabs
    string calculatedFieldsEnabled?;
    # When **true,** note tabs are enabled
    string noteTabsEnabled?;
    # When **true,** shared custom tabs are enabled
    string sharedCustomTabsEnabled?;
    SettingsMetadata tabTextFormattingMetadata?;
    # When **true,** saving custom tabs is enabled
    string savingCustomTabsEnabled?;
    SettingsMetadata tabScaleMetadata?;
    # Reserved for DocuSign
    string tabLocationEnabled?;
    SettingsMetadata savingCustomTabsMetadata?;
    # When **true,** setting character limits for input fields is enabled
    string dataFieldSizeEnabled?;
    # 
    string prefillTabsEnabled?;
    # When **true,** [data
    # labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.
    # 
    # **Note:** Only Admin users can change this setting
    string tabDataLabelEnabled?;
};

# Represents the Queries record for the operation: Recipients_GetRecipientInitialsImage
public type RecipientsGetRecipientInitialsImageQueries record {
    # The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image
    @http:Query {name: "include_chrome"}
    string includeChrome?;
};

# Represents the Queries record for the operation: Envelopes_PutStatus
public type EnvelopesPutStatusQueries record {
    # The envelope status that you are checking for. Possible values are:
    # 
    # 
    # - `Changed` (default)
    # - `Completed`
    # - `Created`
    # - `Declined`
    # - `Deleted`
    # - `Delivered`
    # - `Processing`
    # - `Sent`
    # - `Signed`
    # - `TimedOut`
    # - `Voided`
    # 
    # For example, if you specify `Changed`, this method
    # returns a list of envelopes that changed status
    # during the `from_date` to `to_date` time period. 
    @http:Query {name: "from_to_status"}
    string fromToStatus?;
    # The zero-based index of the
    # result from which to start returning results.
    # 
    # Use with `count` to limit the number
    # of results.
    # 
    # The default value is `0`
    @http:Query {name: "start_position"}
    string startPosition?;
    # The date/time setting that specifies when the request begins checking for status changes for envelopes in the account. This is required unless parameters `envelope_ids` and/or `transaction_Ids` are provided.
    # 
    # **Note:** This parameter must be set to a valid  `DateTime`, or  `envelope_ids` and/or `transaction_ids` must be specified
    @http:Query {name: "from_date"}
    string fromDate?;
    # Optional date/time setting
    # that specifies the last date/time 
    # or envelope status changes in the result set. 
    # 
    # The default value is the time that you call the method. 
    @http:Query {name: "to_date"}
    string toDate?;
    # Limits results to envelopes
    # sent by the account user
    # with this user name.
    # 
    # `email` must be given as well,
    # and both `email` and `user_name`
    # must refer to an existing account user
    @http:Query {name: "user_name"}
    string userName?;
    # The maximum number of results to return.
    # 
    # Use `start_position` to specify the number of results to skip.
    string count?;
    # When **true,** removes any results that match one of the provided `transaction_ids`
    string block?;
    # The envelope IDs to include in the results.
    # 
    # The value of this property can be:
    # - A comma-separated list of envelope IDs
    # - The special value `request_body`. In this case, the method uses the envelope IDs in the request body
    @http:Query {name: "envelope_ids"}
    string envelopeIds?;
    # The transaction IDs to include in the results. Note that transaction IDs are valid for seven days.
    # 
    # The value of this property can be:
    # - A list of comma-separated transaction IDs
    # - The special value `request_body`. In this case, this method uses the transaction IDs in the request body
    @http:Query {name: "transaction_ids"}
    string transactionIds?;
    # The email address of the sender
    string email?;
    # Specifies the Authoritative Copy Status for the envelopes. Valid values: 
    # 
    # - `Unknown`
    # - `Original`
    # - `Transferred`
    # - `AuthoritativeCopy`
    # - `AuthoritativeCopyExportPending`
    # - `AuthoritativeCopyExported`
    # - `DepositPending`
    # - `Deposited`
    # - `DepositedEO`
    # - `DepositFailed`
    @http:Query {name: "ac_status"}
    string acStatus?;
    # A comma-separated list of envelope status to search for. Possible values are:
    # 
    # - `completed`
    # - `created`
    # - `declined`
    # - `deleted`
    # - `delivered`
    # - `processing`
    # - `sent`
    # - `signed`
    # - `template`
    # - `voided`
    string status?;
};

# Contains information about the address associated with the account
public type AccountAddress record {
    # The country associated with the address. Maximum length: 50 characters
    string country?;
    # The first name of the user associated with the account. Maximum Length: 50 characters
    string firstName?;
    # The last name of the user associated with the account
    string lastName?;
    # The second line of the address. Maximum length: 100 characters
    string address2?;
    # The city associated with the address. Maximum length: 40 characters
    string city?;
    # The phone number associated with the account
    string phone?;
    # The first line of the address. Maximum length: 100 characters
    string address1?;
    # The postal code associated with the address. Maximum length: 20 characters
    string postalCode?;
    # The state or province associated with the address. Maximum length: 40 characters
    string state?;
    # The fax number associated with the account
    string fax?;
    # The email address associated with the account
    string email?;
    # An array of supported countries associated with the account
    Country[] supportedCountries?;
};

# 
public type LinkedExternalPrimaryAccount record {
    # 
    string linkId?;
    # The name on the account
    string accountName?;
    # 
    string configurationId?;
    # 
    string pdfFieldHandlingOption?;
    ExternalPrimaryAccountRecipientAuthRequirements recipientAuthRequirements?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # 
    string email?;
    # Indicates the envelope status. Valid values are:
    # 
    # * `sent` - The envelope is sent to the recipients. 
    # * `created` - The envelope is saved as a draft and can be modified to be sent later
    string status?;
};

# Represents the Queries record for the operation: PermissionProfiles_PutPermissionProfiles
public type PermissionProfilesPutPermissionProfilesQueries record {
    # A comma-separated list of additional properties to return in the response. The only valid value for this request is `metadata`, which returns metadata indicating whether the properties associated with the account permission profile are editable
    string include?;
};

# Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
public type RecipientSignatureProviderOptions record {
    # Reserved for DocuSign
    string cpfNumber?;
    PropertyMetadata oneTimePasswordMetadata?;
    PropertyMetadata signerRoleMetadata?;
    # The mobile phone number used to send the recipient an access code for the signing ceremony. Format: a string starting with +, then the country code followed by the full mobile phone number without any spaces or special characters. Omit leading zeroes before a city code. Examples: +14155551234, +97235551234, +33505551234
    string sms?;
    # The role or capacity of the signing recipient. Examples: Manager, Approver, etc
    string signerRole?;
    PropertyMetadata cpfNumberMetadata?;
    # A pre-shared secret that the signer must enter to complete the signing process. Eg last six digits of the signer's government ID or Social Security number. Or a newly created pre-shared secret for the transaction. Note: some signature providers may require an exact (case-sensitive) match if alphabetic characters are included in the field
    string oneTimePassword?;
    PropertyMetadata smsMetadata?;
};

# Represents the Queries record for the operation: Recipients_GetRecipientTabs
public type RecipientsGetRecipientTabsQueries record {
    # When **true,** all tabs with anchor tab properties are included in the response. The default value is **false.**
    @http:Query {name: "include_anchor_tab_locations"}
    string includeAnchorTabLocations?;
    # When **true,** the response includes metadata indicating which properties are editable
    @http:Query {name: "include_metadata"}
    string includeMetadata?;
};

# Contains information for transferring values between Salesforce data fields and DocuSign tabs
public type MergeField record {
    # Sets the object associated with the custom tab. Currently this is the Salesforce Object
    string path?;
    PropertyMetadata pathExtendedMetadata?;
    # When **true,** data entered into the merge field during Signing will update the mapped Salesforce field
    string writeBack?;
    PropertyMetadata writeBackMetadata?;
    PropertyMetadata configurationTypeMetadata?;
    # Reserved for DocuSign
    PathExtendedElement[] pathExtended?;
    PropertyMetadata pathMetadata?;
    PropertyMetadata allowSenderToEditMetadata?;
    # When **true,** the sender can modify the value of the `mergeField` tab during the sending process
    string allowSenderToEdit?;
    # Specifies the row number in a Salesforce table that the merge field value corresponds to
    string row?;
    # If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`
    string configurationType?;
    PropertyMetadata rowMetadata?;
};

# 
public type SmartSectionCollapsibleDisplaySettings record {
    # A CSS color value (such as `#DCF851`) that indicates the color of the arrow
    string arrowColor?;
    # Indicates the size of the collapsible arrows. Possible values are:
    # 
    # - `small`
    # - `large` (default)
    string arrowSize?;
    # When **true,** only the arrow is clickable to expand or collapse the section.
    # When **false** (the default), both the label and the arrow are clickable.
    # 
    # If no arrow is used, this setting is ignored
    boolean onlyArrowIsClickable?;
    # The location of the arrow relative to the collapsible section's label. Possible values are:
    # 
    # - `right` (default)
    # - `left`
    string arrowLocation?;
    # Indicates the direction of the disclosure arrow
    # when the collapsible section is in the open state.
    # 
    # One of the following:
    # 
    # - `up`: In the open state, the disclosure arrow points up.
    # - `down`: In the open state, the disclosure arrow points down.
    # - `left`: In the open state, the disclosure arrow points left.
    # - `right`: In the open state, the disclosure arrow points right
    string arrowOpen?;
    # The name of the CSS style to be used on collapsible arrow section
    string arrowStyle?;
    # The name of the CSS style to be used for the collapsible container
    string containerStyle?;
    # The name of the CSS style to be used for the collapsible container's label
    string labelStyle?;
    # The name of the CSS style to be used for the collapsible container's outer label and arrow style
    string outerLabelAndArrowStyle?;
    # Indicates the direction of the disclosure arrow
    # when the collapsible section is in the closed state.
    # 
    # One of the following:
    # 
    # - `up`: In the closed state, the disclosure arrow points up.
    # - `down`: In the closed state, the disclosure arrow points down.
    # - `left`: In the closed state, the disclosure arrow points left.
    # - `right`: In the closed state, the disclosure arrow points right
    string arrowClosed?;
};

# This object contains details about a custom field for a bulk send copy. In a bulk send request, each custom field in the bulk send list must match a custom field in the envelope or template that you want to send
public type BulkSendingCopyCustomField record {
    # The name of the custom field
    string name?;
    # The value of the custom field
    string value?;
};

# 
public type ExternalPrimaryAccountRecipientAuthRequirements record {
    # 
    string idVerification?;
    # 
    string phone?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # 
    string kba?;
};

# 
public type Province record {
    # 
    string isoCode?;
    # 
    string name?;
};

# Information about a specific role
public type TemplateRole record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    RecipientEmailNotification emailNotification?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    EnvelopeRecipientTabs tabs?;
    # When **true,** this recipient is the default recipient and any tabs generated by the `transformPdfFields` option are mapped to this recipient
    string defaultRecipient?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    RecipientPhoneNumber phoneNumber?;
    # The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
    RecipientSignatureProvider[] recipientSignatureProviders?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # Specifies the recipient's name.
    # 
    # For an in-person signer, this is the name of the host
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    # The email address of the person associated with a role name. It is the email address of the person specified in the `name` property.
    # 
    # For an in-person signer, this is the email address of the host
    string email?;
    # The full legal name of the in-person signer.
    # 
    # Maximum Length: 100 characters
    string inPersonSignerName?;
};

# The request object for the [EnvelopeViews: createConsole](/docs/esign-rest-api/reference/envelopes/envelopeviews/createconsole/) method
public type ConsoleViewRequest record {
    # The ID of an envelope. If the envelope has been sent, the endpoint returns a URL for a view of the documents. If the envelope has not yet been sent, the endpoint returns a URL for the sender view.
    # 
    # This property is optional. If no value is provided, the endpoint returns a URL for the front page of the demo UI
    string envelopeId?;
    # The URL to which the user should be redirected. This is only used when the `envelopeId` is specified as a draft envelope. In this case, the endpoint returns a URL for the sender view. When the user exits the sender view, they will be redirected to the `returnUrl` value. If no value is provided, there is no option to leave the sender view.
    # 
    # In other cases, the user is not redirected out of the console view
    string returnUrl?;
};

# Contains information about captive (embedded) recipients
public type CaptiveRecipientInformation record {
    # A complex type containing information about one or more captive recipients
    CaptiveRecipient[] captiveRecipients?;
};

# Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients
public type Tabs record {
    # A list of
    # [First Name tabs][firstName].
    # 
    # A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.
    # 
    # 
    # [firstName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#parameters_firstname
    FirstName[] firstNameTabs?;
    # A list of numerical tabs.
    # 
    # Numerical  tabs provide robust display and validation features, including formatting for different regions and currencies, and minimum and maximum value validation.                                                                                                                                                                                                                                                                                                                                                                                                                                                             
    # 
    # To learn more about the different forms of number tabs,
    # see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide.
    # For specific information about numerical tabs
    # see [Features of numericalTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numericaltabs)
    Numerical[] numericalTabs?;
    # A list of
    # [Initial Here tabs][initialHere].
    # 
    # This type of tab enables the recipient to initial the document. May be optional. This value can't be set.
    # 
    # [initialHere]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    InitialHere[] initialHereTabs?;
    # An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set
    CommentThread[] commentThreadTabs?;
    # A list of
    # [Title tabs][title].
    # 
    # A Title tab displays the recipient's title.  This value can't be set.
    # 
    # 
    # [title]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Title[] titleTabs?;
    # A list of
    # [View tabs][view].
    # 
    # A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.
    # 
    # [view]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    View[] viewTabs?;
    # A list of
    # [Commission County tabs][cc].
    # 
    # 
    # A Commission County tab displays the county of a notary's commission. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionCounty[] commissionCountyTabs?;
    # A list of
    # [Commission State tabs][cc].
    # 
    # 
    # A Commission County tab displays the state in which a notary's commission was granted. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionState[] commissionStateTabs?;
    # An array of List tabs.
    # 
    # A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.
    # 
    # Find descriptions of all tab types in
    # the [EnvelopeRecipientTabs Resource][ert].
    # 
    # [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    List[] listTabs?;
    # A list of
    # [Zip tabs][zip].
    # 
    # A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.
    # 
    # 
    # [zip]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Zip[] zipTabs?;
    PrefillTabs prefillTabs?;
    # A list of
    # [Decline tabs][decline].
    # 
    # A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.
    # 
    # 
    # [decline]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Decline[] declineTabs?;
    # A list of
    # [Envelope ID tabs][envelopeId].
    # 
    # An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.
    # 
    # 
    # [envelopeId]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#response201_envelopeid
    EnvelopeId[] envelopeIdTabs?;
    # A list of
    # [Approve tabs][approve].
    # 
    # An Approve tab enables
    # the recipient to approve documents without
    # placing a signature or initials on the document. If the
    # recipient clicks the tab during the signing process, the
    # recipient is considered to have signed the document. No
    # information is shown on the document of the approval, but it
    # is recorded as a signature in the envelope history.
    # The value of an approve tab can't be set.
    # 
    # [approve]:          /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Approve[] approveTabs?;
    # A list of
    # [Signer Attachment tabs][signerAttachment].
    # 
    # This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.
    # 
    # 
    # [signerAttachment]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    SignerAttachment[] signerAttachmentTabs?;
    # An array of `tabGroup` items.
    # 
    # To associate a tab with a tab group, add the tab group's `groupLabel` to the tab's `tabGroupLabels` array
    TabGroup[] tabGroups?;
    # A list of
    # [Sign Here tabs][signHere].
    # 
    # This type of tab enables the recipient to sign a document. May be optional. This value can't be set.
    # 
    # [signHere]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    SignHere[] signHereTabs?;
    # A list of Draw Tabs.
    # 
    # A Draw Tab allows the recipient to add a free-form drawing to the document
    Draw[] drawTabs?;
    # A list of
    # [Email Address tabs][emailAddress].
    # 
    # An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.
    # 
    # 
    # [emailAddress]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    EmailAddress[] emailAddressTabs?;
    # A list of
    # [Date tabs][date].
    # 
    # A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but several other date formats are also accepted. The system retains the format that the recipient enters.
    # 
    # **Note:** If you need to enforce a specific date format, DocuSign recommends that you use a Text tab with a validation pattern and validation message.
    # 
    # 
    # [date]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Date[] dateTabs?;
    # A list of [Formula tabs][formulaTab].
    # 
    # The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.
    # 
    # The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].
    # 
    # If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].
    # 
    # [calculatedfields]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html
    # [paymentguide]:     https://support.docusign.com/s/document-item?bundleId=juu1573854950452&topicId=fyw1573854935374.html
    # [formulaTab]:       /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    FormulaTab[] formulaTabs?;
    # A list of
    # [Checkbox tabs][checkbox].
    # 
    # 
    # A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.
    # 
    # 
    # [checkbox]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Checkbox[] checkboxTabs?;
    # A list of
    # [Email tabs][email].
    # 
    # An Email tab enables the recipient to enter an email address.
    # This is a one-line field that checks that a valid email
    # address is entered. It uses the same parameters as a Text
    # tab, with the validation message and pattern set for email
    # information. This value can be set.
    # 
    # When getting information that includes
    # this tab type, the original value of the tab when the
    # associated envelope was sent is included in the response.
    # 
    # [email]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Email[] emailTabs?;
    # A list of
    # [Commission Number tabs][tabref].
    # 
    # 
    # A Commission Number tab displays a notary's commission number. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [tabref]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionNumber[] commissionNumberTabs?;
    # A list of
    # [Commission Expiration tabs][tabref].
    # 
    # 
    # A Commission Expiration tab displays the expiration date of a notary's commission. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.
    # 
    # 
    # [tabref]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    CommissionExpiration[] commissionExpirationTabs?;
    # A list of
    # [Phone Number tabs][cc].
    # 
    # 
    # A Phone Number tab enables a recipient to enter a phone number.
    # 
    # **Note:** This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
    # 
    # [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    # [notary]: /docs/notary-api/
    PhoneNumber[] phoneNumberTabs?;
    # A list of  [Notarize tabs][notarize].
    # 
    # A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.
    # 
    # **Note:** Only one notarize tab can appear on a page.
    # 
    # [notarize]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Notarize[] notarizeTabs?;
    # A list of [Radio Group tabs][radioGroup].
    # 
    # A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
    # buttons associated with the group. Only one radio button can be selected in a group. This value can be set.
    # 
    # 
    # [radioGroup]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    RadioGroup[] radioGroupTabs?;
    # A list of
    # [Date Signed tabs][dateSigned].
    # 
    # 
    # A Date Signed tab displays the date that the recipient signed the document. This value can't be set.
    # 
    # [dateSigned]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    DateSigned[] dateSignedTabs?;
    # A list of
    # Text tabs.
    # 
    # A text tab enables the recipient to enter free text. This value can be set.
    # 
    # Find descriptions of all tab types in
    # the [EnvelopeRecipientTabs Resource][ert].
    # 
    # [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Text[] textTabs?;
    # A list of
    # [Company tabs][company].
    # 
    # A Company tab displays a field for the name of the recipient's company. This value can't be set.
    # 
    # [company]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#parameters_company
    Company[] companyTabs?;
    # A list of
    # [Note tabs][note].
    # 
    # A Note tab displays additional information to the recipient in the form of a note. This value can be set.
    # 
    # [note]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Note[] noteTabs?;
    # A list of
    # [Full Name tabs][fullName].
    # 
    # A Full Name tab displays the recipient's full name. This value can't be set.
    # 
    # 
    # [fullName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    FullName[] fullNameTabs?;
    # A list of
    # [SSN tabs][ssn].
    # 
    # An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
    # dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.
    # 
    # 
    # [ssn]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Ssn[] ssnTabs?;
    # A list of Notary Seal tabs.
    # 
    # A Notary Seal tab enables the recipient to notarize a document. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].
    # 
    # [notary]: /docs/notary-api/
    NotarySeal[] notarySealTabs?;
    # A list of
    # [Last Name tabs][lastName].
    # 
    # A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.
    # 
    # 
    # [lastName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    LastName[] lastNameTabs?;
    # A list of Number tabs.
    # 
    # Number tabs validate that the entered value is a number.
    # They do not support advanced validation or display options.
    # 
    # To learn more about the different forms of number tabs,
    # see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide.
    # For specific information about number tabs
    # see [Features of numberTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numbertabs).
    # 
    # [number]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
    Number[] numberTabs?;
    # A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections) tabs.
    # 
    # Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.
    # 
    # **Note:** Smart Sections are a premium feature. Responsive signing must also be enabled for your account
    SmartSection[] smartSectionTabs?;
    # This type of tab enables the recipient to strike through document text. This value can't be set
    PolyLineOverlay[] polyLineOverlayTabs?;
};

# Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only
public type CurrencyFeatureSetPrice record {
    # Reserved for DocuSign
    string seatFee?;
    # Reserved for DocuSign
    string currencySymbol?;
    # Reserved for DocuSign
    string envelopeFee?;
    # Reserved for DocuSign
    string fixedFee?;
    # Specifies the alternate ISO currency code for the account. 
    string currencyCode?;
};

# The value of a formula tab is calculated
# from the values of other
# number or date tabs in the document.
# When the recipient completes the underlying fields,
# the formula tab calculates and displays the result.
# 
# The `formula` property of the tab
# contains the references
# to the underlying tabs.
# See [Calculated Fields][calculatedfields]
# in the DocuSign Support Center
# to learn more about formulas.
# 
# If a formula tab contains
# a `paymentDetails` property,
# the tab is considered a payment item.
# See [Requesting Payments Along with Signatures][paymentguide]
# in the DocuSign Support Center
# to learn more about payments.
# 
# [calculatedfields]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html
# [paymentguide]:     https://support.docusign.com/s/document-item?bundleId=juu1573854950452&topicId=fyw1573854935374.html
public type FormulaTab record {
    # The unique identifier for the tab
    string tabId?;
    # A regular expression used to validate input for the tab
    string validationPattern?;
    PropertyMetadata hiddenMetadata?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (+35, -2)
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    PropertyMetadata roundDecimalPlacesMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (+35, -2)
    string xPosition?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located. For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata formulaMetadata?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    # If this is a regular formula (no `paymentDetails` property is present):
    # 
    # * **true:** The tab is hidden.
    # * **false:** The tab is shown.
    # 
    # If the formula is payment item (a `paymentDetails` property is present):
    # 
    # * **true:** The tab is displayed as a payment.
    # * **false:** The tab is displayed as a regular formula
    string hidden?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata validationPatternMetadata?;
    PropertyMetadata isPaymentAmountMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    PaymentDetails paymentDetails?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata validationMessageMetadata?;
    # The number of decimal places to round to
    string roundDecimalPlaces?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Contains the formula
    # for calculating the value of
    # this tab.
    # 
    # Use a tab's `tabLabel`,
    # enclosed in brackets,
    # to refer to it.
    # 
    # For example,
    # you want to present the total cost
    # of two items, tax included.
    # 
    # The cost of each item is stored
    # in number tabs labeled Item1 and Item2.
    # The tax rate is in a number tab
    # labeled TaxRate.
    # 
    # The formula string for this property
    # would be:
    # `([Item1] + [Item2]) * (1 + [TaxRate])`
    # 
    # See [Calculated Fields][calculatedfields]
    # in the DocuSign Support Center
    # to learn more about formulas.
    # 
    # Maximum Length: 2000 characters
    # 
    # [calculatedfields]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html
    string formula?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# Represents the Queries record for the operation: CloudStorage_GetCloudStorage
public type CloudStorageGetCloudStorageQueries record {
    #  The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
    # 
    # The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
    #  
    string redirectUrl?;
};

# Represents the Queries record for the operation: BillingInvoices_GetBillingInvoices
public type BillingInvoicesGetBillingInvoicesQueries record {
    # Specifies the date/time of the earliest invoice in the account to retrieve
    @http:Query {name: "from_date"}
    string fromDate?;
    # Specifies the date/time of the latest invoice in the account to retrieve
    @http:Query {name: "to_date"}
    string toDate?;
};

# 
public type SigningGroupUsers1 record {
    # User management information
    SigningGroupUser[] users?;
};

# Represents the Queries record for the operation: AccountSignatures_PostAccountSignatures
public type AccountSignaturesPostAccountSignaturesQueries record {
    @http:Query {name: "decode_only"}
    string decodeOnly?;
};

# 
public type PageRequest record {
    # Sets the direction the page image is rotated. The possible settings are: left or right
    string rotate?;
    # The user's encrypted password hash
    string password?;
};

# This object contains details about the envelope document
public type EnvelopeDocument record {
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # The GUID of the document
    string documentIdGuid?;
    # When **true,**
    # the document is included in the combined document download (`documentsCombinedUri`). 
    # The default value is **true.**
    string includeInDownload?;
    PropertyMetadata authoritativeCopyMetadata?;
    PropertyMetadata signerMustAcknowledgeMetadata?;
    # The type of this tab. Values are:
    # 
    # - `Approve`
    # - `CheckBox`
    # - `Company`
    # - `Date`
    # - `DateSigned`
    # - `Decline`
    # - `Email`
    # - `EmailAddress`
    # - `EnvelopeId`
    # - `FirstName`
    # - `Formula`
    # - `FullName`
    # - `InitialHere`
    # - `InitialHereOptional`
    # - `LastName`
    # - `List`
    # - `Note`
    # - `Number`
    # - `Radio`
    # - `SignerAttachment`
    # - `SignHere`
    # - `SignHereOptional`
    # - `Ssn`
    # - `Text`
    # - `Title`
    # - `Zip5`
    # - `Zip5Dash4`
    string 'type?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # If this document is an attachment to another document in the envelope, this is the ID of the attachment tab it is associated with on the other document
    string attachmentTabId?;
    PropertyMetadata nameMetadata?;
    # An array of page objects that contain information about the pages in the document
    Page[] pages?;
    # Sets how the signer interacts with the supplemental document.
    # Valid values:
    # 
    # * `no_interaction`<br>
    #   No recipient action is required.
    # 
    # * `view`<br>
    #   The recipient is required to view the document.
    # 
    # * `accept`<br>
    #   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.
    # 
    # * `view_accept`<br>
    #   The recipient is required to view and accept the document.
    string signerMustAcknowledge?;
    # When **true,** marks all of the documents in the envelope as authoritative copies.
    # 
    # **Note:** You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false.**
    string authoritativeCopy?;
    PropertyMetadata includeInDownloadMetadata?;
    # If recipients were added by converting form fields into tabs, their IDs appear here. This property is read-only
    string[] addedRecipientIds?;
    # An object containing information about the custom fields on the document
    NameValue[] documentFields?;
    # The order in which to sort the results.
    # 
    # Valid values are: 
    # 
    # 
    # * `asc`: Ascending order.
    # * `desc`: Descending order. 
    string 'order?;
    PropertyMetadata displayMetadata?;
    # This string sets the display and behavior properties of
    # the document during signing. Valid values:
    # 
    # * `modal`<br>
    #   The document is shown as a supplement action strip
    #   and can be viewed, downloaded, or printed in a modal window.
    #   This is the recommended value for supplemental documents. 
    # 
    # * `inline`<br>
    #   The document is shown in the normal signing window.
    #   This value is not used with supplemental documents,
    #   but is the default value for all other documents
    string display?;
    # 
    string isDocGenDocument?;
    # 
    DocGenSyntaxError[] docGenErrors?;
    # The URI for retrieving the document
    string uri?;
    # 
    string isAceGenDocument?;
    # 
    SignatureType[] availableDocumentTypes?;
    # 
    string sizeBytes?;
    # 
    string docGenDocumentStatus?;
    # 
    DocGenFormField[] docGenFormFields?;
    # The document's file name. 
    # 
    # Example: `Q1-Report.docx`
    string name?;
    # The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding
    string documentBase64?;
    # The ID of the document that the tab is placed on. This value must refer to the ID of an existing document
    string documentId?;
    # When **true,** the document has editable form fields that are made available through a PDF format
    string containsPdfFormFields?;
    ErrorDetails errorDetails?;
};

# 
public type AccountMinimumPasswordLength record {
    # The maximum number of entry characters supported by the custom tab
    string maximumLength?;
    # Minimum length of the access code string
    string minimumLength?;
};

# 
public type PaymentSignerValues record {
    # This property specifies how the signer's collected payment details will be used.
    # 
    # Valid values:
    # 
    # - `authorize`: The payment details will be used to collect payment. This is the default value.
    # - `save`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway.
    # - `save_and_authorize`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway and will also be used to collect payment
    string paymentOption?;
};

# This object contains details about a bulk send recipient
public type BulkSendingCopyRecipient record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The name of the signing host.
    # This is the DocuSign user that is hosting the in-person signing session.
    # 
    # Required when `inPersonSigningType` is `inPersonSigner`.
    # For eNotary flow, use `name` instead.
    # 
    # Maximum Length: 100 characters
    string hostName?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # A list of tabs associated with the recipient. In a bulk send request, each of these recipient tabs must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.
    # 
    # For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
    # 
    #  You can use the following types of tabs to match bulk send recipients to an envelope:
    # 
    # - Text tabs
    # - Radio group tabs (where the name of the `radioGroup` on the envelope is used as the `tabLabel` in the bulk send list)
    # - List tabs
    BulkSendingCopyTab[] tabs?;
    # The in-person signer's full legal name.
    # 
    # Required when `inPersonSigningType` is `inPersonSigner`.
    # For eNotary flow, use `name` instead.
    # 
    # Maximum Length: 100 characters
    string signerName?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    RecipientSMSAuthentication smsAuthentication?;
    # The email address of the signing host.
    # This is the DocuSign user that is hosting the in-person signing session.
    # 
    # Required when `inPersonSigningType` is `inPersonSigner`.
    # For eNotary flow, use `email` instead.
    # 
    # Maximum Length: 100 characters
    string hostEmail?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # The recipient's email address
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    RecipientEmailNotification emailNotification?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    IdCheckInformationInput idCheckInformationInput?;
    # 
    string identificationMethod?;
    # The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
    RecipientSignatureProvider[] recipientSignatureProviders?;
    # 
    string name?;
    # The name of the role associated with the recipient.
    # 
    # **Note:** Every recipient must be assigned either a `recipientId` or a `roleName` but not both. You cannot use `roleName` and `recipientId` in the same list
    string roleName?;
    # Reserved for DocuSign
    string faxNumber?;
};

# Describes an additional notification method
public type RecipientAdditionalNotification record {
    RecipientPhoneNumber phoneNumber?;
    # The secondary delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string secondaryDeliveryMethod?;
    PropertyMetadata secondaryDeliveryMethodMetadata?;
    # The status of the delivery. This property is read-only.
    # 
    # One of:
    # 
    # - `autoresponded`
    # - `optedout`
    # - `limitreached`
    string secondaryDeliveryStatus?;
};

# Represents the Queries record for the operation: Tabs_GetTemplateDocumentTabs
public type TabsGetTemplateDocumentTabsQueries record {
    # Filters for tabs that occur on the pages that you specify. Enter as a comma-separated list of page Guids.
    # 
    # Example: `page_numbers=2,6`
    @http:Query {name: "page_numbers"}
    string pageNumbers?;
};

# 
public type TabMetadata record {
    # A regular expression used to validate input for the tab
    string validationPattern?;
    # 
    string numericalValue?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    # Specifies how numerical data is validated. Valid values:
    # 
    # - `number`
    # - `currency`
    string validationType?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # Reserved for DocuSign
    string signatureProviderId?;
    # The type of this tab. Values are:
    # 
    # - `Approve`
    # - `CheckBox`
    # - `Company`
    # - `Date`
    # - `DateSigned`
    # - `Decline`
    # - `Email`
    # - `EmailAddress`
    # - `EnvelopeId`
    # - `FirstName`
    # - `Formula`
    # - `FullName`
    # - `InitialHere`
    # - `InitialHereOptional`
    # - `LastName`
    # - `List`
    # - `Note`
    # - `Number`
    # - `Radio`
    # - `SignerAttachment`
    # - `SignHere`
    # - `SignHereOptional`
    # - `Ssn`
    # - `Text`
    # - `Title`
    # - `Zip5`
    # - `Zip5Dash4`
    string 'type?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # The user name of the DocuSign user who created this object
    string createdByDisplayName?;
    # If the custom tab is for a payment request, this is the name of the item associated with the charge.
    # 
    # Maximum Length: 100 characters.
    # 
    # Example: `Hamlet`
    string paymentItemName?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # The original value of the tab
    string initialValue?;
    # When **true,** the radio button is selected
    string selected?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    # If the custom tab is for a payment request, this is the external code for the item associated with the charge. For example, this might be your product id.
    # 
    # Example: `SHAK1`
    # 
    # Maximum Length: 100 characters
    string paymentItemCode?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # The User Name of the DocuSign user who last modified this object
    string lastModifiedByDisplayName?;
    # 
    string collaborative?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    # If the custom tab is for a payment request, this is the description of the item associated with the charge.
    # 
    # Example: `The Danish play by Shakespeare`
    # 
    # Maximum Length: 100 characters
    string paymentItemDescription?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    MergeField mergeField?;
    PropertyMetadata stampTypeMetadata?;
    # 
    string name?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    # The UTC DateTime this object was last modified. This is in ISO 8601 format
    string lastModified?;
    # If the tab is a list, this represents the values that are possible for the tab
    string[] items?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # 
    string minNumericalValue?;
    # The type of stamp. Valid values are:
    # 
    # - `signature`: A signature image. This is the default value.
    # - `stamp`: A stamp image.
    # - null
    string stampType?;
    # 
    string maxNumericalValue?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The maximum number of entry characters supported by the custom tab
    string maximumLength?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    # The userId of the DocuSign user who created this object
    string createdByUserId?;
    # When **true,** the custom tab is editable. Otherwise the custom tab cannot be modified
    string editable?;
    # Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size
    string scaleValue?;
    # The userId of the DocuSign user who last modified this object
    string lastModifiedByUserId?;
    # When **true,** the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs
    string includedInEmail?;
    # The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    # An optional string that is used to auto-match tabs to strings located in the documents of an envelope
    string anchor?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
};

# This object is used for both requests and responses. Some properties (such as `endPosition`) only apply to the response of [Groups: list](/docs/esign-rest-api/reference/usergroups/groups/list/)
public type GroupInformation record {
    # The last index position in the result set. 
    string endPosition?;
    # A collection group objects containing information about the groups
    Group[] groups?;
    # The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`
    string totalSetSize?;
    # The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`
    string resultSetSize?;
    # The starting index position of the current result set
    string startPosition?;
    # The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. 
    string nextUri?;
    # The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. 
    string previousUri?;
};

# Represents the Queries record for the operation: ChunkedUploads_GetChunkedUpload
public type ChunkedUploadsGetChunkedUploadQueries record {
    # (Optional) This parameter enables you to include additional attribute data in the response. The valid value for this method is `checksum`, which returns an SHA256 checksum of the content of the chunked upload in the response. You can use compare this checksum against your own checksum of the original content to verify that there are no missing parts before you attempt to commit the chunked upload
    string include?;
};

# Information about folder item results
public type FolderItemV2 record {
    # The date and time the envelope is set to expire
    string expireDateTime?;
    # The date and time that the item was last modified
    string lastModifiedDateTime?;
    # The name of the sender's company
    string senderCompany?;
    # The sender's id
    string senderUserId?;
    # The subject of the envelope
    string subject?;
    # The URI for retrieving the template
    string templateUri?;
    # The UTC DateTime when the item was created
    string createdDateTime?;
    # If the item is an envelope, this is the UTC DateTime when the envelope was completed
    string completedDateTime?;
    # The unique identifier of the template. If this is not provided, DocuSign will generate a value. 
    string templateId?;
    # The ID of the folder
    string folderId?;
    # If the item is a subfolder, this is the URI for retrieving it
    string folderUri?;
    # The sender's name
    string senderName?;
    # If the item is an envelope, this is the URI for retrieving it
    string envelopeUri?;
    # The name of the user who owns the folder
    string ownerName?;
    # If the item is an envelope, this is the ID of the envelope
    string envelopeId?;
    EnvelopeRecipients recipients?;
    # When **true,** indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES)
    string is21CFRPart11?;
    # The sender's email address
    string senderEmail?;
    # Contains a URI for an endpoint that you can use to retrieve the recipients
    string recipientsUri?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Indicates the envelope status. Valid values are:
    # 
    # * sent - The envelope is sent to the recipients. 
    # * created - The envelope is saved as a draft and can be modified and sent later
    string status?;
};

# Contains additional information that a specific signature provider requires
public type SignatureProviderRequiredOption record {
    # Reserved for DocuSign
    string[] requiredSignatureProviderOptionIds?;
    # Reserved for DocuSign
    string signerType?;
};

# The request body for the `createHistoricalEnvelopePublishTransaction` endpoint
public type ConnectHistoricalEnvelopeRepublish record {
    # An array of envelope IDs as comma-separated strings. This property is required.
    # 
    # For example: `["4280f274-xxxx-xxxx-xxxx-b218b7eeda08","9586h293-xxxx-xxxx-xxxx-m923b8opre71","2347w948-xxxx-xxxx-xxxx-t096b8krno89"]`
    string[] envelopes?;
    ConnectCustomConfiguration config?;
};

# An array of objects that describe the items in a workspace
public type WorkspaceItemList record {
    # A list of workspace items
    WorkspaceItem[] items?;
};

# 
public type RecipientIdentityPhoneNumber record {
    PropertyMetadata countryCodeMetadata?;
    # The telephone number. Use only the digits `0`-`9`. Remove any non-numeric characters.
    # 
    # Do not include the `countryCode`. For US, Canada, and other
    # [North American Numbering Plan](https://en.wikipedia.org/wiki/North_American_Numbering_Plan) countries, do not include a leading `1` or `0`
    string number?;
    PropertyMetadata numberMetadata?;
    # The telephone extension, if any
    string extension?;
    # The numeric country calling code for the phone number. For example, the country calling code for the US and Canada is 1. For the UK, the country calling code is 44.
    # 
    # Do not include the + symbol
    string countryCode?;
    # 
    string countryCodeLock?;
    PropertyMetadata extensionMetadata?;
};

# A tab that allows the recipient to enter a date. Date tabs
# are one-line fields that allow date information to be
# entered in any format. The tooltip for this tab recommends
# entering the date as MM/DD/YYYY, but this is not enforced.
# The format entered by the signer is retained. If you need a
# particular date format enforced, DocuSign recommends using a
# Text tab with a validation pattern and a validation message
# to enforce the format
public type Date record {
    # The unique identifier for the tab
    string tabId?;
    # A regular expression used to validate input for the tab
    string validationPattern?;
    PropertyMetadata originalValueMetadata?;
    PropertyMetadata anchorMatchWholeWordMetadata?;
    # When **true,** the information in the tab is underlined
    string underline?;
    # This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorCaseSensitive?;
    PropertyMetadata statusMetadata?;
    # This property indicates the vertical offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string yPosition?;
    # When **true** and shared is true, information must be entered in this field to complete the envelope. 
    string requireAll?;
    # The text of a tooltip that appears when a user hovers over a form field or tab
    string tooltip?;
    PropertyMetadata valueMetadata?;
    # 
    string caption?;
    # Indicates the type of tab (for example, `signHere` or `initialHere`)
    string tabType?;
    # Specifies the string to find in the document and use as the basis for tab placement
    string anchorString?;
    # When **true,** the signer is required to fill out this tab
    string required?;
    # An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block
    string formOrder?;
    PropertyMetadata templateRequiredMetadata?;
    PropertyMetadata fontMetadata?;
    # The height of the tab in pixels.
    # Must be an integer
    string height?;
    PropertyMetadata widthMetadata?;
    # A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience
    string formPageLabel?;
    PropertyMetadata recipientIdMetadata?;
    # When **true,** the sender must populate the tab before an envelope can be sent using the template. 
    # 
    # This value tab can only be changed by modifying (PUT) the template. 
    # 
    # Tabs with a `senderRequired` value of true cannot be deleted from an envelope
    string senderRequired?;
    # An integer specifying the order in which to present the guided form pages
    string formPageNumber?;
    # Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorYOffset?;
    PropertyMetadata underlineMetadata?;
    # Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field
    string requireInitialOnSharedChange?;
    PropertyMetadata tabIdMetadata?;
    MergeField mergeField?;
    # The font size used for the information in the tab. Possible values are:
    # 
    # - Size7
    # - Size8
    # - Size9
    # - Size10
    # - Size11
    # - Size12
    # - Size14
    # - Size16
    # - Size18
    # - Size20
    # - Size22
    # - Size24
    # - Size26
    # - Size28
    # - Size36
    # - Size48
    # - Size72
    string fontSize?;
    LocalePolicyTab localePolicy?;
    PropertyMetadata boldMetadata?;
    PropertyMetadata lockedMetadata?;
    # The status of the tab. Possible values are:
    # 
    # - `active`: The tab is active, but the recipient has not yet interacted with it.
    # - `signed`: The recipient signed the tab.
    # - `declined`: The recipient declined the envelope.
    # - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`)
    string status?;
    # This property indicates the horizontal offset of the object on the page.
    # DocuSign uses 72 DPI when determining position.
    # Required. Must be an integer. May be zero.
    # 
    # To improve the tab's position on the document,
    # DocuSign recommends
    # adjusting `xPosition`
    # and `yPosition`
    # coordinates
    # by (-3, -2)
    string xPosition?;
    # When **true,** this custom tab is shared
    string shared?;
    # Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`
    string anchorXOffset?;
    # An array of tab groups that this tab belongs to. Tab groups are identified by their `groupLabel` property.
    # 
    # To associate this tab with a tab group, add the tab group's `groupLabel` to this array
    string[] tabGroupLabels?;
    PropertyMetadata toolTipMetadata?;
    PropertyMetadata requireAllMetadata?;
    PropertyMetadata anchorStringMetadata?;
    PropertyMetadata formPageLabelMetadata?;
    PropertyMetadata requiredMetadata?;
    PropertyMetadata formOrderMetadata?;
    # This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :
    # 
    # - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
    # - `right`: Aligns the tab’s left side with the last character of the matching anchor word.
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorHorizontalAlignment?;
    # The ID of the recipient to whom the tab will be assigned. This value should match the `recipientId` defined in the recipient object
    string recipientId?;
    PropertyMetadata xPositionMetadata?;
    PropertyMetadata tabGroupLabelsMetadata?;
    PropertyMetadata fontSizeMetadata?;
    PropertyMetadata formPageNumberMetadata?;
    PropertyMetadata tabLabelMetadata?;
    # Reserved for DocuSign
    string shareToRecipients?;
    PropertyMetadata sharedMetadata?;
    PropertyMetadata tabOrderMetadata?;
    PropertyMetadata shareToRecipientsMetadata?;
    PropertyMetadata conditionalParentValueMetadata?;
    # The width of the tab in pixels.
    # Must be an integer
    string width?;
    PropertyMetadata fontColorMetadata?;
    PropertyMetadata senderRequiredMetadata?;
    # When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.
    # 
    # When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.
    # 
    # This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes
    string concealValueOnDocument?;
    PropertyMetadata concealValueOnDocumentMetadata?;
    # The font to be used for the tab value. Supported fonts include:
    # 
    # - Default
    # - Arial
    # - ArialNarrow
    # - Calibri
    # - CourierNew
    # - Garamond
    # - Georgia
    # - Helvetica
    # - LucidaConsole
    # - MSGothic
    # - MSMincho
    # - OCR-A
    # - Tahoma
    # - TimesNewRoman
    # - Trebuchet
    # - Verdana
    string font?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    # Reserved for DocuSign
    string anchorTabProcessorVersion?;
    # The page number on which the tab is located.
    # For supplemental documents, this value must be `1`
    string pageNumber?;
    # The label associated with the tab. This value may be an empty string.
    # If no value is provided, the tab type is used as the value.
    # 
    # Maximum Length: 500 characters
    string tabLabel?;
    PropertyMetadata anchorHorizontalAlignmentMetadata?;
    PropertyMetadata anchorTabProcessorVersionMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # Reserved for DocuSign
    string 'source?;
    # When **true,** the information in the tab is italic
    string italic?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    PropertyMetadata requireInitialOnSharedChangeMetadata?;
    PropertyMetadata nameMetadata?;
    PropertyMetadata pageNumberMetadata?;
    PropertyMetadata tabTypeMetadata?;
    PropertyMetadata anchorAllowWhiteSpaceInCharactersMetadata?;
    PropertyMetadata anchorIgnoreIfNotPresentMetadata?;
    # When **true,** the signer cannot change the data of the custom tab
    string locked?;
    # When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes
    string disableAutoSize?;
    # For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility
    string conditionalParentLabel?;
    # The message displayed if the custom tab fails input validation (either custom of embedded)
    string validationMessage?;
    # The initial value of the tab. 
    string originalValue?;
    # When **true,** the information in the tab is bold
    string bold?;
    # Reserved for DocuSign
    string mergeFieldXml?;
    # When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**
    # 
    # For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.
    # 
    # This functionality uses the following rules:
    # 
    # - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:
    # 
    #   $~><|^+=
    # 
    #   For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`
    # 
    # - Strings embedded in other strings are ignored during the matching process.
    # 
    # - In words that have dashes, the parts separated by dashes are treated as distinct words.
    # 
    #   Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**
    # 
    # - Letters with accent marks are treated as distinct characters from their unaccented counterparts.
    # 
    # - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.
    # 
    #   Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.
    # 
    # - Unlike punctuation, numbers are not ignored when finding anchor words.
    # 
    #   Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).
    # 
    # 
    # **Note:** You can only specify the value of this property in POST requests.
    # 
    # [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
    string anchorMatchWholeWord?;
    PropertyMetadata conditionalParentLabelMetadata?;
    # For conditional fields, this is the value of the parent tab that controls the tab's visibility.
    # 
    # If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active
    string conditionalParentValue?;
    SmartContractInformation smartContractInformation?;
    # A positive integer that sets the order the tab is navigated to during signing.
    # 
    # Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used
    string tabOrder?;
    # The name of the tab. For example, `Sign Here` or `Initial Here`.
    # 
    # If the `tooltip` attribute is not set, this value will be displayed as the custom tooltip text
    string name?;
    PropertyMetadata anchorCaseSensitiveMetadata?;
    # An optional value that describes the maximum length of the property when the property is a string
    string maxLength?;
    PropertyMetadata disableAutoSizeMetadata?;
    ErrorDetails errorDetails?;
    PropertyMetadata italicMetadata?;
    PropertyMetadata anchorUnitsMetadata?;
    PropertyMetadata maxLengthMetadata?;
    # When **true,** this tab is ignored if the `anchorString` is not found in the document
    string anchorIgnoreIfNotPresent?;
    PropertyMetadata validationPatternMetadata?;
    # When **true,** the text string in the document may have extra whitespace and still match the anchor string. This occurs in two cases.
    # 
    # First, it matches if the document string has a single extra whitespace character following a non-whitespace character in the anchor string. For example, if the anchor string is `DocuSign`, then `Docu Sign` will match. However, <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will not match.
    # 
    # Second, it matches if the document string has one or more extra whitespace characters following a whitespace character in the anchor string. For example, if the anchor string is `Docu Sign`, then <code>Docu&nbsp;&nbsp;&nbsp;Sign</code> will match.
    # 
    # The default value is **true.**
    string anchorAllowWhiteSpaceInCharacters?;
    PropertyMetadata templateLockedMetadata?;
    PropertyMetadata anchorXOffsetMetadata?;
    # Specifies the value of the tab. 
    string value?;
    # Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:
    # 
    # - `pixels` (default)
    # - `inches`
    # - `mms`
    # - `cms`
    string anchorUnits?;
    PropertyMetadata yPositionMetadata?;
    PropertyMetadata validationMessageMetadata?;
    PropertyMetadata recipientIdGuidMetadata?;
    # The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties
    string customTabId?;
    PropertyMetadata customTabIdMetadata?;
    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute
    string documentId?;
    PropertyMetadata heightMetadata?;
    PropertyMetadata documentIdMetadata?;
    PropertyMetadata anchorYOffsetMetadata?;
    # The font color to use for the information in the tab. Possible values are: 
    # 
    # - Black
    # - BrightBlue
    # - BrightRed
    # - DarkGreen
    # - DarkRed
    # - Gold
    # - Green
    # - NavyBlue
    # - Purple
    # - White
    string fontColor?;
    PropertyMetadata captionMetadata?;
};

# 
public type Contact record {
    # When **true,** this contact is shared
    string shared?;
    # The ID of the signing group
    string signingGroup?;
    # A list of the contact's phone numbers.
    # 
    # **Note:** The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:
    # 
    # - Sending an envelope by using SMS
    # - Using phone authentication
    # 
    # You must ask the user who added the contact for the phone number and then manually enter it into the authentication box
    ContactPhoneNumber[] contactPhoneNumbers?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    # The ID of the container at the cloud provider. For example, this might be the room ID for a DocuSign Transaction Room
    string cloudProviderContainerId?;
    # The ID of a contact person in the account's address book
    string contactId?;
    # An array of email addresses
    string[] emails?;
    # 
    string roomContactType?;
    # 
    boolean isOwner?;
    NotaryContactDetails notaryContactDetails?;
    # The cloud service that provided the contact. Valid values are:
    # 
    # - `rooms`
    # - `docusignCore` (default)
    # 
    # <!-- Future:
    # 
    # - `Box`
    # - `GoogleDrive`
    # - `Dropbox`
    # - `SalesForce`
    # - `SkyDrive`
    # 
    # -->
    string cloudProvider?;
    # 
    string organization?;
    # The name of the contact
    string name?;
    # The URI for retrieving information about the contact
    string contactUri?;
    ErrorDetails errorDetails?;
};

# Contains details about the default notification settings for the envelope notifications that senders and signers receive
public type NotificationDefaultSettings record {
    SenderEmailNotifications senderEmailNotifications?;
    SignerEmailNotifications signerEmailNotifications?;
};

# 
public type SocialAccountInformation record {
    # The social account provider (Facebook, Yahoo, etc.)
    string provider?;
    # The ID provided by the Socal Account
    string socialId?;
    # The full user name for the account
    string userName?;
    # The users email address
    string email?;
    ErrorDetails errorDetails?;
};

# 
public type RecipientDomain record {
    # 
    string domainCode?;
    # 
    string recipientDomainId?;
    # 
    string domainName?;
    # 
    string active?;
};

# Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents
public type CertifiedDelivery record {
    # Specifies whether the recipient is embedded or remote. 
    # 
    # If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.
    # 
    # If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.
    # 
    # **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.
    # 
    # Maximum length: 100 characters. 
    string clientUserId?;
    # When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    string templateLocked?;
    PropertyMetadata signingGroupIdMetadata?;
    PropertyMetadata requireIdLookupMetadata?;
    # The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. This property is read-only
    string recipientIdGuid?;
    # When **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. 
    string inheritEmailNotificationConfiguration?;
    PropertyMetadata noteMetadata?;
    PropertyMetadata accessCodeMetadata?;
    # Reserved for DocuSign
    RecipientAttachment[] recipientAttachments?;
    # When **true,** the sender may not remove the recipient. Used only when working with template recipients
    string templateRequired?;
    # The date and time that the envelope was delivered to the recipient. This property is read-only
    string deliveredDateTime?;
    # When **true,** email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox
    string suppressEmails?;
    PropertyMetadata nameMetadata?;
    # The recipient type, as specified by the following values:
    # - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
    # - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
    # - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
    # - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
    # - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
    # - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
    # - `seal`: Electronic seal recipients represent legal entities.
    # - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
    # - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope
    string recipientType?;
    # If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 
    # 
    # Maximum Length: 50 characters and it must conform to the account's access code format setting.
    # 
    # If blank, but the signer `accessCode` property is set in the envelope, then that value is used.
    # 
    # If blank and the signer `accessCode` property is not set, then the access code is not required
    string accessCode?;
    # When **true,** the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
    string requireIdLookup?;
    # Error message provided by the destination email system. This field is only provided if the email notification to the recipient fails to send. This property is read-only
    string autoRespondedReason?;
    # Metadata about the features that are supported for the recipient type. This property is read-only
    FeatureAvailableMetadata[] recipientFeatureMetadata?;
    # The UTC DateTime when the envelope was sent. This property is read-only
    string sentDateTime?;
    # Reserved for DocuSign
    string designatorId?;
    # Optional element. When **true,** the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account
    string agentCanEditEmail?;
    # Optional element. When **true,** the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account
    string agentCanEditName?;
    RecipientPhoneAuthentication phoneAuthentication?;
    # Reserved for DocuSign
    string designatorIdGuid?;
    # Deprecated
    SocialAuthentication[] socialAuthentications?;
    RecipientIdentityVerification identityVerification?;
    # The total number of tabs in the documents. This property is read-only
    string totalTabCount?;
    # Optional. When **true,** the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient
    string addAccessCodeToEmail?;
    # Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. This property is read-only
    string completedCount?;
    # A complex type that contains information about users in the signing group
    UserInfo[] signingGroupUsers?;
    # An array of additional notification objects
    RecipientAdditionalNotification[] additionalNotifications?;
    IdCheckInformationInput idCheckInformationInput?;
    # The recipient's first name. Maximum Length: 50 characters
    string firstName?;
    RecipientPhoneNumber phoneNumber?;
    # The full legal name of the recipient. Maximum Length: 100 characters.
    # 
    # **Note:** You must always set a value for this property in requests, even if `firstName` and `lastName` are set
    string name?;
    # Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients
    string roleName?;
    # Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.
    # 
    # When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent
    string[] excludedDocuments?;
    PropertyMetadata routingOrderMetadata?;
    # 
    string bulkSendV2Recipient?;
    ErrorDetails errorDetails?;
    # The status of the recipient. This property is read-only. 
    # 
    # Valid values:
    # 
    # - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
    # - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
    # - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
    # - `declined`: The recipient declined to sign the documents in the envelope.
    # - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
    # - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
    # - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
    # - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`
    string status?;
    # The code associated with the recipient's status. This property is read-only
    string statusCode?;
    # Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 
    # 
    # When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.
    # 
    # It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.
    # 
    # If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 
    # 
    # *Example*: 
    # 
    # `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
    string embeddedRecipientStartURL?;
    # The recipient's last name
    string lastName?;
    # A note sent to the recipient in the signing email.
    # This note is unique to this recipient.
    # In the user interface,
    # it appears near the upper left corner
    # of the document
    # on the signing screen.
    # 
    # Maximum Length: 1000 characters
    string note?;
    # The delivery method. One of:
    # 
    # - `email`
    # - `fax`
    # - `SMS`
    # - `WhatsApp`
    # - `offline`
    # 
    # The `SMS` and `WhatsApp` delivery methods
    # are limited to `signer`, `carbonCopy`, and `certifiedDelivery`
    # recipients.
    # 
    # **Related topics**
    # 
    # - [Using SMS delivery with the eSignature API][smsconcept]
    # - [How to request a signature by SMS delivery][howto]
    # 
    # [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/
    # [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
    string deliveryMethod?;
    # An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters
    string[] customFields?;
    # The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html)
    string signingGroupId?;
    # The date and time the recipient declined the document. This property is read-only
    string declinedDateTime?;
    PropertyMetadata deliveryMethodMetadata?;
    PropertyMetadata lastNameMetadata?;
    RecipientProofFile proofFile?;
    RecipientSMSAuthentication smsAuthentication?;
    # A local reference used to map
    # recipients to other objects, such as specific
    # document tabs.
    # 
    # A `recipientId` must be
    # either an integer or a GUID,
    # and the `recipientId` must be
    # unique within an envelope.
    # 
    # For example, many envelopes assign the first recipient
    # a `recipientId` of `1`
    string recipientId?;
    # Specifies the routing order of the recipient in the envelope. 
    string routingOrder?;
    PropertyMetadata fullNameMetadata?;
    # 
    ConsentDetails[] consentDetailsList?;
    PropertyMetadata idCheckConfigurationNameMetadata?;
    # The recipient's email address
    string email?;
    # The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:
    # 
    # - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
    # - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
    # - `ID Check $`: The  recipient must answer detailed security questions. 
    # 
    # **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node
    string idCheckConfigurationName?;
    PropertyMetadata recipientTypeMetadata?;
    # Reserved for DocuSign
    string signedDateTime?;
    RecipientEmailNotification emailNotification?;
    # Optional. The name of the signing group. 
    # 
    # Maximum Length: 100 characters. 
    string signingGroupName?;
    PropertyMetadata firstNameMetadata?;
    # The reason the recipient declined the document. This property is read-only
    string declinedReason?;
    PropertyMetadata emailMetadata?;
    # Reserved for DocuSign
    string fullName?;
    # Reserved for DocuSign
    string lockedRecipientPhoneAuthEditable?;
    # When **true,** if the recipient is locked on a template, advanced recipient routing can override the lock
    string allowSystemOverrideForLockedRecipient?;
    # The ID of the user to access.
    # 
    # **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings
    string userId?;
    # Reserved for DocuSign
    string lockedRecipientSmsEditable?;
    PropertyMetadata faxNumberMetadata?;
    # Reserved for DocuSign
    string faxNumber?;
    AuthenticationStatus recipientAuthenticationStatus?;
    # A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true.**
    DocumentVisibility[] documentVisibility?;
    # 
    string emailRecipientPostSigningURL?;
};

# 
public type EnvelopeMetadata record {
    # Specifies if DocuSign eNotary service is enabled for the envelope
    string enableSignWithNotary?;
    # Specifies if the Advanced Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or are shared with you. It offers more functionality than the Correct feature
    string allowAdvancedCorrect?;
    # Specifies if the Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or are shared with you, including the recipient, envelope, and document information
    string allowCorrect?;
};

# This object provides details about a custom field
public type CustomField record {
    # For a list custom field, this is an array of strings that represent the items in a list. 
    # 
    # Maximum Length: 2,000 characters
    string[] listItems?;
    # The name of the custom field
    string name?;
    # When **true,** the custom field displays at the top of the Certificate of Completion
    string show?;
    # Specifies the value of the custom field. 
    # 
    # Maximum Length: 2,000 characters
    string value?;
    # When **true,** the signer must complete the custom field
    string required?;
    # The type of custom field. Valid values are:
    # 
    # - `text` (default)
    # - `list`
    string customFieldType?;
    ErrorDetails errorDetails?;
    # The ID of the custom field
    string fieldId?;
};

# Represents the Queries record for the operation: AccountCustomFields_DeleteAccountCustomFields
public type AccountCustomFieldsDeleteAccountCustomFieldsQueries record {
    @http:Query {name: "apply_to_templates"}
    string applyToTemplates?;
};

# The request body for the [TemplateViews: createEdit](/docs/esign-rest-api/reference/templates/templateviews/createedit/) method
public type ReturnUrlRequest record {
    # The URL to which the user should be redirected after the editing session is complete. It must be an absolute URL (e.g. `https://www.example.com` not `www.example.com`).
    # 
    # The maximum length is 470 characters. If the value exceeds this limit, the user is redirected to a truncated URL.
    # 
    # **Note:** If this property is not provided, the user will have full access to the sending account
    string returnUrl?;
};
